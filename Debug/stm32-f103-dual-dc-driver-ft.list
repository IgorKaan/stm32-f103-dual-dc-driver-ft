
stm32-f103-dual-dc-driver-ft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008364  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08008474  08008474  00018474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085b4  080085b4  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  080085b4  080085b4  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  080085b4  080085b4  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085b4  080085b4  000185b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085b8  080085b8  000185b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  080085bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002bd0  20000028  080085e4  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002bf8  080085e4  00022bf8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c8b  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000359b  00000000  00000000  00039cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001518  00000000  00000000  0003d278  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001380  00000000  00000000  0003e790  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000bf22  00000000  00000000  0003fb10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00007496  00000000  00000000  0004ba32  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00052ec8  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000058dc  00000000  00000000  00052f44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000028 	.word	0x20000028
 800012c:	00000000 	.word	0x00000000
 8000130:	0800845c 	.word	0x0800845c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000002c 	.word	0x2000002c
 800014c:	0800845c 	.word	0x0800845c

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	; 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800020c:	f1a2 0201 	sub.w	r2, r2, #1
 8000210:	d1ed      	bne.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003be:	2afd      	cmp	r2, #253	; 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	; 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	; 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	; 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__gesf2>:
 800060c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000610:	e006      	b.n	8000620 <__cmpsf2+0x4>
 8000612:	bf00      	nop

08000614 <__lesf2>:
 8000614:	f04f 0c01 	mov.w	ip, #1
 8000618:	e002      	b.n	8000620 <__cmpsf2+0x4>
 800061a:	bf00      	nop

0800061c <__cmpsf2>:
 800061c:	f04f 0c01 	mov.w	ip, #1
 8000620:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000624:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000628:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800062c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000630:	bf18      	it	ne
 8000632:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000636:	d011      	beq.n	800065c <__cmpsf2+0x40>
 8000638:	b001      	add	sp, #4
 800063a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063e:	bf18      	it	ne
 8000640:	ea90 0f01 	teqne	r0, r1
 8000644:	bf58      	it	pl
 8000646:	ebb2 0003 	subspl.w	r0, r2, r3
 800064a:	bf88      	it	hi
 800064c:	17c8      	asrhi	r0, r1, #31
 800064e:	bf38      	it	cc
 8000650:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000654:	bf18      	it	ne
 8000656:	f040 0001 	orrne.w	r0, r0, #1
 800065a:	4770      	bx	lr
 800065c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000660:	d102      	bne.n	8000668 <__cmpsf2+0x4c>
 8000662:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000666:	d105      	bne.n	8000674 <__cmpsf2+0x58>
 8000668:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800066c:	d1e4      	bne.n	8000638 <__cmpsf2+0x1c>
 800066e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000672:	d0e1      	beq.n	8000638 <__cmpsf2+0x1c>
 8000674:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <__aeabi_cfrcmple>:
 800067c:	4684      	mov	ip, r0
 800067e:	4608      	mov	r0, r1
 8000680:	4661      	mov	r1, ip
 8000682:	e7ff      	b.n	8000684 <__aeabi_cfcmpeq>

08000684 <__aeabi_cfcmpeq>:
 8000684:	b50f      	push	{r0, r1, r2, r3, lr}
 8000686:	f7ff ffc9 	bl	800061c <__cmpsf2>
 800068a:	2800      	cmp	r0, #0
 800068c:	bf48      	it	mi
 800068e:	f110 0f00 	cmnmi.w	r0, #0
 8000692:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000694 <__aeabi_fcmpeq>:
 8000694:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000698:	f7ff fff4 	bl	8000684 <__aeabi_cfcmpeq>
 800069c:	bf0c      	ite	eq
 800069e:	2001      	moveq	r0, #1
 80006a0:	2000      	movne	r0, #0
 80006a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a6:	bf00      	nop

080006a8 <__aeabi_fcmplt>:
 80006a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ac:	f7ff ffea 	bl	8000684 <__aeabi_cfcmpeq>
 80006b0:	bf34      	ite	cc
 80006b2:	2001      	movcc	r0, #1
 80006b4:	2000      	movcs	r0, #0
 80006b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ba:	bf00      	nop

080006bc <__aeabi_fcmple>:
 80006bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c0:	f7ff ffe0 	bl	8000684 <__aeabi_cfcmpeq>
 80006c4:	bf94      	ite	ls
 80006c6:	2001      	movls	r0, #1
 80006c8:	2000      	movhi	r0, #0
 80006ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ce:	bf00      	nop

080006d0 <__aeabi_fcmpge>:
 80006d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d4:	f7ff ffd2 	bl	800067c <__aeabi_cfrcmple>
 80006d8:	bf94      	ite	ls
 80006da:	2001      	movls	r0, #1
 80006dc:	2000      	movhi	r0, #0
 80006de:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e2:	bf00      	nop

080006e4 <__aeabi_fcmpgt>:
 80006e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e8:	f7ff ffc8 	bl	800067c <__aeabi_cfrcmple>
 80006ec:	bf34      	ite	cc
 80006ee:	2001      	movcc	r0, #1
 80006f0:	2000      	movcs	r0, #0
 80006f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f6:	bf00      	nop

080006f8 <__aeabi_f2uiz>:
 80006f8:	0042      	lsls	r2, r0, #1
 80006fa:	d20e      	bcs.n	800071a <__aeabi_f2uiz+0x22>
 80006fc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000700:	d30b      	bcc.n	800071a <__aeabi_f2uiz+0x22>
 8000702:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000706:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800070a:	d409      	bmi.n	8000720 <__aeabi_f2uiz+0x28>
 800070c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000710:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	4770      	bx	lr
 800071a:	f04f 0000 	mov.w	r0, #0
 800071e:	4770      	bx	lr
 8000720:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000724:	d101      	bne.n	800072a <__aeabi_f2uiz+0x32>
 8000726:	0242      	lsls	r2, r0, #9
 8000728:	d102      	bne.n	8000730 <__aeabi_f2uiz+0x38>
 800072a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800072e:	4770      	bx	lr
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop

08000738 <HAL_ADC_ConvCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//void control_first_wheel(encoder_speed_data * enc_data);
//void control_second_wheel(encoder_speed_data * enc_data);
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a05      	ldr	r2, [pc, #20]	; (800075c <HAL_ADC_ConvCpltCallback+0x24>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d102      	bne.n	8000750 <HAL_ADC_ConvCpltCallback+0x18>
    {
        adc_flag = 1;
 800074a:	4b05      	ldr	r3, [pc, #20]	; (8000760 <HAL_ADC_ConvCpltCallback+0x28>)
 800074c:	2201      	movs	r2, #1
 800074e:	701a      	strb	r2, [r3, #0]
        //adc[0] = HAL_ADC_GetValue(&hadc1);
    }
}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	40012400 	.word	0x40012400
 8000760:	2000008a 	.word	0x2000008a

08000764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000768:	f001 fd5e 	bl	8002228 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076c:	f000 f8a6 	bl	80008bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000770:	f000 fb2c 	bl	8000dcc <MX_GPIO_Init>
  MX_DMA_Init();
 8000774:	f000 fb0c 	bl	8000d90 <MX_DMA_Init>
  MX_CAN_Init();
 8000778:	f000 f958 	bl	8000a2c <MX_CAN_Init>
  MX_TIM2_Init();
 800077c:	f000 fa44 	bl	8000c08 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000780:	f000 f98a 	bl	8000a98 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000784:	f000 fab6 	bl	8000cf4 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000788:	f000 f8f4 	bl	8000974 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 800078c:	4837      	ldr	r0, [pc, #220]	; (800086c <main+0x108>)
 800078e:	f004 faec 	bl	8004d6a <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start_IT(&htim2);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000792:	2100      	movs	r1, #0
 8000794:	4836      	ldr	r0, [pc, #216]	; (8000870 <main+0x10c>)
 8000796:	f004 fb3f 	bl	8004e18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800079a:	2100      	movs	r1, #0
 800079c:	4835      	ldr	r0, [pc, #212]	; (8000874 <main+0x110>)
 800079e:	f004 fb3b 	bl	8004e18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80007a2:	2104      	movs	r1, #4
 80007a4:	4833      	ldr	r0, [pc, #204]	; (8000874 <main+0x110>)
 80007a6:	f004 fb37 	bl	8004e18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80007aa:	2108      	movs	r1, #8
 80007ac:	4831      	ldr	r0, [pc, #196]	; (8000874 <main+0x110>)
 80007ae:	f004 fb33 	bl	8004e18 <HAL_TIM_PWM_Start>

  pHeader.DLC = 7;
 80007b2:	4b31      	ldr	r3, [pc, #196]	; (8000878 <main+0x114>)
 80007b4:	2207      	movs	r2, #7
 80007b6:	611a      	str	r2, [r3, #16]
  pHeader.IDE = CAN_ID_STD;
 80007b8:	4b2f      	ldr	r3, [pc, #188]	; (8000878 <main+0x114>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  pHeader.RTR = CAN_RTR_DATA;
 80007be:	4b2e      	ldr	r3, [pc, #184]	; (8000878 <main+0x114>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	60da      	str	r2, [r3, #12]
  pHeader.StdId = header_id;
 80007c4:	221a      	movs	r2, #26
 80007c6:	4b2c      	ldr	r3, [pc, #176]	; (8000878 <main+0x114>)
 80007c8:	601a      	str	r2, [r3, #0]

  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80007ca:	4b2c      	ldr	r3, [pc, #176]	; (800087c <main+0x118>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh = filter_id <<5;
 80007d0:	231f      	movs	r3, #31
 80007d2:	015b      	lsls	r3, r3, #5
 80007d4:	4a29      	ldr	r2, [pc, #164]	; (800087c <main+0x118>)
 80007d6:	6013      	str	r3, [r2, #0]
  sFilterConfig.FilterIdLow = 0;
 80007d8:	4b28      	ldr	r3, [pc, #160]	; (800087c <main+0x118>)
 80007da:	2200      	movs	r2, #0
 80007dc:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0;
 80007de:	4b27      	ldr	r3, [pc, #156]	; (800087c <main+0x118>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 80007e4:	4b25      	ldr	r3, [pc, #148]	; (800087c <main+0x118>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 80007ea:	4b24      	ldr	r3, [pc, #144]	; (800087c <main+0x118>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 80007f0:	4b22      	ldr	r3, [pc, #136]	; (800087c <main+0x118>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterActivation = ENABLE;
 80007f6:	4b21      	ldr	r3, [pc, #132]	; (800087c <main+0x118>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	621a      	str	r2, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 80007fc:	491f      	ldr	r1, [pc, #124]	; (800087c <main+0x118>)
 80007fe:	4820      	ldr	r0, [pc, #128]	; (8000880 <main+0x11c>)
 8000800:	f002 faf5 	bl	8002dee <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan);
 8000804:	481e      	ldr	r0, [pc, #120]	; (8000880 <main+0x11c>)
 8000806:	f002 fbbb 	bl	8002f80 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800080a:	2102      	movs	r1, #2
 800080c:	481c      	ldr	r0, [pc, #112]	; (8000880 <main+0x11c>)
 800080e:	f002 fde6 	bl	80033de <HAL_CAN_ActivateNotification>

  HAL_ADCEx_Calibration_Start(&hadc1);
 8000812:	481c      	ldr	r0, [pc, #112]	; (8000884 <main+0x120>)
 8000814:	f002 f954 	bl	8002ac0 <HAL_ADCEx_Calibration_Start>
  //HAL_ADC_Start_IT(&hadc1);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc, 3);
 8000818:	2203      	movs	r2, #3
 800081a:	491b      	ldr	r1, [pc, #108]	; (8000888 <main+0x124>)
 800081c:	4819      	ldr	r0, [pc, #100]	; (8000884 <main+0x120>)
 800081e:	f001 fe2f 	bl	8002480 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000822:	f005 f921 	bl	8005a68 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of firstTask */
  firstTaskHandle = osThreadNew(StartDefaultTask, NULL, &firstTask_attributes);
 8000826:	4a19      	ldr	r2, [pc, #100]	; (800088c <main+0x128>)
 8000828:	2100      	movs	r1, #0
 800082a:	4819      	ldr	r0, [pc, #100]	; (8000890 <main+0x12c>)
 800082c:	f005 f982 	bl	8005b34 <osThreadNew>
 8000830:	4602      	mov	r2, r0
 8000832:	4b18      	ldr	r3, [pc, #96]	; (8000894 <main+0x130>)
 8000834:	601a      	str	r2, [r3, #0]

  /* creation of secondTask */
  secondTaskHandle = osThreadNew(StartTask02, NULL, &secondTask_attributes);
 8000836:	4a18      	ldr	r2, [pc, #96]	; (8000898 <main+0x134>)
 8000838:	2100      	movs	r1, #0
 800083a:	4818      	ldr	r0, [pc, #96]	; (800089c <main+0x138>)
 800083c:	f005 f97a 	bl	8005b34 <osThreadNew>
 8000840:	4602      	mov	r2, r0
 8000842:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <main+0x13c>)
 8000844:	601a      	str	r2, [r3, #0]

  /* creation of thirdTask */
  thirdTaskHandle = osThreadNew(StartTask03, NULL, &thirdTask_attributes);
 8000846:	4a17      	ldr	r2, [pc, #92]	; (80008a4 <main+0x140>)
 8000848:	2100      	movs	r1, #0
 800084a:	4817      	ldr	r0, [pc, #92]	; (80008a8 <main+0x144>)
 800084c:	f005 f972 	bl	8005b34 <osThreadNew>
 8000850:	4602      	mov	r2, r0
 8000852:	4b16      	ldr	r3, [pc, #88]	; (80008ac <main+0x148>)
 8000854:	601a      	str	r2, [r3, #0]

  /* creation of fourthTask */
  fourthTaskHandle = osThreadNew(StartTask04, NULL, &fourthTask_attributes);
 8000856:	4a16      	ldr	r2, [pc, #88]	; (80008b0 <main+0x14c>)
 8000858:	2100      	movs	r1, #0
 800085a:	4816      	ldr	r0, [pc, #88]	; (80008b4 <main+0x150>)
 800085c:	f005 f96a 	bl	8005b34 <osThreadNew>
 8000860:	4602      	mov	r2, r0
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <main+0x154>)
 8000864:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000866:	f005 f931 	bl	8005acc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800086a:	e7fe      	b.n	800086a <main+0x106>
 800086c:	2000260c 	.word	0x2000260c
 8000870:	20002af8 	.word	0x20002af8
 8000874:	200026cc 	.word	0x200026cc
 8000878:	20002b58 	.word	0x20002b58
 800087c:	200025b4 	.word	0x200025b4
 8000880:	200025e4 	.word	0x200025e4
 8000884:	20002650 	.word	0x20002650
 8000888:	20000084 	.word	0x20000084
 800088c:	0800850c 	.word	0x0800850c
 8000890:	08000f31 	.word	0x08000f31
 8000894:	2000264c 	.word	0x2000264c
 8000898:	08008530 	.word	0x08008530
 800089c:	08000fc9 	.word	0x08000fc9
 80008a0:	200025dc 	.word	0x200025dc
 80008a4:	08008554 	.word	0x08008554
 80008a8:	08000fdd 	.word	0x08000fdd
 80008ac:	20002680 	.word	0x20002680
 80008b0:	08008578 	.word	0x08008578
 80008b4:	08001055 	.word	0x08001055
 80008b8:	20002b54 	.word	0x20002b54

080008bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b094      	sub	sp, #80	; 0x50
 80008c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008c6:	2228      	movs	r2, #40	; 0x28
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f007 fdbd 	bl	800844a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008ec:	2301      	movs	r3, #1
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008fa:	2301      	movs	r3, #1
 80008fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fe:	2302      	movs	r3, #2
 8000900:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000902:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000906:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000908:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800090c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000912:	4618      	mov	r0, r3
 8000914:	f003 fc40 	bl	8004198 <HAL_RCC_OscConfig>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800091e:	f000 fc99 	bl	8001254 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000922:	230f      	movs	r3, #15
 8000924:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000926:	2302      	movs	r3, #2
 8000928:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800092e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000932:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	2102      	movs	r1, #2
 800093e:	4618      	mov	r0, r3
 8000940:	f003 feaa 	bl	8004698 <HAL_RCC_ClockConfig>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800094a:	f000 fc83 	bl	8001254 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800094e:	2302      	movs	r3, #2
 8000950:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000956:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	4618      	mov	r0, r3
 800095c:	f004 f868 	bl	8004a30 <HAL_RCCEx_PeriphCLKConfig>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000966:	f000 fc75 	bl	8001254 <Error_Handler>
  }
}
 800096a:	bf00      	nop
 800096c:	3750      	adds	r7, #80	; 0x50
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000984:	4b27      	ldr	r3, [pc, #156]	; (8000a24 <MX_ADC1_Init+0xb0>)
 8000986:	4a28      	ldr	r2, [pc, #160]	; (8000a28 <MX_ADC1_Init+0xb4>)
 8000988:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800098a:	4b26      	ldr	r3, [pc, #152]	; (8000a24 <MX_ADC1_Init+0xb0>)
 800098c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000990:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000992:	4b24      	ldr	r3, [pc, #144]	; (8000a24 <MX_ADC1_Init+0xb0>)
 8000994:	2200      	movs	r2, #0
 8000996:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000998:	4b22      	ldr	r3, [pc, #136]	; (8000a24 <MX_ADC1_Init+0xb0>)
 800099a:	2200      	movs	r2, #0
 800099c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800099e:	4b21      	ldr	r3, [pc, #132]	; (8000a24 <MX_ADC1_Init+0xb0>)
 80009a0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80009a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009a6:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <MX_ADC1_Init+0xb0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 80009ac:	4b1d      	ldr	r3, [pc, #116]	; (8000a24 <MX_ADC1_Init+0xb0>)
 80009ae:	2203      	movs	r2, #3
 80009b0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009b2:	481c      	ldr	r0, [pc, #112]	; (8000a24 <MX_ADC1_Init+0xb0>)
 80009b4:	f001 fc8c 	bl	80022d0 <HAL_ADC_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80009be:	f000 fc49 	bl	8001254 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009c2:	2301      	movs	r3, #1
 80009c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009c6:	2301      	movs	r3, #1
 80009c8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80009ca:	2301      	movs	r3, #1
 80009cc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	4619      	mov	r1, r3
 80009d2:	4814      	ldr	r0, [pc, #80]	; (8000a24 <MX_ADC1_Init+0xb0>)
 80009d4:	f001 fe8a 	bl	80026ec <HAL_ADC_ConfigChannel>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80009de:	f000 fc39 	bl	8001254 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80009e2:	2305      	movs	r3, #5
 80009e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009e6:	2302      	movs	r3, #2
 80009e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	4619      	mov	r1, r3
 80009ee:	480d      	ldr	r0, [pc, #52]	; (8000a24 <MX_ADC1_Init+0xb0>)
 80009f0:	f001 fe7c 	bl	80026ec <HAL_ADC_ConfigChannel>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80009fa:	f000 fc2b 	bl	8001254 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80009fe:	2309      	movs	r3, #9
 8000a00:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a02:	2303      	movs	r3, #3
 8000a04:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4806      	ldr	r0, [pc, #24]	; (8000a24 <MX_ADC1_Init+0xb0>)
 8000a0c:	f001 fe6e 	bl	80026ec <HAL_ADC_ConfigChannel>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000a16:	f000 fc1d 	bl	8001254 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	3710      	adds	r7, #16
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20002650 	.word	0x20002650
 8000a28:	40012400 	.word	0x40012400

08000a2c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000a30:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <MX_CAN_Init+0x64>)
 8000a32:	4a18      	ldr	r2, [pc, #96]	; (8000a94 <MX_CAN_Init+0x68>)
 8000a34:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000a36:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <MX_CAN_Init+0x64>)
 8000a38:	2204      	movs	r2, #4
 8000a3a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <MX_CAN_Init+0x64>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a42:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <MX_CAN_Init+0x64>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_7TQ;
 8000a48:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <MX_CAN_Init+0x64>)
 8000a4a:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000a4e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a50:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <MX_CAN_Init+0x64>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <MX_CAN_Init+0x64>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <MX_CAN_Init+0x64>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <MX_CAN_Init+0x64>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000a68:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <MX_CAN_Init+0x64>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <MX_CAN_Init+0x64>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <MX_CAN_Init+0x64>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000a7a:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_CAN_Init+0x64>)
 8000a7c:	f002 f8bc 	bl	8002bf8 <HAL_CAN_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8000a86:	f000 fbe5 	bl	8001254 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200025e4 	.word	0x200025e4
 8000a94:	40006400 	.word	0x40006400

08000a98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b096      	sub	sp, #88	; 0x58
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
 8000ac4:	611a      	str	r2, [r3, #16]
 8000ac6:	615a      	str	r2, [r3, #20]
 8000ac8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	2220      	movs	r2, #32
 8000ace:	2100      	movs	r1, #0
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f007 fcba 	bl	800844a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ad6:	4b4a      	ldr	r3, [pc, #296]	; (8000c00 <MX_TIM1_Init+0x168>)
 8000ad8:	4a4a      	ldr	r2, [pc, #296]	; (8000c04 <MX_TIM1_Init+0x16c>)
 8000ada:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8000adc:	4b48      	ldr	r3, [pc, #288]	; (8000c00 <MX_TIM1_Init+0x168>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae2:	4b47      	ldr	r3, [pc, #284]	; (8000c00 <MX_TIM1_Init+0x168>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3599;
 8000ae8:	4b45      	ldr	r3, [pc, #276]	; (8000c00 <MX_TIM1_Init+0x168>)
 8000aea:	f640 620f 	movw	r2, #3599	; 0xe0f
 8000aee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af0:	4b43      	ldr	r3, [pc, #268]	; (8000c00 <MX_TIM1_Init+0x168>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000af6:	4b42      	ldr	r3, [pc, #264]	; (8000c00 <MX_TIM1_Init+0x168>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afc:	4b40      	ldr	r3, [pc, #256]	; (8000c00 <MX_TIM1_Init+0x168>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b02:	483f      	ldr	r0, [pc, #252]	; (8000c00 <MX_TIM1_Init+0x168>)
 8000b04:	f004 f906 	bl	8004d14 <HAL_TIM_Base_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000b0e:	f000 fba1 	bl	8001254 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b16:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b18:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4838      	ldr	r0, [pc, #224]	; (8000c00 <MX_TIM1_Init+0x168>)
 8000b20:	f004 fb7a 	bl	8005218 <HAL_TIM_ConfigClockSource>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b2a:	f000 fb93 	bl	8001254 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b2e:	4834      	ldr	r0, [pc, #208]	; (8000c00 <MX_TIM1_Init+0x168>)
 8000b30:	f004 f93e 	bl	8004db0 <HAL_TIM_PWM_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000b3a:	f000 fb8b 	bl	8001254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b42:	2300      	movs	r3, #0
 8000b44:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	482c      	ldr	r0, [pc, #176]	; (8000c00 <MX_TIM1_Init+0x168>)
 8000b4e:	f004 fee3 	bl	8005918 <HAL_TIMEx_MasterConfigSynchronization>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000b58:	f000 fb7c 	bl	8001254 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b5c:	2360      	movs	r3, #96	; 0x60
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b70:	2300      	movs	r3, #0
 8000b72:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b74:	2300      	movs	r3, #0
 8000b76:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	4619      	mov	r1, r3
 8000b80:	481f      	ldr	r0, [pc, #124]	; (8000c00 <MX_TIM1_Init+0x168>)
 8000b82:	f004 fa83 	bl	800508c <HAL_TIM_PWM_ConfigChannel>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000b8c:	f000 fb62 	bl	8001254 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b94:	2204      	movs	r2, #4
 8000b96:	4619      	mov	r1, r3
 8000b98:	4819      	ldr	r0, [pc, #100]	; (8000c00 <MX_TIM1_Init+0x168>)
 8000b9a:	f004 fa77 	bl	800508c <HAL_TIM_PWM_ConfigChannel>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000ba4:	f000 fb56 	bl	8001254 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bac:	2208      	movs	r2, #8
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4813      	ldr	r0, [pc, #76]	; (8000c00 <MX_TIM1_Init+0x168>)
 8000bb2:	f004 fa6b 	bl	800508c <HAL_TIM_PWM_ConfigChannel>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000bbc:	f000 fb4a 	bl	8001254 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	4619      	mov	r1, r3
 8000be2:	4807      	ldr	r0, [pc, #28]	; (8000c00 <MX_TIM1_Init+0x168>)
 8000be4:	f004 fedc 	bl	80059a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000bee:	f000 fb31 	bl	8001254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bf2:	4803      	ldr	r0, [pc, #12]	; (8000c00 <MX_TIM1_Init+0x168>)
 8000bf4:	f001 f992 	bl	8001f1c <HAL_TIM_MspPostInit>

}
 8000bf8:	bf00      	nop
 8000bfa:	3758      	adds	r7, #88	; 0x58
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	200026cc 	.word	0x200026cc
 8000c04:	40012c00 	.word	0x40012c00

08000c08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08e      	sub	sp, #56	; 0x38
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c1c:	f107 0320 	add.w	r3, r7, #32
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
 8000c34:	615a      	str	r2, [r3, #20]
 8000c36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c38:	4b2d      	ldr	r3, [pc, #180]	; (8000cf0 <MX_TIM2_Init+0xe8>)
 8000c3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000c40:	4b2b      	ldr	r3, [pc, #172]	; (8000cf0 <MX_TIM2_Init+0xe8>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c46:	4b2a      	ldr	r3, [pc, #168]	; (8000cf0 <MX_TIM2_Init+0xe8>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3599;
 8000c4c:	4b28      	ldr	r3, [pc, #160]	; (8000cf0 <MX_TIM2_Init+0xe8>)
 8000c4e:	f640 620f 	movw	r2, #3599	; 0xe0f
 8000c52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c54:	4b26      	ldr	r3, [pc, #152]	; (8000cf0 <MX_TIM2_Init+0xe8>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c5a:	4b25      	ldr	r3, [pc, #148]	; (8000cf0 <MX_TIM2_Init+0xe8>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c60:	4823      	ldr	r0, [pc, #140]	; (8000cf0 <MX_TIM2_Init+0xe8>)
 8000c62:	f004 f857 	bl	8004d14 <HAL_TIM_Base_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000c6c:	f000 faf2 	bl	8001254 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c74:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	481c      	ldr	r0, [pc, #112]	; (8000cf0 <MX_TIM2_Init+0xe8>)
 8000c7e:	f004 facb 	bl	8005218 <HAL_TIM_ConfigClockSource>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000c88:	f000 fae4 	bl	8001254 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c8c:	4818      	ldr	r0, [pc, #96]	; (8000cf0 <MX_TIM2_Init+0xe8>)
 8000c8e:	f004 f88f 	bl	8004db0 <HAL_TIM_PWM_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000c98:	f000 fadc 	bl	8001254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ca4:	f107 0320 	add.w	r3, r7, #32
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4811      	ldr	r0, [pc, #68]	; (8000cf0 <MX_TIM2_Init+0xe8>)
 8000cac:	f004 fe34 	bl	8005918 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000cb6:	f000 facd 	bl	8001254 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cba:	2360      	movs	r3, #96	; 0x60
 8000cbc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cca:	1d3b      	adds	r3, r7, #4
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4807      	ldr	r0, [pc, #28]	; (8000cf0 <MX_TIM2_Init+0xe8>)
 8000cd2:	f004 f9db 	bl	800508c <HAL_TIM_PWM_ConfigChannel>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000cdc:	f000 faba 	bl	8001254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ce0:	4803      	ldr	r0, [pc, #12]	; (8000cf0 <MX_TIM2_Init+0xe8>)
 8000ce2:	f001 f91b 	bl	8001f1c <HAL_TIM_MspPostInit>

}
 8000ce6:	bf00      	nop
 8000ce8:	3738      	adds	r7, #56	; 0x38
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20002af8 	.word	0x20002af8

08000cf4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cfa:	f107 0308 	add.w	r3, r7, #8
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d08:	463b      	mov	r3, r7
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d10:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <MX_TIM3_Init+0x94>)
 8000d12:	4a1e      	ldr	r2, [pc, #120]	; (8000d8c <MX_TIM3_Init+0x98>)
 8000d14:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 8000d16:	4b1c      	ldr	r3, [pc, #112]	; (8000d88 <MX_TIM3_Init+0x94>)
 8000d18:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000d1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1e:	4b1a      	ldr	r3, [pc, #104]	; (8000d88 <MX_TIM3_Init+0x94>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000d24:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <MX_TIM3_Init+0x94>)
 8000d26:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2c:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <MX_TIM3_Init+0x94>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <MX_TIM3_Init+0x94>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d38:	4813      	ldr	r0, [pc, #76]	; (8000d88 <MX_TIM3_Init+0x94>)
 8000d3a:	f003 ffeb 	bl	8004d14 <HAL_TIM_Base_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000d44:	f000 fa86 	bl	8001254 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d4e:	f107 0308 	add.w	r3, r7, #8
 8000d52:	4619      	mov	r1, r3
 8000d54:	480c      	ldr	r0, [pc, #48]	; (8000d88 <MX_TIM3_Init+0x94>)
 8000d56:	f004 fa5f 	bl	8005218 <HAL_TIM_ConfigClockSource>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000d60:	f000 fa78 	bl	8001254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d64:	2300      	movs	r3, #0
 8000d66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4805      	ldr	r0, [pc, #20]	; (8000d88 <MX_TIM3_Init+0x94>)
 8000d72:	f004 fdd1 	bl	8005918 <HAL_TIMEx_MasterConfigSynchronization>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000d7c:	f000 fa6a 	bl	8001254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	3718      	adds	r7, #24
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	2000260c 	.word	0x2000260c
 8000d8c:	40000400 	.word	0x40000400

08000d90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d96:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <MX_DMA_Init+0x38>)
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	4a0b      	ldr	r2, [pc, #44]	; (8000dc8 <MX_DMA_Init+0x38>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6153      	str	r3, [r2, #20]
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <MX_DMA_Init+0x38>)
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2100      	movs	r1, #0
 8000db2:	200b      	movs	r0, #11
 8000db4:	f002 fe13 	bl	80039de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000db8:	200b      	movs	r0, #11
 8000dba:	f002 fe2c 	bl	8003a16 <HAL_NVIC_EnableIRQ>

}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40021000 	.word	0x40021000

08000dcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd2:	f107 0310 	add.w	r3, r7, #16
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de0:	4b32      	ldr	r3, [pc, #200]	; (8000eac <MX_GPIO_Init+0xe0>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	4a31      	ldr	r2, [pc, #196]	; (8000eac <MX_GPIO_Init+0xe0>)
 8000de6:	f043 0320 	orr.w	r3, r3, #32
 8000dea:	6193      	str	r3, [r2, #24]
 8000dec:	4b2f      	ldr	r3, [pc, #188]	; (8000eac <MX_GPIO_Init+0xe0>)
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	f003 0320 	and.w	r3, r3, #32
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df8:	4b2c      	ldr	r3, [pc, #176]	; (8000eac <MX_GPIO_Init+0xe0>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	4a2b      	ldr	r2, [pc, #172]	; (8000eac <MX_GPIO_Init+0xe0>)
 8000dfe:	f043 0304 	orr.w	r3, r3, #4
 8000e02:	6193      	str	r3, [r2, #24]
 8000e04:	4b29      	ldr	r3, [pc, #164]	; (8000eac <MX_GPIO_Init+0xe0>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	f003 0304 	and.w	r3, r3, #4
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e10:	4b26      	ldr	r3, [pc, #152]	; (8000eac <MX_GPIO_Init+0xe0>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	4a25      	ldr	r2, [pc, #148]	; (8000eac <MX_GPIO_Init+0xe0>)
 8000e16:	f043 0308 	orr.w	r3, r3, #8
 8000e1a:	6193      	str	r3, [r2, #24]
 8000e1c:	4b23      	ldr	r3, [pc, #140]	; (8000eac <MX_GPIO_Init+0xe0>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	f003 0308 	and.w	r3, r3, #8
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2108      	movs	r1, #8
 8000e2c:	4820      	ldr	r0, [pc, #128]	; (8000eb0 <MX_GPIO_Init+0xe4>)
 8000e2e:	f003 f983 	bl	8004138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3, GPIO_PIN_RESET);
 8000e32:	2200      	movs	r2, #0
 8000e34:	f24e 0108 	movw	r1, #57352	; 0xe008
 8000e38:	481e      	ldr	r0, [pc, #120]	; (8000eb4 <MX_GPIO_Init+0xe8>)
 8000e3a:	f003 f97d 	bl	8004138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e3e:	2308      	movs	r3, #8
 8000e40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e42:	2301      	movs	r3, #1
 8000e44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4e:	f107 0310 	add.w	r3, r7, #16
 8000e52:	4619      	mov	r1, r3
 8000e54:	4816      	ldr	r0, [pc, #88]	; (8000eb0 <MX_GPIO_Init+0xe4>)
 8000e56:	f003 f815 	bl	8003e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3;
 8000e5a:	f24e 0308 	movw	r3, #57352	; 0xe008
 8000e5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e60:	2301      	movs	r3, #1
 8000e62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6c:	f107 0310 	add.w	r3, r7, #16
 8000e70:	4619      	mov	r1, r3
 8000e72:	4810      	ldr	r0, [pc, #64]	; (8000eb4 <MX_GPIO_Init+0xe8>)
 8000e74:	f003 f806 	bl	8003e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000e78:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000e7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <MX_GPIO_Init+0xec>)
 8000e80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e82:	2302      	movs	r3, #2
 8000e84:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e86:	f107 0310 	add.w	r3, r7, #16
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4809      	ldr	r0, [pc, #36]	; (8000eb4 <MX_GPIO_Init+0xe8>)
 8000e8e:	f002 fff9 	bl	8003e84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2101      	movs	r1, #1
 8000e96:	2017      	movs	r0, #23
 8000e98:	f002 fda1 	bl	80039de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e9c:	2017      	movs	r0, #23
 8000e9e:	f002 fdba 	bl	8003a16 <HAL_NVIC_EnableIRQ>

}
 8000ea2:	bf00      	nop
 8000ea4:	3720      	adds	r7, #32
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	40010800 	.word	0x40010800
 8000eb4:	40010c00 	.word	0x40010c00
 8000eb8:	10110000 	.word	0x10110000

08000ebc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_6) {
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	2b40      	cmp	r3, #64	; 0x40
 8000eca:	d107      	bne.n	8000edc <HAL_GPIO_EXTI_Callback+0x20>
		++encoder_data.encoder_tick_d;
 8000ecc:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <HAL_GPIO_EXTI_Callback+0x70>)
 8000ece:	8a1b      	ldrh	r3, [r3, #16]
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <HAL_GPIO_EXTI_Callback+0x70>)
 8000ed8:	821a      	strh	r2, [r3, #16]
		++encoder_data.encoder_tick_b;
	}
	else if (GPIO_Pin == GPIO_PIN_9) {
		++encoder_data.encoder_tick_a;
	}
}
 8000eda:	e021      	b.n	8000f20 <HAL_GPIO_EXTI_Callback+0x64>
	else if (GPIO_Pin == GPIO_PIN_7) {
 8000edc:	88fb      	ldrh	r3, [r7, #6]
 8000ede:	2b80      	cmp	r3, #128	; 0x80
 8000ee0:	d107      	bne.n	8000ef2 <HAL_GPIO_EXTI_Callback+0x36>
		++encoder_data.encoder_tick_c;
 8000ee2:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <HAL_GPIO_EXTI_Callback+0x70>)
 8000ee4:	89db      	ldrh	r3, [r3, #14]
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	3301      	adds	r3, #1
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <HAL_GPIO_EXTI_Callback+0x70>)
 8000eee:	81da      	strh	r2, [r3, #14]
}
 8000ef0:	e016      	b.n	8000f20 <HAL_GPIO_EXTI_Callback+0x64>
	else if (GPIO_Pin == GPIO_PIN_8) {
 8000ef2:	88fb      	ldrh	r3, [r7, #6]
 8000ef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ef8:	d107      	bne.n	8000f0a <HAL_GPIO_EXTI_Callback+0x4e>
		++encoder_data.encoder_tick_b;
 8000efa:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <HAL_GPIO_EXTI_Callback+0x70>)
 8000efc:	899b      	ldrh	r3, [r3, #12]
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	3301      	adds	r3, #1
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <HAL_GPIO_EXTI_Callback+0x70>)
 8000f06:	819a      	strh	r2, [r3, #12]
}
 8000f08:	e00a      	b.n	8000f20 <HAL_GPIO_EXTI_Callback+0x64>
	else if (GPIO_Pin == GPIO_PIN_9) {
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f10:	d106      	bne.n	8000f20 <HAL_GPIO_EXTI_Callback+0x64>
		++encoder_data.encoder_tick_a;
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_GPIO_EXTI_Callback+0x70>)
 8000f14:	895b      	ldrh	r3, [r3, #10]
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	3301      	adds	r3, #1
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <HAL_GPIO_EXTI_Callback+0x70>)
 8000f1e:	815a      	strh	r2, [r3, #10]
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	20000054 	.word	0x20000054

08000f30 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	if ((current_first < 2500) && (current_second < 2500) && (temperature > 1000)) {
 8000f38:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <StartDefaultTask+0x7c>)
 8000f3a:	881b      	ldrh	r3, [r3, #0]
 8000f3c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d81f      	bhi.n	8000f84 <StartDefaultTask+0x54>
 8000f44:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <StartDefaultTask+0x80>)
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d819      	bhi.n	8000f84 <StartDefaultTask+0x54>
 8000f50:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <StartDefaultTask+0x84>)
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f58:	d914      	bls.n	8000f84 <StartDefaultTask+0x54>
		control_first_wheel(&encoder_data, &can_rx_data);
 8000f5a:	4917      	ldr	r1, [pc, #92]	; (8000fb8 <StartDefaultTask+0x88>)
 8000f5c:	4817      	ldr	r0, [pc, #92]	; (8000fbc <StartDefaultTask+0x8c>)
 8000f5e:	f000 f97f 	bl	8001260 <control_first_wheel>
		osDelay(10);
 8000f62:	200a      	movs	r0, #10
 8000f64:	f004 fe90 	bl	8005c88 <osDelay>
		control_second_wheel(&encoder_data, &can_rx_data);
 8000f68:	4913      	ldr	r1, [pc, #76]	; (8000fb8 <StartDefaultTask+0x88>)
 8000f6a:	4814      	ldr	r0, [pc, #80]	; (8000fbc <StartDefaultTask+0x8c>)
 8000f6c:	f000 f9ec 	bl	8001348 <control_second_wheel>
		osDelay(10);
 8000f70:	200a      	movs	r0, #10
 8000f72:	f004 fe89 	bl	8005c88 <osDelay>
		motors++;
 8000f76:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <StartDefaultTask+0x90>)
 8000f78:	881b      	ldrh	r3, [r3, #0]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <StartDefaultTask+0x90>)
 8000f80:	801a      	strh	r2, [r3, #0]
 8000f82:	e011      	b.n	8000fa8 <StartDefaultTask+0x78>
	}
	else {
		stop_movement_first();
 8000f84:	f000 fd7c 	bl	8001a80 <stop_movement_first>
		stop_movement_second();
 8000f88:	f000 fd9a 	bl	8001ac0 <stop_movement_second>
		stop_motors++;
 8000f8c:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <StartDefaultTask+0x94>)
 8000f8e:	881b      	ldrh	r3, [r3, #0]
 8000f90:	3301      	adds	r3, #1
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <StartDefaultTask+0x94>)
 8000f96:	801a      	strh	r2, [r3, #0]
		HAL_Delay(10000);
 8000f98:	f242 7010 	movw	r0, #10000	; 0x2710
 8000f9c:	f001 f976 	bl	800228c <HAL_Delay>
		osDelay(5000);
 8000fa0:	f241 3088 	movw	r0, #5000	; 0x1388
 8000fa4:	f004 fe70 	bl	8005c88 <osDelay>
	if ((current_first < 2500) && (current_second < 2500) && (temperature > 1000)) {
 8000fa8:	e7c6      	b.n	8000f38 <StartDefaultTask+0x8>
 8000faa:	bf00      	nop
 8000fac:	20000074 	.word	0x20000074
 8000fb0:	20000076 	.word	0x20000076
 8000fb4:	20000078 	.word	0x20000078
 8000fb8:	2000006c 	.word	0x2000006c
 8000fbc:	20000054 	.word	0x20000054
 8000fc0:	2000007a 	.word	0x2000007a
 8000fc4:	2000007c 	.word	0x2000007c

08000fc8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	//control_second_wheel(&encoder_data, &can_rx_data);
	//vTaskGetRunTimeStats(pcWriteBuffer);
	//control_second_wheel(&encoder_data, &can_rx_data);
	osDelay(2000);
 8000fd0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fd4:	f004 fe58 	bl	8005c88 <osDelay>
 8000fd8:	e7fa      	b.n	8000fd0 <StartTask02+0x8>
	...

08000fdc <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  driver_can_tx_data[0] = encoder_data.encoder_speed_first_can; //for right controller
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <StartTask03+0x5c>)
 8000fe6:	7a1a      	ldrb	r2, [r3, #8]
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <StartTask03+0x60>)
 8000fea:	701a      	strb	r2, [r3, #0]
	  driver_can_tx_data[1] = can_tx_side.first_motor_can_tx_side;
 8000fec:	4b14      	ldr	r3, [pc, #80]	; (8001040 <StartTask03+0x64>)
 8000fee:	781a      	ldrb	r2, [r3, #0]
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <StartTask03+0x60>)
 8000ff2:	705a      	strb	r2, [r3, #1]
	  driver_can_tx_data[2] = encoder_data.encoder_speed_second_can;
 8000ff4:	4b10      	ldr	r3, [pc, #64]	; (8001038 <StartTask03+0x5c>)
 8000ff6:	7a5a      	ldrb	r2, [r3, #9]
 8000ff8:	4b10      	ldr	r3, [pc, #64]	; (800103c <StartTask03+0x60>)
 8000ffa:	709a      	strb	r2, [r3, #2]
	  driver_can_tx_data[3] = can_tx_side.second_motor_can_tx_side;
 8000ffc:	4b10      	ldr	r3, [pc, #64]	; (8001040 <StartTask03+0x64>)
 8000ffe:	785a      	ldrb	r2, [r3, #1]
 8001000:	4b0e      	ldr	r3, [pc, #56]	; (800103c <StartTask03+0x60>)
 8001002:	70da      	strb	r2, [r3, #3]
//	  driver_can_tx_data[2] = encoder_data.encoder_speed_first_can;
//	  driver_can_tx_data[3] = can_tx_side.first_motor_can_tx_side;
//	  driver_can_tx_data[0] = encoder_data.encoder_speed_second_can;
//	  driver_can_tx_data[1] = can_tx_side.second_motor_can_tx_side;
	  driver_can_tx_data[4] = adc_can[0];
 8001004:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <StartTask03+0x68>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4b0c      	ldr	r3, [pc, #48]	; (800103c <StartTask03+0x60>)
 800100c:	711a      	strb	r2, [r3, #4]
	  driver_can_tx_data[5] = adc_can[1];
 800100e:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <StartTask03+0x68>)
 8001010:	785b      	ldrb	r3, [r3, #1]
 8001012:	b2da      	uxtb	r2, r3
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <StartTask03+0x60>)
 8001016:	715a      	strb	r2, [r3, #5]
	  driver_can_tx_data[6] = adc_can[2];
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <StartTask03+0x68>)
 800101a:	789b      	ldrb	r3, [r3, #2]
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b07      	ldr	r3, [pc, #28]	; (800103c <StartTask03+0x60>)
 8001020:	719a      	strb	r2, [r3, #6]
	  HAL_CAN_AddTxMessage(&hcan, &pHeader, driver_can_tx_data, &TxMailbox);
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <StartTask03+0x6c>)
 8001024:	4a05      	ldr	r2, [pc, #20]	; (800103c <StartTask03+0x60>)
 8001026:	4909      	ldr	r1, [pc, #36]	; (800104c <StartTask03+0x70>)
 8001028:	4809      	ldr	r0, [pc, #36]	; (8001050 <StartTask03+0x74>)
 800102a:	f001 ffed 	bl	8003008 <HAL_CAN_AddTxMessage>
	  osDelay(10);
 800102e:	200a      	movs	r0, #10
 8001030:	f004 fe2a 	bl	8005c88 <osDelay>
	  driver_can_tx_data[0] = encoder_data.encoder_speed_first_can; //for right controller
 8001034:	e7d6      	b.n	8000fe4 <StartTask03+0x8>
 8001036:	bf00      	nop
 8001038:	20000054 	.word	0x20000054
 800103c:	20000044 	.word	0x20000044
 8001040:	20000068 	.word	0x20000068
 8001044:	20000080 	.word	0x20000080
 8001048:	2000270c 	.word	0x2000270c
 800104c:	20002b58 	.word	0x20002b58
 8001050:	200025e4 	.word	0x200025e4

08001054 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
	if(adc_flag)
 800105c:	4b26      	ldr	r3, [pc, #152]	; (80010f8 <StartTask04+0xa4>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	2b00      	cmp	r3, #0
 8001064:	d043      	beq.n	80010ee <StartTask04+0x9a>
	{
		adc_flag = 0;
 8001066:	4b24      	ldr	r3, [pc, #144]	; (80010f8 <StartTask04+0xa4>)
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
	  	HAL_ADC_Stop_DMA(&hadc1);
 800106c:	4823      	ldr	r0, [pc, #140]	; (80010fc <StartTask04+0xa8>)
 800106e:	f001 fae5 	bl	800263c <HAL_ADC_Stop_DMA>
	  	current_first = adc[0];
 8001072:	4b23      	ldr	r3, [pc, #140]	; (8001100 <StartTask04+0xac>)
 8001074:	881b      	ldrh	r3, [r3, #0]
 8001076:	b29a      	uxth	r2, r3
 8001078:	4b22      	ldr	r3, [pc, #136]	; (8001104 <StartTask04+0xb0>)
 800107a:	801a      	strh	r2, [r3, #0]
	  	current_second = adc[1];
 800107c:	4b20      	ldr	r3, [pc, #128]	; (8001100 <StartTask04+0xac>)
 800107e:	885b      	ldrh	r3, [r3, #2]
 8001080:	b29a      	uxth	r2, r3
 8001082:	4b21      	ldr	r3, [pc, #132]	; (8001108 <StartTask04+0xb4>)
 8001084:	801a      	strh	r2, [r3, #0]
	  	temperature = adc[2];
 8001086:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <StartTask04+0xac>)
 8001088:	889b      	ldrh	r3, [r3, #4]
 800108a:	b29a      	uxth	r2, r3
 800108c:	4b1f      	ldr	r3, [pc, #124]	; (800110c <StartTask04+0xb8>)
 800108e:	801a      	strh	r2, [r3, #0]
	  	adc_can[0] = (uint8_t)(adc[0]/10);
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <StartTask04+0xac>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	b29b      	uxth	r3, r3
 8001096:	4a1e      	ldr	r2, [pc, #120]	; (8001110 <StartTask04+0xbc>)
 8001098:	fba2 2303 	umull	r2, r3, r2, r3
 800109c:	08db      	lsrs	r3, r3, #3
 800109e:	b29b      	uxth	r3, r3
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <StartTask04+0xc0>)
 80010a4:	701a      	strb	r2, [r3, #0]
	  	adc_can[1] = (uint8_t)(adc[1]/10);
 80010a6:	4b16      	ldr	r3, [pc, #88]	; (8001100 <StartTask04+0xac>)
 80010a8:	885b      	ldrh	r3, [r3, #2]
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	4a18      	ldr	r2, [pc, #96]	; (8001110 <StartTask04+0xbc>)
 80010ae:	fba2 2303 	umull	r2, r3, r2, r3
 80010b2:	08db      	lsrs	r3, r3, #3
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	4b16      	ldr	r3, [pc, #88]	; (8001114 <StartTask04+0xc0>)
 80010ba:	705a      	strb	r2, [r3, #1]
	    adc_can[2] = (uint8_t)(adc[2]/10);
 80010bc:	4b10      	ldr	r3, [pc, #64]	; (8001100 <StartTask04+0xac>)
 80010be:	889b      	ldrh	r3, [r3, #4]
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	4a13      	ldr	r2, [pc, #76]	; (8001110 <StartTask04+0xbc>)
 80010c4:	fba2 2303 	umull	r2, r3, r2, r3
 80010c8:	08db      	lsrs	r3, r3, #3
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <StartTask04+0xc0>)
 80010d0:	709a      	strb	r2, [r3, #2]
	  	adc[0] = 0;
 80010d2:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <StartTask04+0xac>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	801a      	strh	r2, [r3, #0]
	  	adc[1] = 0;
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <StartTask04+0xac>)
 80010da:	2200      	movs	r2, #0
 80010dc:	805a      	strh	r2, [r3, #2]
	  	adc[2] = 0;
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <StartTask04+0xac>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	809a      	strh	r2, [r3, #4]
	  	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc, 3);
 80010e4:	2203      	movs	r2, #3
 80010e6:	4906      	ldr	r1, [pc, #24]	; (8001100 <StartTask04+0xac>)
 80010e8:	4804      	ldr	r0, [pc, #16]	; (80010fc <StartTask04+0xa8>)
 80010ea:	f001 f9c9 	bl	8002480 <HAL_ADC_Start_DMA>
	}
    osDelay(100);
 80010ee:	2064      	movs	r0, #100	; 0x64
 80010f0:	f004 fdca 	bl	8005c88 <osDelay>
	if(adc_flag)
 80010f4:	e7b2      	b.n	800105c <StartTask04+0x8>
 80010f6:	bf00      	nop
 80010f8:	2000008a 	.word	0x2000008a
 80010fc:	20002650 	.word	0x20002650
 8001100:	20000084 	.word	0x20000084
 8001104:	20000074 	.word	0x20000074
 8001108:	20000076 	.word	0x20000076
 800110c:	20000078 	.word	0x20000078
 8001110:	cccccccd 	.word	0xcccccccd
 8001114:	20000080 	.word	0x20000080

08001118 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001118:	b590      	push	{r4, r7, lr}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a46      	ldr	r2, [pc, #280]	; (8001240 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d101      	bne.n	800112e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800112a:	f001 f893 	bl	8002254 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM3) {
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a44      	ldr	r2, [pc, #272]	; (8001244 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d17f      	bne.n	8001238 <HAL_TIM_PeriodElapsedCallback+0x120>
	++tim3_it;
 8001138:	4b43      	ldr	r3, [pc, #268]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	3301      	adds	r3, #1
 800113e:	b29a      	uxth	r2, r3
 8001140:	4b41      	ldr	r3, [pc, #260]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001142:	801a      	strh	r2, [r3, #0]
	encoder_data.encoder_speed_first = encoder_data.encoder_tick_a*(float)600/encoder_ratio;
 8001144:	4b41      	ldr	r3, [pc, #260]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001146:	895b      	ldrh	r3, [r3, #10]
 8001148:	b29b      	uxth	r3, r3
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff f8ba 	bl	80002c4 <__aeabi_i2f>
 8001150:	4603      	mov	r3, r0
 8001152:	493f      	ldr	r1, [pc, #252]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff f909 	bl	800036c <__aeabi_fmul>
 800115a:	4603      	mov	r3, r0
 800115c:	461c      	mov	r4, r3
 800115e:	f240 335d 	movw	r3, #861	; 0x35d
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff f8ae 	bl	80002c4 <__aeabi_i2f>
 8001168:	4603      	mov	r3, r0
 800116a:	4619      	mov	r1, r3
 800116c:	4620      	mov	r0, r4
 800116e:	f7ff f9b1 	bl	80004d4 <__aeabi_fdiv>
 8001172:	4603      	mov	r3, r0
 8001174:	461a      	mov	r2, r3
 8001176:	4b35      	ldr	r3, [pc, #212]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001178:	601a      	str	r2, [r3, #0]
	encoder_data.encoder_speed_second = encoder_data.encoder_tick_c*(float)600/encoder_ratio;
 800117a:	4b34      	ldr	r3, [pc, #208]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x134>)
 800117c:	89db      	ldrh	r3, [r3, #14]
 800117e:	b29b      	uxth	r3, r3
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff f89f 	bl	80002c4 <__aeabi_i2f>
 8001186:	4603      	mov	r3, r0
 8001188:	4931      	ldr	r1, [pc, #196]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f8ee 	bl	800036c <__aeabi_fmul>
 8001190:	4603      	mov	r3, r0
 8001192:	461c      	mov	r4, r3
 8001194:	f240 335d 	movw	r3, #861	; 0x35d
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f893 	bl	80002c4 <__aeabi_i2f>
 800119e:	4603      	mov	r3, r0
 80011a0:	4619      	mov	r1, r3
 80011a2:	4620      	mov	r0, r4
 80011a4:	f7ff f996 	bl	80004d4 <__aeabi_fdiv>
 80011a8:	4603      	mov	r3, r0
 80011aa:	461a      	mov	r2, r3
 80011ac:	4b27      	ldr	r3, [pc, #156]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x134>)
 80011ae:	605a      	str	r2, [r3, #4]
	encoder_data.encoder_speed_first_can = (uint8_t)(encoder_data.encoder_tick_a*(float)600/encoder_ratio);
 80011b0:	4b26      	ldr	r3, [pc, #152]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x134>)
 80011b2:	895b      	ldrh	r3, [r3, #10]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f884 	bl	80002c4 <__aeabi_i2f>
 80011bc:	4603      	mov	r3, r0
 80011be:	4924      	ldr	r1, [pc, #144]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff f8d3 	bl	800036c <__aeabi_fmul>
 80011c6:	4603      	mov	r3, r0
 80011c8:	461c      	mov	r4, r3
 80011ca:	f240 335d 	movw	r3, #861	; 0x35d
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff f878 	bl	80002c4 <__aeabi_i2f>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4619      	mov	r1, r3
 80011d8:	4620      	mov	r0, r4
 80011da:	f7ff f97b 	bl	80004d4 <__aeabi_fdiv>
 80011de:	4603      	mov	r3, r0
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff fa89 	bl	80006f8 <__aeabi_f2uiz>
 80011e6:	4603      	mov	r3, r0
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4b18      	ldr	r3, [pc, #96]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x134>)
 80011ec:	721a      	strb	r2, [r3, #8]
	encoder_data.encoder_speed_second_can = (uint8_t)(encoder_data.encoder_tick_c*(float)600/encoder_ratio);
 80011ee:	4b17      	ldr	r3, [pc, #92]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x134>)
 80011f0:	89db      	ldrh	r3, [r3, #14]
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff f865 	bl	80002c4 <__aeabi_i2f>
 80011fa:	4603      	mov	r3, r0
 80011fc:	4914      	ldr	r1, [pc, #80]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f8b4 	bl	800036c <__aeabi_fmul>
 8001204:	4603      	mov	r3, r0
 8001206:	461c      	mov	r4, r3
 8001208:	f240 335d 	movw	r3, #861	; 0x35d
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff f859 	bl	80002c4 <__aeabi_i2f>
 8001212:	4603      	mov	r3, r0
 8001214:	4619      	mov	r1, r3
 8001216:	4620      	mov	r0, r4
 8001218:	f7ff f95c 	bl	80004d4 <__aeabi_fdiv>
 800121c:	4603      	mov	r3, r0
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff fa6a 	bl	80006f8 <__aeabi_f2uiz>
 8001224:	4603      	mov	r3, r0
 8001226:	b2da      	uxtb	r2, r3
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x134>)
 800122a:	725a      	strb	r2, [r3, #9]
	encoder_data.encoder_tick_a = 0;
 800122c:	4b07      	ldr	r3, [pc, #28]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x134>)
 800122e:	2200      	movs	r2, #0
 8001230:	815a      	strh	r2, [r3, #10]
	encoder_data.encoder_tick_c = 0;
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001234:	2200      	movs	r2, #0
 8001236:	81da      	strh	r2, [r3, #14]
  }
//  else if (htim->Instance == TIM2) {
//    ++highFrequencyTimerTick;
//  }
  /* USER CODE END Callback 1 */
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	bd90      	pop	{r4, r7, pc}
 8001240:	40000800 	.word	0x40000800
 8001244:	40000400 	.word	0x40000400
 8001248:	200025e0 	.word	0x200025e0
 800124c:	20000054 	.word	0x20000054
 8001250:	44160000 	.word	0x44160000

08001254 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr

08001260 <control_first_wheel>:
float u_pwm_first = 0;
float u_pwm_second = 0;
float u_pwm_right = 0;
float u_pwm_left = 0;

void control_first_wheel(encoder_speed_data * enc_data, can_RX_data * can_rx_data) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
	if ((can_rx_data->first_wheel_rx_side == 1)&&(status_first == State_CCW)) {
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d10f      	bne.n	8001292 <control_first_wheel+0x32>
 8001272:	4b33      	ldr	r3, [pc, #204]	; (8001340 <control_first_wheel+0xe0>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b02      	cmp	r3, #2
 8001278:	d10b      	bne.n	8001292 <control_first_wheel+0x32>
	    rotate_first_ccw(can_rx_data->first_wheel_rx_speed, enc_data->encoder_speed_first);
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	785a      	ldrb	r2, [r3, #1]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4619      	mov	r1, r3
 8001284:	4610      	mov	r0, r2
 8001286:	f000 f93b 	bl	8001500 <rotate_first_ccw>
	    status_first = State_CCW;
 800128a:	4b2d      	ldr	r3, [pc, #180]	; (8001340 <control_first_wheel+0xe0>)
 800128c:	2202      	movs	r2, #2
 800128e:	701a      	strb	r2, [r3, #0]
 8001290:	e052      	b.n	8001338 <control_first_wheel+0xd8>
	}
	else if ((can_rx_data->first_wheel_rx_side == 0)&&(status_first == State_CCW)) {
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d117      	bne.n	80012ca <control_first_wheel+0x6a>
 800129a:	4b29      	ldr	r3, [pc, #164]	; (8001340 <control_first_wheel+0xe0>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d113      	bne.n	80012ca <control_first_wheel+0x6a>
				//while (encoder_speed != 0) {
					//while (TIM2->CCR4 > 50) {
		reduce_speed_first_ccw(enc_data->encoder_speed_first);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 fac4 	bl	8001834 <reduce_speed_first_ccw>
				//}
		if (enc_data->encoder_speed_first <= 90) {
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4924      	ldr	r1, [pc, #144]	; (8001344 <control_first_wheel+0xe4>)
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fa02 	bl	80006bc <__aeabi_fcmple>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d03c      	beq.n	8001338 <control_first_wheel+0xd8>
			stop_movement_first();
 80012be:	f000 fbdf 	bl	8001a80 <stop_movement_first>
			status_first = State_CW;
 80012c2:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <control_first_wheel+0xe0>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	701a      	strb	r2, [r3, #0]
		if (enc_data->encoder_speed_first <= 90) {
 80012c8:	e036      	b.n	8001338 <control_first_wheel+0xd8>
		}
	}
	else if ((can_rx_data->first_wheel_rx_side == 0)&&(status_first == State_CW)) {
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10f      	bne.n	80012f2 <control_first_wheel+0x92>
 80012d2:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <control_first_wheel+0xe0>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d10b      	bne.n	80012f2 <control_first_wheel+0x92>
		rotate_first_cw(can_rx_data->first_wheel_rx_speed, enc_data->encoder_speed_first);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	785a      	ldrb	r2, [r3, #1]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4619      	mov	r1, r3
 80012e4:	4610      	mov	r0, r2
 80012e6:	f000 f8a3 	bl	8001430 <rotate_first_cw>
		status_first = State_CW;
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <control_first_wheel+0xe0>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	701a      	strb	r2, [r3, #0]
 80012f0:	e022      	b.n	8001338 <control_first_wheel+0xd8>
	}
	else if ((can_rx_data->first_wheel_rx_side == 1)&&(status_first == State_CW)) {
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d117      	bne.n	800132a <control_first_wheel+0xca>
 80012fa:	4b11      	ldr	r3, [pc, #68]	; (8001340 <control_first_wheel+0xe0>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d113      	bne.n	800132a <control_first_wheel+0xca>
				//while (encoder_speed != 0) {
				//while (TIM2->CCR4 > 50) {
		reduce_speed_first_cw(enc_data->encoder_speed_first);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f000 fa32 	bl	8001770 <reduce_speed_first_cw>
				//}
		if (enc_data->encoder_speed_first <= 90) {
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	490c      	ldr	r1, [pc, #48]	; (8001344 <control_first_wheel+0xe4>)
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff f9d2 	bl	80006bc <__aeabi_fcmple>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d00c      	beq.n	8001338 <control_first_wheel+0xd8>
			stop_movement_first();
 800131e:	f000 fbaf 	bl	8001a80 <stop_movement_first>
			status_first = State_CCW;
 8001322:	4b07      	ldr	r3, [pc, #28]	; (8001340 <control_first_wheel+0xe0>)
 8001324:	2202      	movs	r2, #2
 8001326:	701a      	strb	r2, [r3, #0]
		if (enc_data->encoder_speed_first <= 90) {
 8001328:	e006      	b.n	8001338 <control_first_wheel+0xd8>
		}
	}
	else if (can_rx_data->first_wheel_rx_speed == 0) {
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	785b      	ldrb	r3, [r3, #1]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d102      	bne.n	8001338 <control_first_wheel+0xd8>
		stop_movement_first();
 8001332:	f000 fba5 	bl	8001a80 <stop_movement_first>
	}
}
 8001336:	e7ff      	b.n	8001338 <control_first_wheel+0xd8>
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000000 	.word	0x20000000
 8001344:	42b40000 	.word	0x42b40000

08001348 <control_second_wheel>:

void control_second_wheel(encoder_speed_data * enc_data, can_RX_data * can_rx_data) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
    if ((can_rx_data->second_wheel_rx_side == 1)&&(status_second == State_CCW)) {
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	789b      	ldrb	r3, [r3, #2]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d10f      	bne.n	800137a <control_second_wheel+0x32>
 800135a:	4b33      	ldr	r3, [pc, #204]	; (8001428 <control_second_wheel+0xe0>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b02      	cmp	r3, #2
 8001360:	d10b      	bne.n	800137a <control_second_wheel+0x32>
    	rotate_second_ccw(can_rx_data->second_wheel_rx_speed, enc_data->encoder_speed_second);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	78da      	ldrb	r2, [r3, #3]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	4619      	mov	r1, r3
 800136c:	4610      	mov	r0, r2
 800136e:	f000 f997 	bl	80016a0 <rotate_second_ccw>
    	status_second = State_CCW;
 8001372:	4b2d      	ldr	r3, [pc, #180]	; (8001428 <control_second_wheel+0xe0>)
 8001374:	2202      	movs	r2, #2
 8001376:	701a      	strb	r2, [r3, #0]
 8001378:	e052      	b.n	8001420 <control_second_wheel+0xd8>
	}
	else if ((can_rx_data->second_wheel_rx_side == 0)&&(status_second == State_CCW)) {
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	789b      	ldrb	r3, [r3, #2]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d117      	bne.n	80013b2 <control_second_wheel+0x6a>
 8001382:	4b29      	ldr	r3, [pc, #164]	; (8001428 <control_second_wheel+0xe0>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b02      	cmp	r3, #2
 8001388:	d113      	bne.n	80013b2 <control_second_wheel+0x6a>
			//while (encoder_speed != 0) {
				//while (TIM2->CCR4 > 50) {
		reduce_speed_second_ccw(enc_data->encoder_speed_second);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	4618      	mov	r0, r3
 8001390:	f000 fb14 	bl	80019bc <reduce_speed_second_ccw>
			//}
		if (enc_data->encoder_speed_second <= 90) {
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	4924      	ldr	r1, [pc, #144]	; (800142c <control_second_wheel+0xe4>)
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff f98e 	bl	80006bc <__aeabi_fcmple>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d03c      	beq.n	8001420 <control_second_wheel+0xd8>
			stop_movement_second();
 80013a6:	f000 fb8b 	bl	8001ac0 <stop_movement_second>
			status_second = State_CW;
 80013aa:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <control_second_wheel+0xe0>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	701a      	strb	r2, [r3, #0]
		if (enc_data->encoder_speed_second <= 90) {
 80013b0:	e036      	b.n	8001420 <control_second_wheel+0xd8>
		}
	}
	else if ((can_rx_data->second_wheel_rx_side == 0)&&(status_second == State_CW)) {
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	789b      	ldrb	r3, [r3, #2]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d10f      	bne.n	80013da <control_second_wheel+0x92>
 80013ba:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <control_second_wheel+0xe0>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d10b      	bne.n	80013da <control_second_wheel+0x92>
		rotate_second_cw(can_rx_data->second_wheel_rx_speed, enc_data->encoder_speed_second);
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	78da      	ldrb	r2, [r3, #3]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	4619      	mov	r1, r3
 80013cc:	4610      	mov	r0, r2
 80013ce:	f000 f8ff 	bl	80015d0 <rotate_second_cw>
		status_second = State_CW;
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <control_second_wheel+0xe0>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	701a      	strb	r2, [r3, #0]
 80013d8:	e022      	b.n	8001420 <control_second_wheel+0xd8>
	}
	else if ((can_rx_data->second_wheel_rx_side == 1)&&(status_second == State_CW)) {
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	789b      	ldrb	r3, [r3, #2]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d117      	bne.n	8001412 <control_second_wheel+0xca>
 80013e2:	4b11      	ldr	r3, [pc, #68]	; (8001428 <control_second_wheel+0xe0>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d113      	bne.n	8001412 <control_second_wheel+0xca>
			//while (encoder_speed != 0) {
			//while (TIM2->CCR4 > 50) {
		reduce_speed_second_cw(enc_data->encoder_speed_second);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 fa82 	bl	80018f8 <reduce_speed_second_cw>
			//}
		if (enc_data->encoder_speed_second <= 90) {
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	490c      	ldr	r1, [pc, #48]	; (800142c <control_second_wheel+0xe4>)
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff f95e 	bl	80006bc <__aeabi_fcmple>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d00c      	beq.n	8001420 <control_second_wheel+0xd8>
			stop_movement_second();
 8001406:	f000 fb5b 	bl	8001ac0 <stop_movement_second>
			status_second = State_CCW;
 800140a:	4b07      	ldr	r3, [pc, #28]	; (8001428 <control_second_wheel+0xe0>)
 800140c:	2202      	movs	r2, #2
 800140e:	701a      	strb	r2, [r3, #0]
		if (enc_data->encoder_speed_second <= 90) {
 8001410:	e006      	b.n	8001420 <control_second_wheel+0xd8>
		}
	}
	else if (can_rx_data->second_wheel_rx_speed == 0) {
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	78db      	ldrb	r3, [r3, #3]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d102      	bne.n	8001420 <control_second_wheel+0xd8>
		stop_movement_second();
 800141a:	f000 fb51 	bl	8001ac0 <stop_movement_second>
	}
}
 800141e:	e7ff      	b.n	8001420 <control_second_wheel+0xd8>
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000001 	.word	0x20000001
 800142c:	42b40000 	.word	0x42b40000

08001430 <rotate_first_cw>:

void rotate_first_cw(uint8_t target_speed, float encoder_speed) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	6039      	str	r1, [r7, #0]
 800143a:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 800143c:	2201      	movs	r2, #1
 800143e:	2108      	movs	r1, #8
 8001440:	4829      	ldr	r0, [pc, #164]	; (80014e8 <rotate_first_cw+0xb8>)
 8001442:	f002 fe79 	bl	8004138 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800144c:	4826      	ldr	r0, [pc, #152]	; (80014e8 <rotate_first_cw+0xb8>)
 800144e:	f002 fe73 	bl	8004138 <HAL_GPIO_WritePin>
	can_tx_side.first_motor_can_tx_side = 2;
 8001452:	4b26      	ldr	r3, [pc, #152]	; (80014ec <rotate_first_cw+0xbc>)
 8001454:	2202      	movs	r2, #2
 8001456:	701a      	strb	r2, [r3, #0]
	float inc = calculate_pwm_first((float)(target_speed), (float)encoder_speed);
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	4618      	mov	r0, r3
 800145c:	f7fe ff2e 	bl	80002bc <__aeabi_ui2f>
 8001460:	4603      	mov	r3, r0
 8001462:	6839      	ldr	r1, [r7, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f000 fb4b 	bl	8001b00 <calculate_pwm_first>
 800146a:	60f8      	str	r0, [r7, #12]
	u_pwm_first += inc;
 800146c:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <rotate_first_cw+0xc0>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	68f9      	ldr	r1, [r7, #12]
 8001472:	4618      	mov	r0, r3
 8001474:	f7fe fe72 	bl	800015c <__addsf3>
 8001478:	4603      	mov	r3, r0
 800147a:	461a      	mov	r2, r3
 800147c:	4b1c      	ldr	r3, [pc, #112]	; (80014f0 <rotate_first_cw+0xc0>)
 800147e:	601a      	str	r2, [r3, #0]
	if( u_pwm_first > MAX_PWM_UPPER_KEYS )
 8001480:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <rotate_first_cw+0xc0>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a1b      	ldr	r2, [pc, #108]	; (80014f4 <rotate_first_cw+0xc4>)
 8001486:	4611      	mov	r1, r2
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff f92b 	bl	80006e4 <__aeabi_fcmpgt>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d003      	beq.n	800149c <rotate_first_cw+0x6c>
		u_pwm_first = MAX_PWM_UPPER_KEYS;
 8001494:	4a17      	ldr	r2, [pc, #92]	; (80014f4 <rotate_first_cw+0xc4>)
 8001496:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <rotate_first_cw+0xc0>)
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	e00e      	b.n	80014ba <rotate_first_cw+0x8a>
	else if( u_pwm_first < MIN_PWM )
 800149c:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <rotate_first_cw+0xc0>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	4611      	mov	r1, r2
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff f8fe 	bl	80006a8 <__aeabi_fcmplt>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <rotate_first_cw+0x8a>
		u_pwm_first = MIN_PWM;
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <rotate_first_cw+0xc0>)
 80014b8:	601a      	str	r2, [r3, #0]
	dc_driver_pwm_first = u_pwm_first;
 80014ba:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <rotate_first_cw+0xc0>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff f91a 	bl	80006f8 <__aeabi_f2uiz>
 80014c4:	4603      	mov	r3, r0
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <rotate_first_cw+0xc8>)
 80014ca:	801a      	strh	r2, [r3, #0]
    TIM2 -> CCR1 = (uint16_t)dc_driver_pwm_first;
 80014cc:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <rotate_first_cw+0xc8>)
 80014ce:	881a      	ldrh	r2, [r3, #0]
 80014d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014d4:	635a      	str	r2, [r3, #52]	; 0x34
    TIM1 -> CCR3 = MAX_PWM_LOWER_KEYS;
 80014d6:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80014da:	4b08      	ldr	r3, [pc, #32]	; (80014fc <rotate_first_cw+0xcc>)
 80014dc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80014de:	bf00      	nop
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40010c00 	.word	0x40010c00
 80014ec:	20000068 	.word	0x20000068
 80014f0:	2000008c 	.word	0x2000008c
 80014f4:	45354000 	.word	0x45354000
 80014f8:	20000070 	.word	0x20000070
 80014fc:	40012c00 	.word	0x40012c00

08001500 <rotate_first_ccw>:

void rotate_first_ccw(uint8_t target_speed, float encoder_speed) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	6039      	str	r1, [r7, #0]
 800150a:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800150c:	2200      	movs	r2, #0
 800150e:	2108      	movs	r1, #8
 8001510:	4829      	ldr	r0, [pc, #164]	; (80015b8 <rotate_first_ccw+0xb8>)
 8001512:	f002 fe11 	bl	8004138 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001516:	2201      	movs	r2, #1
 8001518:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800151c:	4826      	ldr	r0, [pc, #152]	; (80015b8 <rotate_first_ccw+0xb8>)
 800151e:	f002 fe0b 	bl	8004138 <HAL_GPIO_WritePin>
    can_tx_side.first_motor_can_tx_side = 1;
 8001522:	4b26      	ldr	r3, [pc, #152]	; (80015bc <rotate_first_ccw+0xbc>)
 8001524:	2201      	movs	r2, #1
 8001526:	701a      	strb	r2, [r3, #0]
	float inc = calculate_pwm_first((float)(target_speed), (float)encoder_speed);
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	4618      	mov	r0, r3
 800152c:	f7fe fec6 	bl	80002bc <__aeabi_ui2f>
 8001530:	4603      	mov	r3, r0
 8001532:	6839      	ldr	r1, [r7, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f000 fae3 	bl	8001b00 <calculate_pwm_first>
 800153a:	60f8      	str	r0, [r7, #12]
	u_pwm_first += inc;
 800153c:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <rotate_first_ccw+0xc0>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68f9      	ldr	r1, [r7, #12]
 8001542:	4618      	mov	r0, r3
 8001544:	f7fe fe0a 	bl	800015c <__addsf3>
 8001548:	4603      	mov	r3, r0
 800154a:	461a      	mov	r2, r3
 800154c:	4b1c      	ldr	r3, [pc, #112]	; (80015c0 <rotate_first_ccw+0xc0>)
 800154e:	601a      	str	r2, [r3, #0]
	if( u_pwm_first > MAX_PWM_UPPER_KEYS )
 8001550:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <rotate_first_ccw+0xc0>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a1b      	ldr	r2, [pc, #108]	; (80015c4 <rotate_first_ccw+0xc4>)
 8001556:	4611      	mov	r1, r2
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff f8c3 	bl	80006e4 <__aeabi_fcmpgt>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <rotate_first_ccw+0x6c>
		u_pwm_first = MAX_PWM_UPPER_KEYS;
 8001564:	4a17      	ldr	r2, [pc, #92]	; (80015c4 <rotate_first_ccw+0xc4>)
 8001566:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <rotate_first_ccw+0xc0>)
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	e00e      	b.n	800158a <rotate_first_ccw+0x8a>
	else if( u_pwm_first < MIN_PWM )
 800156c:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <rotate_first_ccw+0xc0>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f04f 0200 	mov.w	r2, #0
 8001574:	4611      	mov	r1, r2
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff f896 	bl	80006a8 <__aeabi_fcmplt>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <rotate_first_ccw+0x8a>
		u_pwm_first = MIN_PWM;
 8001582:	f04f 0200 	mov.w	r2, #0
 8001586:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <rotate_first_ccw+0xc0>)
 8001588:	601a      	str	r2, [r3, #0]
	dc_driver_pwm_first = u_pwm_first;
 800158a:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <rotate_first_ccw+0xc0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff f8b2 	bl	80006f8 <__aeabi_f2uiz>
 8001594:	4603      	mov	r3, r0
 8001596:	b29a      	uxth	r2, r3
 8001598:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <rotate_first_ccw+0xc8>)
 800159a:	801a      	strh	r2, [r3, #0]
    TIM2 -> CCR1 = MAX_PWM_LOWER_KEYS;
 800159c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80015a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015a4:	635a      	str	r2, [r3, #52]	; 0x34
    TIM1 -> CCR3 = (uint16_t)dc_driver_pwm_first;
 80015a6:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <rotate_first_ccw+0xc8>)
 80015a8:	881a      	ldrh	r2, [r3, #0]
 80015aa:	4b08      	ldr	r3, [pc, #32]	; (80015cc <rotate_first_ccw+0xcc>)
 80015ac:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80015ae:	bf00      	nop
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40010c00 	.word	0x40010c00
 80015bc:	20000068 	.word	0x20000068
 80015c0:	2000008c 	.word	0x2000008c
 80015c4:	45354000 	.word	0x45354000
 80015c8:	20000070 	.word	0x20000070
 80015cc:	40012c00 	.word	0x40012c00

080015d0 <rotate_second_cw>:

void rotate_second_cw(uint8_t target_speed, float encoder_speed) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	6039      	str	r1, [r7, #0]
 80015da:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80015dc:	2201      	movs	r2, #1
 80015de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015e2:	4829      	ldr	r0, [pc, #164]	; (8001688 <rotate_second_cw+0xb8>)
 80015e4:	f002 fda8 	bl	8004138 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80015e8:	2200      	movs	r2, #0
 80015ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015ee:	4826      	ldr	r0, [pc, #152]	; (8001688 <rotate_second_cw+0xb8>)
 80015f0:	f002 fda2 	bl	8004138 <HAL_GPIO_WritePin>
    can_tx_side.second_motor_can_tx_side = 2;
 80015f4:	4b25      	ldr	r3, [pc, #148]	; (800168c <rotate_second_cw+0xbc>)
 80015f6:	2202      	movs	r2, #2
 80015f8:	705a      	strb	r2, [r3, #1]
	float inc = calculate_pwm_second((float)(target_speed), (float)encoder_speed);
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe fe5d 	bl	80002bc <__aeabi_ui2f>
 8001602:	4603      	mov	r3, r0
 8001604:	6839      	ldr	r1, [r7, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f000 fad8 	bl	8001bbc <calculate_pwm_second>
 800160c:	60f8      	str	r0, [r7, #12]
	u_pwm_second += inc;
 800160e:	4b20      	ldr	r3, [pc, #128]	; (8001690 <rotate_second_cw+0xc0>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68f9      	ldr	r1, [r7, #12]
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe fda1 	bl	800015c <__addsf3>
 800161a:	4603      	mov	r3, r0
 800161c:	461a      	mov	r2, r3
 800161e:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <rotate_second_cw+0xc0>)
 8001620:	601a      	str	r2, [r3, #0]
	if( u_pwm_second > MAX_PWM_UPPER_KEYS )
 8001622:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <rotate_second_cw+0xc0>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a1b      	ldr	r2, [pc, #108]	; (8001694 <rotate_second_cw+0xc4>)
 8001628:	4611      	mov	r1, r2
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff f85a 	bl	80006e4 <__aeabi_fcmpgt>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <rotate_second_cw+0x6e>
		u_pwm_second = MAX_PWM_UPPER_KEYS;
 8001636:	4a17      	ldr	r2, [pc, #92]	; (8001694 <rotate_second_cw+0xc4>)
 8001638:	4b15      	ldr	r3, [pc, #84]	; (8001690 <rotate_second_cw+0xc0>)
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	e00e      	b.n	800165c <rotate_second_cw+0x8c>
	else if( u_pwm_second < MIN_PWM )
 800163e:	4b14      	ldr	r3, [pc, #80]	; (8001690 <rotate_second_cw+0xc0>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	4611      	mov	r1, r2
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff f82d 	bl	80006a8 <__aeabi_fcmplt>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <rotate_second_cw+0x8c>
		u_pwm_second = MIN_PWM;
 8001654:	f04f 0200 	mov.w	r2, #0
 8001658:	4b0d      	ldr	r3, [pc, #52]	; (8001690 <rotate_second_cw+0xc0>)
 800165a:	601a      	str	r2, [r3, #0]
	dc_driver_pwm_second = u_pwm_second;
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <rotate_second_cw+0xc0>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff f849 	bl	80006f8 <__aeabi_f2uiz>
 8001666:	4603      	mov	r3, r0
 8001668:	b29a      	uxth	r2, r3
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <rotate_second_cw+0xc8>)
 800166c:	801a      	strh	r2, [r3, #0]
    TIM1 -> CCR2 = (uint16_t)dc_driver_pwm_second;
 800166e:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <rotate_second_cw+0xc8>)
 8001670:	881a      	ldrh	r2, [r3, #0]
 8001672:	4b0a      	ldr	r3, [pc, #40]	; (800169c <rotate_second_cw+0xcc>)
 8001674:	639a      	str	r2, [r3, #56]	; 0x38
    TIM1 -> CCR1 = MAX_PWM_LOWER_KEYS;
 8001676:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800167a:	4b08      	ldr	r3, [pc, #32]	; (800169c <rotate_second_cw+0xcc>)
 800167c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40010c00 	.word	0x40010c00
 800168c:	20000068 	.word	0x20000068
 8001690:	20000090 	.word	0x20000090
 8001694:	45354000 	.word	0x45354000
 8001698:	20000072 	.word	0x20000072
 800169c:	40012c00 	.word	0x40012c00

080016a0 <rotate_second_ccw>:

void rotate_second_ccw(uint8_t target_speed, float encoder_speed) {
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	6039      	str	r1, [r7, #0]
 80016aa:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80016ac:	2200      	movs	r2, #0
 80016ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016b2:	4829      	ldr	r0, [pc, #164]	; (8001758 <rotate_second_ccw+0xb8>)
 80016b4:	f002 fd40 	bl	8004138 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80016b8:	2201      	movs	r2, #1
 80016ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016be:	4826      	ldr	r0, [pc, #152]	; (8001758 <rotate_second_ccw+0xb8>)
 80016c0:	f002 fd3a 	bl	8004138 <HAL_GPIO_WritePin>
    can_tx_side.second_motor_can_tx_side = 1;
 80016c4:	4b25      	ldr	r3, [pc, #148]	; (800175c <rotate_second_ccw+0xbc>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	705a      	strb	r2, [r3, #1]
	float inc = calculate_pwm_second((float)(target_speed), (float)encoder_speed);
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7fe fdf5 	bl	80002bc <__aeabi_ui2f>
 80016d2:	4603      	mov	r3, r0
 80016d4:	6839      	ldr	r1, [r7, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 fa70 	bl	8001bbc <calculate_pwm_second>
 80016dc:	60f8      	str	r0, [r7, #12]
	u_pwm_second += inc;
 80016de:	4b20      	ldr	r3, [pc, #128]	; (8001760 <rotate_second_ccw+0xc0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68f9      	ldr	r1, [r7, #12]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe fd39 	bl	800015c <__addsf3>
 80016ea:	4603      	mov	r3, r0
 80016ec:	461a      	mov	r2, r3
 80016ee:	4b1c      	ldr	r3, [pc, #112]	; (8001760 <rotate_second_ccw+0xc0>)
 80016f0:	601a      	str	r2, [r3, #0]
	if( u_pwm_second > MAX_PWM_UPPER_KEYS )
 80016f2:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <rotate_second_ccw+0xc0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a1b      	ldr	r2, [pc, #108]	; (8001764 <rotate_second_ccw+0xc4>)
 80016f8:	4611      	mov	r1, r2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe fff2 	bl	80006e4 <__aeabi_fcmpgt>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <rotate_second_ccw+0x6e>
		u_pwm_second = MAX_PWM_UPPER_KEYS;
 8001706:	4a17      	ldr	r2, [pc, #92]	; (8001764 <rotate_second_ccw+0xc4>)
 8001708:	4b15      	ldr	r3, [pc, #84]	; (8001760 <rotate_second_ccw+0xc0>)
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	e00e      	b.n	800172c <rotate_second_ccw+0x8c>
	else if( u_pwm_second < MIN_PWM )
 800170e:	4b14      	ldr	r3, [pc, #80]	; (8001760 <rotate_second_ccw+0xc0>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	4611      	mov	r1, r2
 8001718:	4618      	mov	r0, r3
 800171a:	f7fe ffc5 	bl	80006a8 <__aeabi_fcmplt>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d003      	beq.n	800172c <rotate_second_ccw+0x8c>
		u_pwm_second = MIN_PWM;
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	4b0d      	ldr	r3, [pc, #52]	; (8001760 <rotate_second_ccw+0xc0>)
 800172a:	601a      	str	r2, [r3, #0]
	dc_driver_pwm_second = u_pwm_second;
 800172c:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <rotate_second_ccw+0xc0>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f7fe ffe1 	bl	80006f8 <__aeabi_f2uiz>
 8001736:	4603      	mov	r3, r0
 8001738:	b29a      	uxth	r2, r3
 800173a:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <rotate_second_ccw+0xc8>)
 800173c:	801a      	strh	r2, [r3, #0]
    TIM1 -> CCR2 = MAX_PWM_LOWER_KEYS;
 800173e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001742:	4b0a      	ldr	r3, [pc, #40]	; (800176c <rotate_second_ccw+0xcc>)
 8001744:	639a      	str	r2, [r3, #56]	; 0x38
    TIM1 -> CCR1 = (uint16_t)dc_driver_pwm_second;
 8001746:	4b08      	ldr	r3, [pc, #32]	; (8001768 <rotate_second_ccw+0xc8>)
 8001748:	881a      	ldrh	r2, [r3, #0]
 800174a:	4b08      	ldr	r3, [pc, #32]	; (800176c <rotate_second_ccw+0xcc>)
 800174c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800174e:	bf00      	nop
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40010c00 	.word	0x40010c00
 800175c:	20000068 	.word	0x20000068
 8001760:	20000090 	.word	0x20000090
 8001764:	45354000 	.word	0x45354000
 8001768:	20000072 	.word	0x20000072
 800176c:	40012c00 	.word	0x40012c00

08001770 <reduce_speed_first_cw>:

void reduce_speed_first_cw(float encoder_speed) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8001778:	2201      	movs	r2, #1
 800177a:	2108      	movs	r1, #8
 800177c:	4827      	ldr	r0, [pc, #156]	; (800181c <reduce_speed_first_cw+0xac>)
 800177e:	f002 fcdb 	bl	8004138 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001782:	2200      	movs	r2, #0
 8001784:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001788:	4824      	ldr	r0, [pc, #144]	; (800181c <reduce_speed_first_cw+0xac>)
 800178a:	f002 fcd5 	bl	8004138 <HAL_GPIO_WritePin>
	can_tx_side.first_motor_can_tx_side = 2;
 800178e:	4b24      	ldr	r3, [pc, #144]	; (8001820 <reduce_speed_first_cw+0xb0>)
 8001790:	2202      	movs	r2, #2
 8001792:	701a      	strb	r2, [r3, #0]
	float inc = calculate_pwm_first(0, (float)encoder_speed);
 8001794:	6879      	ldr	r1, [r7, #4]
 8001796:	f04f 0000 	mov.w	r0, #0
 800179a:	f000 f9b1 	bl	8001b00 <calculate_pwm_first>
 800179e:	60f8      	str	r0, [r7, #12]
	u_pwm_first += inc;
 80017a0:	4b20      	ldr	r3, [pc, #128]	; (8001824 <reduce_speed_first_cw+0xb4>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	68f9      	ldr	r1, [r7, #12]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe fcd8 	bl	800015c <__addsf3>
 80017ac:	4603      	mov	r3, r0
 80017ae:	461a      	mov	r2, r3
 80017b0:	4b1c      	ldr	r3, [pc, #112]	; (8001824 <reduce_speed_first_cw+0xb4>)
 80017b2:	601a      	str	r2, [r3, #0]
	if( u_pwm_first > MAX_PWM_UPPER_KEYS )
 80017b4:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <reduce_speed_first_cw+0xb4>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a1b      	ldr	r2, [pc, #108]	; (8001828 <reduce_speed_first_cw+0xb8>)
 80017ba:	4611      	mov	r1, r2
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe ff91 	bl	80006e4 <__aeabi_fcmpgt>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <reduce_speed_first_cw+0x60>
		u_pwm_first = MAX_PWM_UPPER_KEYS;
 80017c8:	4a17      	ldr	r2, [pc, #92]	; (8001828 <reduce_speed_first_cw+0xb8>)
 80017ca:	4b16      	ldr	r3, [pc, #88]	; (8001824 <reduce_speed_first_cw+0xb4>)
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	e00e      	b.n	80017ee <reduce_speed_first_cw+0x7e>
	else if( u_pwm_first < MIN_PWM )
 80017d0:	4b14      	ldr	r3, [pc, #80]	; (8001824 <reduce_speed_first_cw+0xb4>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f04f 0200 	mov.w	r2, #0
 80017d8:	4611      	mov	r1, r2
 80017da:	4618      	mov	r0, r3
 80017dc:	f7fe ff64 	bl	80006a8 <__aeabi_fcmplt>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d003      	beq.n	80017ee <reduce_speed_first_cw+0x7e>
		u_pwm_first = MIN_PWM;
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <reduce_speed_first_cw+0xb4>)
 80017ec:	601a      	str	r2, [r3, #0]
	dc_driver_pwm_first = u_pwm_first;
 80017ee:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <reduce_speed_first_cw+0xb4>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7fe ff80 	bl	80006f8 <__aeabi_f2uiz>
 80017f8:	4603      	mov	r3, r0
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	4b0b      	ldr	r3, [pc, #44]	; (800182c <reduce_speed_first_cw+0xbc>)
 80017fe:	801a      	strh	r2, [r3, #0]
    TIM2 -> CCR1 = (uint16_t)dc_driver_pwm_first;
 8001800:	4b0a      	ldr	r3, [pc, #40]	; (800182c <reduce_speed_first_cw+0xbc>)
 8001802:	881a      	ldrh	r2, [r3, #0]
 8001804:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001808:	635a      	str	r2, [r3, #52]	; 0x34
    TIM1 -> CCR3 = MAX_PWM_LOWER_KEYS;
 800180a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800180e:	4b08      	ldr	r3, [pc, #32]	; (8001830 <reduce_speed_first_cw+0xc0>)
 8001810:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001812:	bf00      	nop
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40010c00 	.word	0x40010c00
 8001820:	20000068 	.word	0x20000068
 8001824:	2000008c 	.word	0x2000008c
 8001828:	45354000 	.word	0x45354000
 800182c:	20000070 	.word	0x20000070
 8001830:	40012c00 	.word	0x40012c00

08001834 <reduce_speed_first_ccw>:

void reduce_speed_first_ccw(float encoder_speed) {
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800183c:	2200      	movs	r2, #0
 800183e:	2108      	movs	r1, #8
 8001840:	4827      	ldr	r0, [pc, #156]	; (80018e0 <reduce_speed_first_ccw+0xac>)
 8001842:	f002 fc79 	bl	8004138 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001846:	2201      	movs	r2, #1
 8001848:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800184c:	4824      	ldr	r0, [pc, #144]	; (80018e0 <reduce_speed_first_ccw+0xac>)
 800184e:	f002 fc73 	bl	8004138 <HAL_GPIO_WritePin>
    can_tx_side.first_motor_can_tx_side = 1;
 8001852:	4b24      	ldr	r3, [pc, #144]	; (80018e4 <reduce_speed_first_ccw+0xb0>)
 8001854:	2201      	movs	r2, #1
 8001856:	701a      	strb	r2, [r3, #0]
	float inc = calculate_pwm_first(0, (float)encoder_speed);
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	f04f 0000 	mov.w	r0, #0
 800185e:	f000 f94f 	bl	8001b00 <calculate_pwm_first>
 8001862:	60f8      	str	r0, [r7, #12]
	u_pwm_first += inc;
 8001864:	4b20      	ldr	r3, [pc, #128]	; (80018e8 <reduce_speed_first_ccw+0xb4>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	68f9      	ldr	r1, [r7, #12]
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fc76 	bl	800015c <__addsf3>
 8001870:	4603      	mov	r3, r0
 8001872:	461a      	mov	r2, r3
 8001874:	4b1c      	ldr	r3, [pc, #112]	; (80018e8 <reduce_speed_first_ccw+0xb4>)
 8001876:	601a      	str	r2, [r3, #0]
	if( u_pwm_first > MAX_PWM_UPPER_KEYS )
 8001878:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <reduce_speed_first_ccw+0xb4>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a1b      	ldr	r2, [pc, #108]	; (80018ec <reduce_speed_first_ccw+0xb8>)
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f7fe ff2f 	bl	80006e4 <__aeabi_fcmpgt>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <reduce_speed_first_ccw+0x60>
		u_pwm_first = MAX_PWM_UPPER_KEYS;
 800188c:	4a17      	ldr	r2, [pc, #92]	; (80018ec <reduce_speed_first_ccw+0xb8>)
 800188e:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <reduce_speed_first_ccw+0xb4>)
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	e00e      	b.n	80018b2 <reduce_speed_first_ccw+0x7e>
	else if( u_pwm_first < MIN_PWM )
 8001894:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <reduce_speed_first_ccw+0xb4>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	4611      	mov	r1, r2
 800189e:	4618      	mov	r0, r3
 80018a0:	f7fe ff02 	bl	80006a8 <__aeabi_fcmplt>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <reduce_speed_first_ccw+0x7e>
		u_pwm_first = MIN_PWM;
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <reduce_speed_first_ccw+0xb4>)
 80018b0:	601a      	str	r2, [r3, #0]
	dc_driver_pwm_first = u_pwm_first;
 80018b2:	4b0d      	ldr	r3, [pc, #52]	; (80018e8 <reduce_speed_first_ccw+0xb4>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe ff1e 	bl	80006f8 <__aeabi_f2uiz>
 80018bc:	4603      	mov	r3, r0
 80018be:	b29a      	uxth	r2, r3
 80018c0:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <reduce_speed_first_ccw+0xbc>)
 80018c2:	801a      	strh	r2, [r3, #0]
    TIM2 -> CCR1 = MAX_PWM_LOWER_KEYS;
 80018c4:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80018c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018cc:	635a      	str	r2, [r3, #52]	; 0x34
    TIM1 -> CCR3 = (uint16_t)dc_driver_pwm_first;
 80018ce:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <reduce_speed_first_ccw+0xbc>)
 80018d0:	881a      	ldrh	r2, [r3, #0]
 80018d2:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <reduce_speed_first_ccw+0xc0>)
 80018d4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40010c00 	.word	0x40010c00
 80018e4:	20000068 	.word	0x20000068
 80018e8:	2000008c 	.word	0x2000008c
 80018ec:	45354000 	.word	0x45354000
 80018f0:	20000070 	.word	0x20000070
 80018f4:	40012c00 	.word	0x40012c00

080018f8 <reduce_speed_second_cw>:

void reduce_speed_second_cw(float encoder_speed) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001900:	2201      	movs	r2, #1
 8001902:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001906:	4827      	ldr	r0, [pc, #156]	; (80019a4 <reduce_speed_second_cw+0xac>)
 8001908:	f002 fc16 	bl	8004138 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800190c:	2200      	movs	r2, #0
 800190e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001912:	4824      	ldr	r0, [pc, #144]	; (80019a4 <reduce_speed_second_cw+0xac>)
 8001914:	f002 fc10 	bl	8004138 <HAL_GPIO_WritePin>
    can_tx_side.second_motor_can_tx_side = 2;
 8001918:	4b23      	ldr	r3, [pc, #140]	; (80019a8 <reduce_speed_second_cw+0xb0>)
 800191a:	2202      	movs	r2, #2
 800191c:	705a      	strb	r2, [r3, #1]
	float inc = calculate_pwm_second(0, (float)encoder_speed);
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	f04f 0000 	mov.w	r0, #0
 8001924:	f000 f94a 	bl	8001bbc <calculate_pwm_second>
 8001928:	60f8      	str	r0, [r7, #12]
	u_pwm_second += inc;
 800192a:	4b20      	ldr	r3, [pc, #128]	; (80019ac <reduce_speed_second_cw+0xb4>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68f9      	ldr	r1, [r7, #12]
 8001930:	4618      	mov	r0, r3
 8001932:	f7fe fc13 	bl	800015c <__addsf3>
 8001936:	4603      	mov	r3, r0
 8001938:	461a      	mov	r2, r3
 800193a:	4b1c      	ldr	r3, [pc, #112]	; (80019ac <reduce_speed_second_cw+0xb4>)
 800193c:	601a      	str	r2, [r3, #0]
	if( u_pwm_second > MAX_PWM_UPPER_KEYS )
 800193e:	4b1b      	ldr	r3, [pc, #108]	; (80019ac <reduce_speed_second_cw+0xb4>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a1b      	ldr	r2, [pc, #108]	; (80019b0 <reduce_speed_second_cw+0xb8>)
 8001944:	4611      	mov	r1, r2
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe fecc 	bl	80006e4 <__aeabi_fcmpgt>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <reduce_speed_second_cw+0x62>
		u_pwm_second = MAX_PWM_UPPER_KEYS;
 8001952:	4a17      	ldr	r2, [pc, #92]	; (80019b0 <reduce_speed_second_cw+0xb8>)
 8001954:	4b15      	ldr	r3, [pc, #84]	; (80019ac <reduce_speed_second_cw+0xb4>)
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	e00e      	b.n	8001978 <reduce_speed_second_cw+0x80>
	else if( u_pwm_second < MIN_PWM )
 800195a:	4b14      	ldr	r3, [pc, #80]	; (80019ac <reduce_speed_second_cw+0xb4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	4611      	mov	r1, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f7fe fe9f 	bl	80006a8 <__aeabi_fcmplt>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d003      	beq.n	8001978 <reduce_speed_second_cw+0x80>
		u_pwm_second = MIN_PWM;
 8001970:	f04f 0200 	mov.w	r2, #0
 8001974:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <reduce_speed_second_cw+0xb4>)
 8001976:	601a      	str	r2, [r3, #0]
	dc_driver_pwm_second = u_pwm_second;
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <reduce_speed_second_cw+0xb4>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe febb 	bl	80006f8 <__aeabi_f2uiz>
 8001982:	4603      	mov	r3, r0
 8001984:	b29a      	uxth	r2, r3
 8001986:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <reduce_speed_second_cw+0xbc>)
 8001988:	801a      	strh	r2, [r3, #0]
    TIM1 -> CCR2 = (uint16_t)dc_driver_pwm_second;
 800198a:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <reduce_speed_second_cw+0xbc>)
 800198c:	881a      	ldrh	r2, [r3, #0]
 800198e:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <reduce_speed_second_cw+0xc0>)
 8001990:	639a      	str	r2, [r3, #56]	; 0x38
    TIM1 -> CCR1 = MAX_PWM_LOWER_KEYS;
 8001992:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001996:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <reduce_speed_second_cw+0xc0>)
 8001998:	635a      	str	r2, [r3, #52]	; 0x34
}
 800199a:	bf00      	nop
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40010c00 	.word	0x40010c00
 80019a8:	20000068 	.word	0x20000068
 80019ac:	20000090 	.word	0x20000090
 80019b0:	45354000 	.word	0x45354000
 80019b4:	20000072 	.word	0x20000072
 80019b8:	40012c00 	.word	0x40012c00

080019bc <reduce_speed_second_ccw>:

void reduce_speed_second_ccw(float encoder_speed) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80019c4:	2200      	movs	r2, #0
 80019c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019ca:	4827      	ldr	r0, [pc, #156]	; (8001a68 <reduce_speed_second_ccw+0xac>)
 80019cc:	f002 fbb4 	bl	8004138 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80019d0:	2201      	movs	r2, #1
 80019d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019d6:	4824      	ldr	r0, [pc, #144]	; (8001a68 <reduce_speed_second_ccw+0xac>)
 80019d8:	f002 fbae 	bl	8004138 <HAL_GPIO_WritePin>
    can_tx_side.second_motor_can_tx_side = 1;
 80019dc:	4b23      	ldr	r3, [pc, #140]	; (8001a6c <reduce_speed_second_ccw+0xb0>)
 80019de:	2201      	movs	r2, #1
 80019e0:	705a      	strb	r2, [r3, #1]
	float inc = calculate_pwm_second(0, (float)encoder_speed);
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	f04f 0000 	mov.w	r0, #0
 80019e8:	f000 f8e8 	bl	8001bbc <calculate_pwm_second>
 80019ec:	60f8      	str	r0, [r7, #12]
	u_pwm_second += inc;
 80019ee:	4b20      	ldr	r3, [pc, #128]	; (8001a70 <reduce_speed_second_ccw+0xb4>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68f9      	ldr	r1, [r7, #12]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe fbb1 	bl	800015c <__addsf3>
 80019fa:	4603      	mov	r3, r0
 80019fc:	461a      	mov	r2, r3
 80019fe:	4b1c      	ldr	r3, [pc, #112]	; (8001a70 <reduce_speed_second_ccw+0xb4>)
 8001a00:	601a      	str	r2, [r3, #0]
	if( u_pwm_second > MAX_PWM_UPPER_KEYS )
 8001a02:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <reduce_speed_second_ccw+0xb4>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a1b      	ldr	r2, [pc, #108]	; (8001a74 <reduce_speed_second_ccw+0xb8>)
 8001a08:	4611      	mov	r1, r2
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7fe fe6a 	bl	80006e4 <__aeabi_fcmpgt>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <reduce_speed_second_ccw+0x62>
		u_pwm_second = MAX_PWM_UPPER_KEYS;
 8001a16:	4a17      	ldr	r2, [pc, #92]	; (8001a74 <reduce_speed_second_ccw+0xb8>)
 8001a18:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <reduce_speed_second_ccw+0xb4>)
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	e00e      	b.n	8001a3c <reduce_speed_second_ccw+0x80>
	else if( u_pwm_second < MIN_PWM )
 8001a1e:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <reduce_speed_second_ccw+0xb4>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f04f 0200 	mov.w	r2, #0
 8001a26:	4611      	mov	r1, r2
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe fe3d 	bl	80006a8 <__aeabi_fcmplt>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <reduce_speed_second_ccw+0x80>
		u_pwm_second = MIN_PWM;
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <reduce_speed_second_ccw+0xb4>)
 8001a3a:	601a      	str	r2, [r3, #0]
	dc_driver_pwm_second = u_pwm_second;
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <reduce_speed_second_ccw+0xb4>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe fe59 	bl	80006f8 <__aeabi_f2uiz>
 8001a46:	4603      	mov	r3, r0
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <reduce_speed_second_ccw+0xbc>)
 8001a4c:	801a      	strh	r2, [r3, #0]
    TIM1 -> CCR2 = MAX_PWM_LOWER_KEYS;
 8001a4e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <reduce_speed_second_ccw+0xc0>)
 8001a54:	639a      	str	r2, [r3, #56]	; 0x38
    TIM1 -> CCR1 = (uint16_t)dc_driver_pwm_second;
 8001a56:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <reduce_speed_second_ccw+0xbc>)
 8001a58:	881a      	ldrh	r2, [r3, #0]
 8001a5a:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <reduce_speed_second_ccw+0xc0>)
 8001a5c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001a5e:	bf00      	nop
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40010c00 	.word	0x40010c00
 8001a6c:	20000068 	.word	0x20000068
 8001a70:	20000090 	.word	0x20000090
 8001a74:	45354000 	.word	0x45354000
 8001a78:	20000072 	.word	0x20000072
 8001a7c:	40012c00 	.word	0x40012c00

08001a80 <stop_movement_first>:

void stop_movement_first(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001a84:	2200      	movs	r2, #0
 8001a86:	2108      	movs	r1, #8
 8001a88:	480a      	ldr	r0, [pc, #40]	; (8001ab4 <stop_movement_first+0x34>)
 8001a8a:	f002 fb55 	bl	8004138 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a94:	4807      	ldr	r0, [pc, #28]	; (8001ab4 <stop_movement_first+0x34>)
 8001a96:	f002 fb4f 	bl	8004138 <HAL_GPIO_WritePin>
    TIM2 -> CCR1 = 0;
 8001a9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	635a      	str	r2, [r3, #52]	; 0x34
    TIM1 -> CCR3 = 0;
 8001aa2:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <stop_movement_first+0x38>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	63da      	str	r2, [r3, #60]	; 0x3c
	u_pwm_first = 0;
 8001aa8:	4b04      	ldr	r3, [pc, #16]	; (8001abc <stop_movement_first+0x3c>)
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40010c00 	.word	0x40010c00
 8001ab8:	40012c00 	.word	0x40012c00
 8001abc:	2000008c 	.word	0x2000008c

08001ac0 <stop_movement_second>:

void stop_movement_second(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aca:	480a      	ldr	r0, [pc, #40]	; (8001af4 <stop_movement_second+0x34>)
 8001acc:	f002 fb34 	bl	8004138 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ad6:	4807      	ldr	r0, [pc, #28]	; (8001af4 <stop_movement_second+0x34>)
 8001ad8:	f002 fb2e 	bl	8004138 <HAL_GPIO_WritePin>
    TIM1 -> CCR2 = 0;
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <stop_movement_second+0x38>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	639a      	str	r2, [r3, #56]	; 0x38
    TIM1 -> CCR1 = 0;
 8001ae2:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <stop_movement_second+0x38>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	635a      	str	r2, [r3, #52]	; 0x34
	u_pwm_second = 0;
 8001ae8:	4b04      	ldr	r3, [pc, #16]	; (8001afc <stop_movement_second+0x3c>)
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
}
 8001af0:	bf00      	nop
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40010c00 	.word	0x40010c00
 8001af8:	40012c00 	.word	0x40012c00
 8001afc:	20000090 	.word	0x20000090

08001b00 <calculate_pwm_first>:
//        output = _min;
//    _pre_error = error;
//    return output;
//}

float calculate_pwm_first( float target_speed, float current_speed) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b088      	sub	sp, #32
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
	float error = target_speed - current_speed;
 8001b0a:	6839      	ldr	r1, [r7, #0]
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7fe fb23 	bl	8000158 <__aeabi_fsub>
 8001b12:	4603      	mov	r3, r0
 8001b14:	61bb      	str	r3, [r7, #24]
	float Pout = _Kp * error;
 8001b16:	4b23      	ldr	r3, [pc, #140]	; (8001ba4 <calculate_pwm_first+0xa4>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	69b8      	ldr	r0, [r7, #24]
 8001b1e:	f7fe fc25 	bl	800036c <__aeabi_fmul>
 8001b22:	4603      	mov	r3, r0
 8001b24:	617b      	str	r3, [r7, #20]
	float derivative = (error - _pre_error_first) / _dt;
 8001b26:	4b20      	ldr	r3, [pc, #128]	; (8001ba8 <calculate_pwm_first+0xa8>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	69b8      	ldr	r0, [r7, #24]
 8001b2e:	f7fe fb13 	bl	8000158 <__aeabi_fsub>
 8001b32:	4603      	mov	r3, r0
 8001b34:	461a      	mov	r2, r3
 8001b36:	4b1d      	ldr	r3, [pc, #116]	; (8001bac <calculate_pwm_first+0xac>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	f7fe fcc9 	bl	80004d4 <__aeabi_fdiv>
 8001b42:	4603      	mov	r3, r0
 8001b44:	613b      	str	r3, [r7, #16]
	float Dout = _Kd * derivative;
 8001b46:	4b1a      	ldr	r3, [pc, #104]	; (8001bb0 <calculate_pwm_first+0xb0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	6938      	ldr	r0, [r7, #16]
 8001b4e:	f7fe fc0d 	bl	800036c <__aeabi_fmul>
 8001b52:	4603      	mov	r3, r0
 8001b54:	60fb      	str	r3, [r7, #12]
	float output = Pout + Dout;
 8001b56:	68f9      	ldr	r1, [r7, #12]
 8001b58:	6978      	ldr	r0, [r7, #20]
 8001b5a:	f7fe faff 	bl	800015c <__addsf3>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	61fb      	str	r3, [r7, #28]
    if( output > _max )
 8001b62:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <calculate_pwm_first+0xb4>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4619      	mov	r1, r3
 8001b68:	69f8      	ldr	r0, [r7, #28]
 8001b6a:	f7fe fdbb 	bl	80006e4 <__aeabi_fcmpgt>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <calculate_pwm_first+0x7c>
        output = _max;
 8001b74:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <calculate_pwm_first+0xb4>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	61fb      	str	r3, [r7, #28]
 8001b7a:	e00b      	b.n	8001b94 <calculate_pwm_first+0x94>
    else if( output < _min )
 8001b7c:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <calculate_pwm_first+0xb8>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4619      	mov	r1, r3
 8001b82:	69f8      	ldr	r0, [r7, #28]
 8001b84:	f7fe fd90 	bl	80006a8 <__aeabi_fcmplt>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d002      	beq.n	8001b94 <calculate_pwm_first+0x94>
        output = _min;
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <calculate_pwm_first+0xb8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	61fb      	str	r3, [r7, #28]
    _pre_error_first = error;
 8001b94:	4a04      	ldr	r2, [pc, #16]	; (8001ba8 <calculate_pwm_first+0xa8>)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	6013      	str	r3, [r2, #0]
    return output;
 8001b9a:	69fb      	ldr	r3, [r7, #28]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3720      	adds	r7, #32
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000010 	.word	0x20000010
 8001ba8:	20000094 	.word	0x20000094
 8001bac:	20000004 	.word	0x20000004
 8001bb0:	20000014 	.word	0x20000014
 8001bb4:	20000008 	.word	0x20000008
 8001bb8:	2000000c 	.word	0x2000000c

08001bbc <calculate_pwm_second>:

float calculate_pwm_second( float target_speed, float current_speed) {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b088      	sub	sp, #32
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
	float error = target_speed - current_speed;
 8001bc6:	6839      	ldr	r1, [r7, #0]
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7fe fac5 	bl	8000158 <__aeabi_fsub>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	61bb      	str	r3, [r7, #24]
	float Pout = _Kp * error;
 8001bd2:	4b23      	ldr	r3, [pc, #140]	; (8001c60 <calculate_pwm_second+0xa4>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	69b8      	ldr	r0, [r7, #24]
 8001bda:	f7fe fbc7 	bl	800036c <__aeabi_fmul>
 8001bde:	4603      	mov	r3, r0
 8001be0:	617b      	str	r3, [r7, #20]
	float derivative = (error - _pre_error_second) / _dt;
 8001be2:	4b20      	ldr	r3, [pc, #128]	; (8001c64 <calculate_pwm_second+0xa8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4619      	mov	r1, r3
 8001be8:	69b8      	ldr	r0, [r7, #24]
 8001bea:	f7fe fab5 	bl	8000158 <__aeabi_fsub>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <calculate_pwm_second+0xac>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4610      	mov	r0, r2
 8001bfa:	f7fe fc6b 	bl	80004d4 <__aeabi_fdiv>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	613b      	str	r3, [r7, #16]
	float Dout = _Kd * derivative;
 8001c02:	4b1a      	ldr	r3, [pc, #104]	; (8001c6c <calculate_pwm_second+0xb0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4619      	mov	r1, r3
 8001c08:	6938      	ldr	r0, [r7, #16]
 8001c0a:	f7fe fbaf 	bl	800036c <__aeabi_fmul>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	60fb      	str	r3, [r7, #12]
	float output = Pout + Dout;
 8001c12:	68f9      	ldr	r1, [r7, #12]
 8001c14:	6978      	ldr	r0, [r7, #20]
 8001c16:	f7fe faa1 	bl	800015c <__addsf3>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	61fb      	str	r3, [r7, #28]
    if( output > _max )
 8001c1e:	4b14      	ldr	r3, [pc, #80]	; (8001c70 <calculate_pwm_second+0xb4>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4619      	mov	r1, r3
 8001c24:	69f8      	ldr	r0, [r7, #28]
 8001c26:	f7fe fd5d 	bl	80006e4 <__aeabi_fcmpgt>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <calculate_pwm_second+0x7c>
        output = _max;
 8001c30:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <calculate_pwm_second+0xb4>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	61fb      	str	r3, [r7, #28]
 8001c36:	e00b      	b.n	8001c50 <calculate_pwm_second+0x94>
    else if( output < _min )
 8001c38:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <calculate_pwm_second+0xb8>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	69f8      	ldr	r0, [r7, #28]
 8001c40:	f7fe fd32 	bl	80006a8 <__aeabi_fcmplt>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d002      	beq.n	8001c50 <calculate_pwm_second+0x94>
        output = _min;
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <calculate_pwm_second+0xb8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	61fb      	str	r3, [r7, #28]
    _pre_error_second = error;
 8001c50:	4a04      	ldr	r2, [pc, #16]	; (8001c64 <calculate_pwm_second+0xa8>)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	6013      	str	r3, [r2, #0]
    return output;
 8001c56:	69fb      	ldr	r3, [r7, #28]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3720      	adds	r7, #32
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000010 	.word	0x20000010
 8001c64:	20000098 	.word	0x20000098
 8001c68:	20000004 	.word	0x20000004
 8001c6c:	20000014 	.word	0x20000014
 8001c70:	20000008 	.word	0x20000008
 8001c74:	2000000c 	.word	0x2000000c

08001c78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c7e:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <HAL_MspInit+0x5c>)
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	4a14      	ldr	r2, [pc, #80]	; (8001cd4 <HAL_MspInit+0x5c>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6193      	str	r3, [r2, #24]
 8001c8a:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <HAL_MspInit+0x5c>)
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c96:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <HAL_MspInit+0x5c>)
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	4a0e      	ldr	r2, [pc, #56]	; (8001cd4 <HAL_MspInit+0x5c>)
 8001c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	61d3      	str	r3, [r2, #28]
 8001ca2:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <HAL_MspInit+0x5c>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001caa:	607b      	str	r3, [r7, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <HAL_MspInit+0x60>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	4a04      	ldr	r2, [pc, #16]	; (8001cd8 <HAL_MspInit+0x60>)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40010000 	.word	0x40010000

08001cdc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08a      	sub	sp, #40	; 0x28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 0318 	add.w	r3, r7, #24
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a33      	ldr	r2, [pc, #204]	; (8001dc4 <HAL_ADC_MspInit+0xe8>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d15f      	bne.n	8001dbc <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cfc:	4b32      	ldr	r3, [pc, #200]	; (8001dc8 <HAL_ADC_MspInit+0xec>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	4a31      	ldr	r2, [pc, #196]	; (8001dc8 <HAL_ADC_MspInit+0xec>)
 8001d02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d06:	6193      	str	r3, [r2, #24]
 8001d08:	4b2f      	ldr	r3, [pc, #188]	; (8001dc8 <HAL_ADC_MspInit+0xec>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d14:	4b2c      	ldr	r3, [pc, #176]	; (8001dc8 <HAL_ADC_MspInit+0xec>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	4a2b      	ldr	r2, [pc, #172]	; (8001dc8 <HAL_ADC_MspInit+0xec>)
 8001d1a:	f043 0304 	orr.w	r3, r3, #4
 8001d1e:	6193      	str	r3, [r2, #24]
 8001d20:	4b29      	ldr	r3, [pc, #164]	; (8001dc8 <HAL_ADC_MspInit+0xec>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2c:	4b26      	ldr	r3, [pc, #152]	; (8001dc8 <HAL_ADC_MspInit+0xec>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	4a25      	ldr	r2, [pc, #148]	; (8001dc8 <HAL_ADC_MspInit+0xec>)
 8001d32:	f043 0308 	orr.w	r3, r3, #8
 8001d36:	6193      	str	r3, [r2, #24]
 8001d38:	4b23      	ldr	r3, [pc, #140]	; (8001dc8 <HAL_ADC_MspInit+0xec>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	f003 0308 	and.w	r3, r3, #8
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA5     ------> ADC1_IN5
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8001d44:	2322      	movs	r3, #34	; 0x22
 8001d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4c:	f107 0318 	add.w	r3, r7, #24
 8001d50:	4619      	mov	r1, r3
 8001d52:	481e      	ldr	r0, [pc, #120]	; (8001dcc <HAL_ADC_MspInit+0xf0>)
 8001d54:	f002 f896 	bl	8003e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d60:	f107 0318 	add.w	r3, r7, #24
 8001d64:	4619      	mov	r1, r3
 8001d66:	481a      	ldr	r0, [pc, #104]	; (8001dd0 <HAL_ADC_MspInit+0xf4>)
 8001d68:	f002 f88c 	bl	8003e84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001d6c:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <HAL_ADC_MspInit+0xf8>)
 8001d6e:	4a1a      	ldr	r2, [pc, #104]	; (8001dd8 <HAL_ADC_MspInit+0xfc>)
 8001d70:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d72:	4b18      	ldr	r3, [pc, #96]	; (8001dd4 <HAL_ADC_MspInit+0xf8>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d78:	4b16      	ldr	r3, [pc, #88]	; (8001dd4 <HAL_ADC_MspInit+0xf8>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d7e:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <HAL_ADC_MspInit+0xf8>)
 8001d80:	2280      	movs	r2, #128	; 0x80
 8001d82:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d84:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <HAL_ADC_MspInit+0xf8>)
 8001d86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d8a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d8c:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <HAL_ADC_MspInit+0xf8>)
 8001d8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d92:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d94:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <HAL_ADC_MspInit+0xf8>)
 8001d96:	2220      	movs	r2, #32
 8001d98:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d9a:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <HAL_ADC_MspInit+0xf8>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001da0:	480c      	ldr	r0, [pc, #48]	; (8001dd4 <HAL_ADC_MspInit+0xf8>)
 8001da2:	f001 fe47 	bl	8003a34 <HAL_DMA_Init>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8001dac:	f7ff fa52 	bl	8001254 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a08      	ldr	r2, [pc, #32]	; (8001dd4 <HAL_ADC_MspInit+0xf8>)
 8001db4:	621a      	str	r2, [r3, #32]
 8001db6:	4a07      	ldr	r2, [pc, #28]	; (8001dd4 <HAL_ADC_MspInit+0xf8>)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001dbc:	bf00      	nop
 8001dbe:	3728      	adds	r7, #40	; 0x28
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40012400 	.word	0x40012400
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40010800 	.word	0x40010800
 8001dd0:	40010c00 	.word	0x40010c00
 8001dd4:	20002688 	.word	0x20002688
 8001dd8:	40020008 	.word	0x40020008

08001ddc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b088      	sub	sp, #32
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 0310 	add.w	r3, r7, #16
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a20      	ldr	r2, [pc, #128]	; (8001e78 <HAL_CAN_MspInit+0x9c>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d139      	bne.n	8001e70 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001dfc:	4b1f      	ldr	r3, [pc, #124]	; (8001e7c <HAL_CAN_MspInit+0xa0>)
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	4a1e      	ldr	r2, [pc, #120]	; (8001e7c <HAL_CAN_MspInit+0xa0>)
 8001e02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e06:	61d3      	str	r3, [r2, #28]
 8001e08:	4b1c      	ldr	r3, [pc, #112]	; (8001e7c <HAL_CAN_MspInit+0xa0>)
 8001e0a:	69db      	ldr	r3, [r3, #28]
 8001e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e14:	4b19      	ldr	r3, [pc, #100]	; (8001e7c <HAL_CAN_MspInit+0xa0>)
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	4a18      	ldr	r2, [pc, #96]	; (8001e7c <HAL_CAN_MspInit+0xa0>)
 8001e1a:	f043 0304 	orr.w	r3, r3, #4
 8001e1e:	6193      	str	r3, [r2, #24]
 8001e20:	4b16      	ldr	r3, [pc, #88]	; (8001e7c <HAL_CAN_MspInit+0xa0>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001e2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3a:	f107 0310 	add.w	r3, r7, #16
 8001e3e:	4619      	mov	r1, r3
 8001e40:	480f      	ldr	r0, [pc, #60]	; (8001e80 <HAL_CAN_MspInit+0xa4>)
 8001e42:	f002 f81f 	bl	8003e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001e46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e50:	2303      	movs	r3, #3
 8001e52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e54:	f107 0310 	add.w	r3, r7, #16
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4809      	ldr	r0, [pc, #36]	; (8001e80 <HAL_CAN_MspInit+0xa4>)
 8001e5c:	f002 f812 	bl	8003e84 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 1, 0);
 8001e60:	2200      	movs	r2, #0
 8001e62:	2101      	movs	r1, #1
 8001e64:	2014      	movs	r0, #20
 8001e66:	f001 fdba 	bl	80039de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001e6a:	2014      	movs	r0, #20
 8001e6c:	f001 fdd3 	bl	8003a16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001e70:	bf00      	nop
 8001e72:	3720      	adds	r7, #32
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40006400 	.word	0x40006400
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40010800 	.word	0x40010800

08001e84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a1f      	ldr	r2, [pc, #124]	; (8001f10 <HAL_TIM_Base_MspInit+0x8c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d10c      	bne.n	8001eb0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e96:	4b1f      	ldr	r3, [pc, #124]	; (8001f14 <HAL_TIM_Base_MspInit+0x90>)
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	4a1e      	ldr	r2, [pc, #120]	; (8001f14 <HAL_TIM_Base_MspInit+0x90>)
 8001e9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ea0:	6193      	str	r3, [r2, #24]
 8001ea2:	4b1c      	ldr	r3, [pc, #112]	; (8001f14 <HAL_TIM_Base_MspInit+0x90>)
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001eae:	e02a      	b.n	8001f06 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eb8:	d10c      	bne.n	8001ed4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eba:	4b16      	ldr	r3, [pc, #88]	; (8001f14 <HAL_TIM_Base_MspInit+0x90>)
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	4a15      	ldr	r2, [pc, #84]	; (8001f14 <HAL_TIM_Base_MspInit+0x90>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	61d3      	str	r3, [r2, #28]
 8001ec6:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <HAL_TIM_Base_MspInit+0x90>)
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	693b      	ldr	r3, [r7, #16]
}
 8001ed2:	e018      	b.n	8001f06 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a0f      	ldr	r2, [pc, #60]	; (8001f18 <HAL_TIM_Base_MspInit+0x94>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d113      	bne.n	8001f06 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ede:	4b0d      	ldr	r3, [pc, #52]	; (8001f14 <HAL_TIM_Base_MspInit+0x90>)
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	4a0c      	ldr	r2, [pc, #48]	; (8001f14 <HAL_TIM_Base_MspInit+0x90>)
 8001ee4:	f043 0302 	orr.w	r3, r3, #2
 8001ee8:	61d3      	str	r3, [r2, #28]
 8001eea:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <HAL_TIM_Base_MspInit+0x90>)
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2100      	movs	r1, #0
 8001efa:	201d      	movs	r0, #29
 8001efc:	f001 fd6f 	bl	80039de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f00:	201d      	movs	r0, #29
 8001f02:	f001 fd88 	bl	8003a16 <HAL_NVIC_EnableIRQ>
}
 8001f06:	bf00      	nop
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40012c00 	.word	0x40012c00
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40000400 	.word	0x40000400

08001f1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08a      	sub	sp, #40	; 0x28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a28      	ldr	r2, [pc, #160]	; (8001fd8 <HAL_TIM_MspPostInit+0xbc>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d119      	bne.n	8001f70 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3c:	4b27      	ldr	r3, [pc, #156]	; (8001fdc <HAL_TIM_MspPostInit+0xc0>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	4a26      	ldr	r2, [pc, #152]	; (8001fdc <HAL_TIM_MspPostInit+0xc0>)
 8001f42:	f043 0304 	orr.w	r3, r3, #4
 8001f46:	6193      	str	r3, [r2, #24]
 8001f48:	4b24      	ldr	r3, [pc, #144]	; (8001fdc <HAL_TIM_MspPostInit+0xc0>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001f54:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f62:	f107 0314 	add.w	r3, r7, #20
 8001f66:	4619      	mov	r1, r3
 8001f68:	481d      	ldr	r0, [pc, #116]	; (8001fe0 <HAL_TIM_MspPostInit+0xc4>)
 8001f6a:	f001 ff8b 	bl	8003e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f6e:	e02f      	b.n	8001fd0 <HAL_TIM_MspPostInit+0xb4>
  else if(htim->Instance==TIM2)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f78:	d12a      	bne.n	8001fd0 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7a:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <HAL_TIM_MspPostInit+0xc0>)
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	4a17      	ldr	r2, [pc, #92]	; (8001fdc <HAL_TIM_MspPostInit+0xc0>)
 8001f80:	f043 0304 	orr.w	r3, r3, #4
 8001f84:	6193      	str	r3, [r2, #24]
 8001f86:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <HAL_TIM_MspPostInit+0xc0>)
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa0:	f107 0314 	add.w	r3, r7, #20
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	480e      	ldr	r0, [pc, #56]	; (8001fe0 <HAL_TIM_MspPostInit+0xc4>)
 8001fa8:	f001 ff6c 	bl	8003e84 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001fac:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <HAL_TIM_MspPostInit+0xc8>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8001fca:	4a06      	ldr	r2, [pc, #24]	; (8001fe4 <HAL_TIM_MspPostInit+0xc8>)
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	6053      	str	r3, [r2, #4]
}
 8001fd0:	bf00      	nop
 8001fd2:	3728      	adds	r7, #40	; 0x28
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40012c00 	.word	0x40012c00
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	40010800 	.word	0x40010800
 8001fe4:	40010000 	.word	0x40010000

08001fe8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08c      	sub	sp, #48	; 0x30
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	201e      	movs	r0, #30
 8001ffe:	f001 fcee 	bl	80039de <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002002:	201e      	movs	r0, #30
 8002004:	f001 fd07 	bl	8003a16 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002008:	4b1f      	ldr	r3, [pc, #124]	; (8002088 <HAL_InitTick+0xa0>)
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	4a1e      	ldr	r2, [pc, #120]	; (8002088 <HAL_InitTick+0xa0>)
 800200e:	f043 0304 	orr.w	r3, r3, #4
 8002012:	61d3      	str	r3, [r2, #28]
 8002014:	4b1c      	ldr	r3, [pc, #112]	; (8002088 <HAL_InitTick+0xa0>)
 8002016:	69db      	ldr	r3, [r3, #28]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002020:	f107 0210 	add.w	r2, r7, #16
 8002024:	f107 0314 	add.w	r3, r7, #20
 8002028:	4611      	mov	r1, r2
 800202a:	4618      	mov	r0, r3
 800202c:	f002 fcb2 	bl	8004994 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002030:	f002 fc88 	bl	8004944 <HAL_RCC_GetPCLK1Freq>
 8002034:	4603      	mov	r3, r0
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800203a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203c:	4a13      	ldr	r2, [pc, #76]	; (800208c <HAL_InitTick+0xa4>)
 800203e:	fba2 2303 	umull	r2, r3, r2, r3
 8002042:	0c9b      	lsrs	r3, r3, #18
 8002044:	3b01      	subs	r3, #1
 8002046:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002048:	4b11      	ldr	r3, [pc, #68]	; (8002090 <HAL_InitTick+0xa8>)
 800204a:	4a12      	ldr	r2, [pc, #72]	; (8002094 <HAL_InitTick+0xac>)
 800204c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 800204e:	4b10      	ldr	r3, [pc, #64]	; (8002090 <HAL_InitTick+0xa8>)
 8002050:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002054:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002056:	4a0e      	ldr	r2, [pc, #56]	; (8002090 <HAL_InitTick+0xa8>)
 8002058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800205a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800205c:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <HAL_InitTick+0xa8>)
 800205e:	2200      	movs	r2, #0
 8002060:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002062:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <HAL_InitTick+0xa8>)
 8002064:	2200      	movs	r2, #0
 8002066:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8002068:	4809      	ldr	r0, [pc, #36]	; (8002090 <HAL_InitTick+0xa8>)
 800206a:	f002 fe53 	bl	8004d14 <HAL_TIM_Base_Init>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d104      	bne.n	800207e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8002074:	4806      	ldr	r0, [pc, #24]	; (8002090 <HAL_InitTick+0xa8>)
 8002076:	f002 fe78 	bl	8004d6a <HAL_TIM_Base_Start_IT>
 800207a:	4603      	mov	r3, r0
 800207c:	e000      	b.n	8002080 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
}
 8002080:	4618      	mov	r0, r3
 8002082:	3730      	adds	r7, #48	; 0x30
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40021000 	.word	0x40021000
 800208c:	431bde83 	.word	0x431bde83
 8002090:	20002b74 	.word	0x20002b74
 8002094:	40000800 	.word	0x40000800

08002098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020a8:	e7fe      	b.n	80020a8 <HardFault_Handler+0x4>

080020aa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020ae:	e7fe      	b.n	80020ae <MemManage_Handler+0x4>

080020b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020b4:	e7fe      	b.n	80020b4 <BusFault_Handler+0x4>

080020b6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020b6:	b480      	push	{r7}
 80020b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020ba:	e7fe      	b.n	80020ba <UsageFault_Handler+0x4>

080020bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr

080020c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020cc:	4802      	ldr	r0, [pc, #8]	; (80020d8 <DMA1_Channel1_IRQHandler+0x10>)
 80020ce:	f001 fda5 	bl	8003c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20002688 	.word	0x20002688

080020dc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &pRxHeader, can_rx_control_data);
 80020e0:	4b0d      	ldr	r3, [pc, #52]	; (8002118 <USB_LP_CAN1_RX0_IRQHandler+0x3c>)
 80020e2:	4a0e      	ldr	r2, [pc, #56]	; (800211c <USB_LP_CAN1_RX0_IRQHandler+0x40>)
 80020e4:	2100      	movs	r1, #0
 80020e6:	480e      	ldr	r0, [pc, #56]	; (8002120 <USB_LP_CAN1_RX0_IRQHandler+0x44>)
 80020e8:	f001 f868 	bl	80031bc <HAL_CAN_GetRxMessage>
  can_rx_data.first_wheel_rx_side = can_rx_control_data[0]; //for right controller
 80020ec:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <USB_LP_CAN1_RX0_IRQHandler+0x3c>)
 80020ee:	781a      	ldrb	r2, [r3, #0]
 80020f0:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <USB_LP_CAN1_RX0_IRQHandler+0x48>)
 80020f2:	701a      	strb	r2, [r3, #0]
  can_rx_data.first_wheel_rx_speed = can_rx_control_data[1];
 80020f4:	4b08      	ldr	r3, [pc, #32]	; (8002118 <USB_LP_CAN1_RX0_IRQHandler+0x3c>)
 80020f6:	785a      	ldrb	r2, [r3, #1]
 80020f8:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <USB_LP_CAN1_RX0_IRQHandler+0x48>)
 80020fa:	705a      	strb	r2, [r3, #1]
  can_rx_data.second_wheel_rx_side = can_rx_control_data[2];
 80020fc:	4b06      	ldr	r3, [pc, #24]	; (8002118 <USB_LP_CAN1_RX0_IRQHandler+0x3c>)
 80020fe:	789a      	ldrb	r2, [r3, #2]
 8002100:	4b08      	ldr	r3, [pc, #32]	; (8002124 <USB_LP_CAN1_RX0_IRQHandler+0x48>)
 8002102:	709a      	strb	r2, [r3, #2]
  can_rx_data.second_wheel_rx_speed = can_rx_control_data[3];
 8002104:	4b04      	ldr	r3, [pc, #16]	; (8002118 <USB_LP_CAN1_RX0_IRQHandler+0x3c>)
 8002106:	78da      	ldrb	r2, [r3, #3]
 8002108:	4b06      	ldr	r3, [pc, #24]	; (8002124 <USB_LP_CAN1_RX0_IRQHandler+0x48>)
 800210a:	70da      	strb	r2, [r3, #3]
//  can_rx_data.first_wheel_rx_side = can_rx_control_data[2];
//  can_rx_data.first_wheel_rx_speed = can_rx_control_data[3];
  //  can_rx_side = 0;
  //  can_rx_speed = 43;
  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800210c:	4804      	ldr	r0, [pc, #16]	; (8002120 <USB_LP_CAN1_RX0_IRQHandler+0x44>)
 800210e:	f001 f98b 	bl	8003428 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	2000004c 	.word	0x2000004c
 800211c:	20002b38 	.word	0x20002b38
 8002120:	200025e4 	.word	0x200025e4
 8002124:	2000006c 	.word	0x2000006c

08002128 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
//  if (EXTI->PR & (1<<9))
//  {  EXTI->PR |= (1<<9);
//
//  }
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800212c:	2040      	movs	r0, #64	; 0x40
 800212e:	f002 f81b 	bl	8004168 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002132:	2080      	movs	r0, #128	; 0x80
 8002134:	f002 f818 	bl	8004168 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002138:	f44f 7080 	mov.w	r0, #256	; 0x100
 800213c:	f002 f814 	bl	8004168 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002140:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002144:	f002 f810 	bl	8004168 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}

0800214c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002150:	4802      	ldr	r0, [pc, #8]	; (800215c <TIM3_IRQHandler+0x10>)
 8002152:	f002 fe93 	bl	8004e7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	2000260c 	.word	0x2000260c

08002160 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002164:	4802      	ldr	r0, [pc, #8]	; (8002170 <TIM4_IRQHandler+0x10>)
 8002166:	f002 fe89 	bl	8004e7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20002b74 	.word	0x20002b74

08002174 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002178:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <SystemInit+0x5c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a14      	ldr	r2, [pc, #80]	; (80021d0 <SystemInit+0x5c>)
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002184:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <SystemInit+0x5c>)
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	4911      	ldr	r1, [pc, #68]	; (80021d0 <SystemInit+0x5c>)
 800218a:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <SystemInit+0x60>)
 800218c:	4013      	ands	r3, r2
 800218e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002190:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <SystemInit+0x5c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a0e      	ldr	r2, [pc, #56]	; (80021d0 <SystemInit+0x5c>)
 8002196:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800219a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800219e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80021a0:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <SystemInit+0x5c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0a      	ldr	r2, [pc, #40]	; (80021d0 <SystemInit+0x5c>)
 80021a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021aa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80021ac:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <SystemInit+0x5c>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	4a07      	ldr	r2, [pc, #28]	; (80021d0 <SystemInit+0x5c>)
 80021b2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80021b6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80021b8:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <SystemInit+0x5c>)
 80021ba:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80021be:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80021c0:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <SystemInit+0x64>)
 80021c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021c6:	609a      	str	r2, [r3, #8]
#endif 
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr
 80021d0:	40021000 	.word	0x40021000
 80021d4:	f8ff0000 	.word	0xf8ff0000
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80021dc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80021de:	e003      	b.n	80021e8 <LoopCopyDataInit>

080021e0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80021e0:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80021e2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80021e4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80021e6:	3104      	adds	r1, #4

080021e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80021e8:	480a      	ldr	r0, [pc, #40]	; (8002214 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80021ea:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80021ec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80021ee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80021f0:	d3f6      	bcc.n	80021e0 <CopyDataInit>
  ldr r2, =_sbss
 80021f2:	4a0a      	ldr	r2, [pc, #40]	; (800221c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80021f4:	e002      	b.n	80021fc <LoopFillZerobss>

080021f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80021f6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80021f8:	f842 3b04 	str.w	r3, [r2], #4

080021fc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80021fc:	4b08      	ldr	r3, [pc, #32]	; (8002220 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80021fe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002200:	d3f9      	bcc.n	80021f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002202:	f7ff ffb7 	bl	8002174 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002206:	f006 f8f1 	bl	80083ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800220a:	f7fe faab 	bl	8000764 <main>
  bx lr
 800220e:	4770      	bx	lr
  ldr r3, =_sidata
 8002210:	080085bc 	.word	0x080085bc
  ldr r0, =_sdata
 8002214:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002218:	20000028 	.word	0x20000028
  ldr r2, =_sbss
 800221c:	20000028 	.word	0x20000028
  ldr r3, = _ebss
 8002220:	20002bf8 	.word	0x20002bf8

08002224 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002224:	e7fe      	b.n	8002224 <ADC1_2_IRQHandler>
	...

08002228 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800222c:	4b08      	ldr	r3, [pc, #32]	; (8002250 <HAL_Init+0x28>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a07      	ldr	r2, [pc, #28]	; (8002250 <HAL_Init+0x28>)
 8002232:	f043 0310 	orr.w	r3, r3, #16
 8002236:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002238:	2003      	movs	r0, #3
 800223a:	f001 fbc5 	bl	80039c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800223e:	2000      	movs	r0, #0
 8002240:	f7ff fed2 	bl	8001fe8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002244:	f7ff fd18 	bl	8001c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40022000 	.word	0x40022000

08002254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <HAL_IncTick+0x1c>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	461a      	mov	r2, r3
 800225e:	4b05      	ldr	r3, [pc, #20]	; (8002274 <HAL_IncTick+0x20>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4413      	add	r3, r2
 8002264:	4a03      	ldr	r2, [pc, #12]	; (8002274 <HAL_IncTick+0x20>)
 8002266:	6013      	str	r3, [r2, #0]
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr
 8002270:	20000020 	.word	0x20000020
 8002274:	20002bb4 	.word	0x20002bb4

08002278 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  return uwTick;
 800227c:	4b02      	ldr	r3, [pc, #8]	; (8002288 <HAL_GetTick+0x10>)
 800227e:	681b      	ldr	r3, [r3, #0]
}
 8002280:	4618      	mov	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr
 8002288:	20002bb4 	.word	0x20002bb4

0800228c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002294:	f7ff fff0 	bl	8002278 <HAL_GetTick>
 8002298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022a4:	d005      	beq.n	80022b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022a6:	4b09      	ldr	r3, [pc, #36]	; (80022cc <HAL_Delay+0x40>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	461a      	mov	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4413      	add	r3, r2
 80022b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022b2:	bf00      	nop
 80022b4:	f7ff ffe0 	bl	8002278 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d8f7      	bhi.n	80022b4 <HAL_Delay+0x28>
  {
  }
}
 80022c4:	bf00      	nop
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20000020 	.word	0x20000020

080022d0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022d8:	2300      	movs	r3, #0
 80022da:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e0be      	b.n	8002470 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d109      	bne.n	8002314 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff fce4 	bl	8001cdc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 fb33 	bl	8002980 <ADC_ConversionStop_Disable>
 800231a:	4603      	mov	r3, r0
 800231c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002322:	f003 0310 	and.w	r3, r3, #16
 8002326:	2b00      	cmp	r3, #0
 8002328:	f040 8099 	bne.w	800245e <HAL_ADC_Init+0x18e>
 800232c:	7dfb      	ldrb	r3, [r7, #23]
 800232e:	2b00      	cmp	r3, #0
 8002330:	f040 8095 	bne.w	800245e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002338:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800233c:	f023 0302 	bic.w	r3, r3, #2
 8002340:	f043 0202 	orr.w	r2, r3, #2
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002350:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	7b1b      	ldrb	r3, [r3, #12]
 8002356:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002358:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	4313      	orrs	r3, r2
 800235e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002368:	d003      	beq.n	8002372 <HAL_ADC_Init+0xa2>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d102      	bne.n	8002378 <HAL_ADC_Init+0xa8>
 8002372:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002376:	e000      	b.n	800237a <HAL_ADC_Init+0xaa>
 8002378:	2300      	movs	r3, #0
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	4313      	orrs	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	7d1b      	ldrb	r3, [r3, #20]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d119      	bne.n	80023bc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	7b1b      	ldrb	r3, [r3, #12]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d109      	bne.n	80023a4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	3b01      	subs	r3, #1
 8002396:	035a      	lsls	r2, r3, #13
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4313      	orrs	r3, r2
 800239c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023a0:	613b      	str	r3, [r7, #16]
 80023a2:	e00b      	b.n	80023bc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a8:	f043 0220 	orr.w	r2, r3, #32
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b4:	f043 0201 	orr.w	r2, r3, #1
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	4b28      	ldr	r3, [pc, #160]	; (8002478 <HAL_ADC_Init+0x1a8>)
 80023d8:	4013      	ands	r3, r2
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6812      	ldr	r2, [r2, #0]
 80023de:	68b9      	ldr	r1, [r7, #8]
 80023e0:	430b      	orrs	r3, r1
 80023e2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023ec:	d003      	beq.n	80023f6 <HAL_ADC_Init+0x126>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d104      	bne.n	8002400 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	051b      	lsls	r3, r3, #20
 80023fe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002406:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	430a      	orrs	r2, r1
 8002412:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	4b18      	ldr	r3, [pc, #96]	; (800247c <HAL_ADC_Init+0x1ac>)
 800241c:	4013      	ands	r3, r2
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	429a      	cmp	r2, r3
 8002422:	d10b      	bne.n	800243c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242e:	f023 0303 	bic.w	r3, r3, #3
 8002432:	f043 0201 	orr.w	r2, r3, #1
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800243a:	e018      	b.n	800246e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002440:	f023 0312 	bic.w	r3, r3, #18
 8002444:	f043 0210 	orr.w	r2, r3, #16
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002450:	f043 0201 	orr.w	r2, r3, #1
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800245c:	e007      	b.n	800246e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002462:	f043 0210 	orr.w	r2, r3, #16
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800246e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	ffe1f7fd 	.word	0xffe1f7fd
 800247c:	ff1f0efe 	.word	0xff1f0efe

08002480 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800248c:	2300      	movs	r3, #0
 800248e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a64      	ldr	r2, [pc, #400]	; (8002628 <HAL_ADC_Start_DMA+0x1a8>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d004      	beq.n	80024a4 <HAL_ADC_Start_DMA+0x24>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a63      	ldr	r2, [pc, #396]	; (800262c <HAL_ADC_Start_DMA+0x1ac>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d106      	bne.n	80024b2 <HAL_ADC_Start_DMA+0x32>
 80024a4:	4b60      	ldr	r3, [pc, #384]	; (8002628 <HAL_ADC_Start_DMA+0x1a8>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f040 80b3 	bne.w	8002618 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d101      	bne.n	80024c0 <HAL_ADC_Start_DMA+0x40>
 80024bc:	2302      	movs	r3, #2
 80024be:	e0ae      	b.n	800261e <HAL_ADC_Start_DMA+0x19e>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 fa07 	bl	80028dc <ADC_Enable>
 80024ce:	4603      	mov	r3, r0
 80024d0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80024d2:	7dfb      	ldrb	r3, [r7, #23]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f040 809a 	bne.w	800260e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024de:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024e2:	f023 0301 	bic.w	r3, r3, #1
 80024e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a4e      	ldr	r2, [pc, #312]	; (800262c <HAL_ADC_Start_DMA+0x1ac>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d105      	bne.n	8002504 <HAL_ADC_Start_DMA+0x84>
 80024f8:	4b4b      	ldr	r3, [pc, #300]	; (8002628 <HAL_ADC_Start_DMA+0x1a8>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d115      	bne.n	8002530 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002508:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800251a:	2b00      	cmp	r3, #0
 800251c:	d026      	beq.n	800256c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002522:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002526:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800252e:	e01d      	b.n	800256c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002534:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a39      	ldr	r2, [pc, #228]	; (8002628 <HAL_ADC_Start_DMA+0x1a8>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d004      	beq.n	8002550 <HAL_ADC_Start_DMA+0xd0>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a38      	ldr	r2, [pc, #224]	; (800262c <HAL_ADC_Start_DMA+0x1ac>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d10d      	bne.n	800256c <HAL_ADC_Start_DMA+0xec>
 8002550:	4b35      	ldr	r3, [pc, #212]	; (8002628 <HAL_ADC_Start_DMA+0x1a8>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002558:	2b00      	cmp	r3, #0
 800255a:	d007      	beq.n	800256c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002560:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002564:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002570:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d006      	beq.n	8002586 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257c:	f023 0206 	bic.w	r2, r3, #6
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	62da      	str	r2, [r3, #44]	; 0x2c
 8002584:	e002      	b.n	800258c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	4a25      	ldr	r2, [pc, #148]	; (8002630 <HAL_ADC_Start_DMA+0x1b0>)
 800259a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	4a24      	ldr	r2, [pc, #144]	; (8002634 <HAL_ADC_Start_DMA+0x1b4>)
 80025a2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	4a23      	ldr	r2, [pc, #140]	; (8002638 <HAL_ADC_Start_DMA+0x1b8>)
 80025aa:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f06f 0202 	mvn.w	r2, #2
 80025b4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025c4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6a18      	ldr	r0, [r3, #32]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	334c      	adds	r3, #76	; 0x4c
 80025d0:	4619      	mov	r1, r3
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f001 fa87 	bl	8003ae8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80025e4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80025e8:	d108      	bne.n	80025fc <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80025f8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80025fa:	e00f      	b.n	800261c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800260a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800260c:	e006      	b.n	800261c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002616:	e001      	b.n	800261c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800261c:	7dfb      	ldrb	r3, [r7, #23]
}
 800261e:	4618      	mov	r0, r3
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40012400 	.word	0x40012400
 800262c:	40012800 	.word	0x40012800
 8002630:	080029f5 	.word	0x080029f5
 8002634:	08002a71 	.word	0x08002a71
 8002638:	08002a8d 	.word	0x08002a8d

0800263c <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002644:	2300      	movs	r3, #0
 8002646:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800264e:	2b01      	cmp	r3, #1
 8002650:	d101      	bne.n	8002656 <HAL_ADC_Stop_DMA+0x1a>
 8002652:	2302      	movs	r3, #2
 8002654:	e033      	b.n	80026be <HAL_ADC_Stop_DMA+0x82>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f98e 	bl	8002980 <ADC_ConversionStop_Disable>
 8002664:	4603      	mov	r3, r0
 8002666:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002668:	7bfb      	ldrb	r3, [r7, #15]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d122      	bne.n	80026b4 <HAL_ADC_Stop_DMA+0x78>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800267c:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	4618      	mov	r0, r3
 8002684:	f001 fa8f 	bl	8003ba6 <HAL_DMA_Abort>
 8002688:	4603      	mov	r3, r0
 800268a:	73fb      	strb	r3, [r7, #15]
    
    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800268c:	7bfb      	ldrb	r3, [r7, #15]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10a      	bne.n	80026a8 <HAL_ADC_Stop_DMA+0x6c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002696:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800269a:	f023 0301 	bic.w	r3, r3, #1
 800269e:	f043 0201 	orr.w	r2, r3, #1
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	629a      	str	r2, [r3, #40]	; 0x28
 80026a6:	e005      	b.n	80026b4 <HAL_ADC_Stop_DMA+0x78>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr

080026d8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr
	...

080026ec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026f6:	2300      	movs	r3, #0
 80026f8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002704:	2b01      	cmp	r3, #1
 8002706:	d101      	bne.n	800270c <HAL_ADC_ConfigChannel+0x20>
 8002708:	2302      	movs	r3, #2
 800270a:	e0dc      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x1da>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b06      	cmp	r3, #6
 800271a:	d81c      	bhi.n	8002756 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	3b05      	subs	r3, #5
 800272e:	221f      	movs	r2, #31
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	4019      	ands	r1, r3
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	6818      	ldr	r0, [r3, #0]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	3b05      	subs	r3, #5
 8002748:	fa00 f203 	lsl.w	r2, r0, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	430a      	orrs	r2, r1
 8002752:	635a      	str	r2, [r3, #52]	; 0x34
 8002754:	e03c      	b.n	80027d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b0c      	cmp	r3, #12
 800275c:	d81c      	bhi.n	8002798 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4413      	add	r3, r2
 800276e:	3b23      	subs	r3, #35	; 0x23
 8002770:	221f      	movs	r2, #31
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43db      	mvns	r3, r3
 8002778:	4019      	ands	r1, r3
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	6818      	ldr	r0, [r3, #0]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	4613      	mov	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4413      	add	r3, r2
 8002788:	3b23      	subs	r3, #35	; 0x23
 800278a:	fa00 f203 	lsl.w	r2, r0, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	430a      	orrs	r2, r1
 8002794:	631a      	str	r2, [r3, #48]	; 0x30
 8002796:	e01b      	b.n	80027d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685a      	ldr	r2, [r3, #4]
 80027a2:	4613      	mov	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	3b41      	subs	r3, #65	; 0x41
 80027aa:	221f      	movs	r2, #31
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	43db      	mvns	r3, r3
 80027b2:	4019      	ands	r1, r3
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	6818      	ldr	r0, [r3, #0]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	3b41      	subs	r3, #65	; 0x41
 80027c4:	fa00 f203 	lsl.w	r2, r0, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2b09      	cmp	r3, #9
 80027d6:	d91c      	bls.n	8002812 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68d9      	ldr	r1, [r3, #12]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	4613      	mov	r3, r2
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	4413      	add	r3, r2
 80027e8:	3b1e      	subs	r3, #30
 80027ea:	2207      	movs	r2, #7
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	4019      	ands	r1, r3
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	6898      	ldr	r0, [r3, #8]
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4613      	mov	r3, r2
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	4413      	add	r3, r2
 8002802:	3b1e      	subs	r3, #30
 8002804:	fa00 f203 	lsl.w	r2, r0, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	60da      	str	r2, [r3, #12]
 8002810:	e019      	b.n	8002846 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6919      	ldr	r1, [r3, #16]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	4613      	mov	r3, r2
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	4413      	add	r3, r2
 8002822:	2207      	movs	r2, #7
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	4019      	ands	r1, r3
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	6898      	ldr	r0, [r3, #8]
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	4613      	mov	r3, r2
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	4413      	add	r3, r2
 800283a:	fa00 f203 	lsl.w	r2, r0, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2b10      	cmp	r3, #16
 800284c:	d003      	beq.n	8002856 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002852:	2b11      	cmp	r3, #17
 8002854:	d132      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a1d      	ldr	r2, [pc, #116]	; (80028d0 <HAL_ADC_ConfigChannel+0x1e4>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d125      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d126      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800287c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2b10      	cmp	r3, #16
 8002884:	d11a      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002886:	4b13      	ldr	r3, [pc, #76]	; (80028d4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a13      	ldr	r2, [pc, #76]	; (80028d8 <HAL_ADC_ConfigChannel+0x1ec>)
 800288c:	fba2 2303 	umull	r2, r3, r2, r3
 8002890:	0c9a      	lsrs	r2, r3, #18
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800289c:	e002      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	3b01      	subs	r3, #1
 80028a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f9      	bne.n	800289e <HAL_ADC_ConfigChannel+0x1b2>
 80028aa:	e007      	b.n	80028bc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b0:	f043 0220 	orr.w	r2, r3, #32
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr
 80028d0:	40012400 	.word	0x40012400
 80028d4:	20000018 	.word	0x20000018
 80028d8:	431bde83 	.word	0x431bde83

080028dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d039      	beq.n	800296e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f042 0201 	orr.w	r2, r2, #1
 8002908:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800290a:	4b1b      	ldr	r3, [pc, #108]	; (8002978 <ADC_Enable+0x9c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a1b      	ldr	r2, [pc, #108]	; (800297c <ADC_Enable+0xa0>)
 8002910:	fba2 2303 	umull	r2, r3, r2, r3
 8002914:	0c9b      	lsrs	r3, r3, #18
 8002916:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002918:	e002      	b.n	8002920 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	3b01      	subs	r3, #1
 800291e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1f9      	bne.n	800291a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002926:	f7ff fca7 	bl	8002278 <HAL_GetTick>
 800292a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800292c:	e018      	b.n	8002960 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800292e:	f7ff fca3 	bl	8002278 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d911      	bls.n	8002960 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002940:	f043 0210 	orr.w	r2, r3, #16
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294c:	f043 0201 	orr.w	r2, r3, #1
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e007      	b.n	8002970 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b01      	cmp	r3, #1
 800296c:	d1df      	bne.n	800292e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	20000018 	.word	0x20000018
 800297c:	431bde83 	.word	0x431bde83

08002980 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002988:	2300      	movs	r3, #0
 800298a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b01      	cmp	r3, #1
 8002998:	d127      	bne.n	80029ea <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0201 	bic.w	r2, r2, #1
 80029a8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80029aa:	f7ff fc65 	bl	8002278 <HAL_GetTick>
 80029ae:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80029b0:	e014      	b.n	80029dc <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80029b2:	f7ff fc61 	bl	8002278 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d90d      	bls.n	80029dc <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c4:	f043 0210 	orr.w	r2, r3, #16
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	f043 0201 	orr.w	r2, r3, #1
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e007      	b.n	80029ec <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d0e3      	beq.n	80029b2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a06:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d127      	bne.n	8002a5e <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a12:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002a24:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002a28:	d115      	bne.n	8002a56 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d111      	bne.n	8002a56 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d105      	bne.n	8002a56 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4e:	f043 0201 	orr.w	r2, r3, #1
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f7fd fe6e 	bl	8000738 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002a5c:	e004      	b.n	8002a68 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	4798      	blx	r3
}
 8002a68:	bf00      	nop
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f7ff fe21 	bl	80026c6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a84:	bf00      	nop
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aaa:	f043 0204 	orr.w	r2, r3, #4
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f7ff fe10 	bl	80026d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ab8:	bf00      	nop
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002ac0:	b590      	push	{r4, r7, lr}
 8002ac2:	b087      	sub	sp, #28
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d101      	bne.n	8002ade <HAL_ADCEx_Calibration_Start+0x1e>
 8002ada:	2302      	movs	r3, #2
 8002adc:	e086      	b.n	8002bec <HAL_ADCEx_Calibration_Start+0x12c>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7ff ff4a 	bl	8002980 <ADC_ConversionStop_Disable>
 8002aec:	4603      	mov	r3, r0
 8002aee:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002af0:	7dfb      	ldrb	r3, [r7, #23]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d175      	bne.n	8002be2 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002afe:	f023 0302 	bic.w	r3, r3, #2
 8002b02:	f043 0202 	orr.w	r2, r3, #2
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002b0a:	4b3a      	ldr	r3, [pc, #232]	; (8002bf4 <HAL_ADCEx_Calibration_Start+0x134>)
 8002b0c:	681c      	ldr	r4, [r3, #0]
 8002b0e:	2002      	movs	r0, #2
 8002b10:	f002 f844 	bl	8004b9c <HAL_RCCEx_GetPeriphCLKFreq>
 8002b14:	4603      	mov	r3, r0
 8002b16:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002b1a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002b1c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002b1e:	e002      	b.n	8002b26 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	3b01      	subs	r3, #1
 8002b24:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1f9      	bne.n	8002b20 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7ff fed5 	bl	80028dc <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f042 0208 	orr.w	r2, r2, #8
 8002b40:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002b42:	f7ff fb99 	bl	8002278 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002b48:	e014      	b.n	8002b74 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002b4a:	f7ff fb95 	bl	8002278 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b0a      	cmp	r3, #10
 8002b56:	d90d      	bls.n	8002b74 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5c:	f023 0312 	bic.w	r3, r3, #18
 8002b60:	f043 0210 	orr.w	r2, r3, #16
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e03b      	b.n	8002bec <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1e3      	bne.n	8002b4a <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f042 0204 	orr.w	r2, r2, #4
 8002b90:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002b92:	f7ff fb71 	bl	8002278 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002b98:	e014      	b.n	8002bc4 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002b9a:	f7ff fb6d 	bl	8002278 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b0a      	cmp	r3, #10
 8002ba6:	d90d      	bls.n	8002bc4 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bac:	f023 0312 	bic.w	r3, r3, #18
 8002bb0:	f043 0210 	orr.w	r2, r3, #16
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e013      	b.n	8002bec <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1e3      	bne.n	8002b9a <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd6:	f023 0303 	bic.w	r3, r3, #3
 8002bda:	f043 0201 	orr.w	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	371c      	adds	r7, #28
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd90      	pop	{r4, r7, pc}
 8002bf4:	20000018 	.word	0x20000018

08002bf8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e0ed      	b.n	8002de6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d102      	bne.n	8002c1c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7ff f8e0 	bl	8001ddc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0202 	bic.w	r2, r2, #2
 8002c2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c2c:	f7ff fb24 	bl	8002278 <HAL_GetTick>
 8002c30:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c32:	e012      	b.n	8002c5a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c34:	f7ff fb20 	bl	8002278 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b0a      	cmp	r3, #10
 8002c40:	d90b      	bls.n	8002c5a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2205      	movs	r2, #5
 8002c52:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e0c5      	b.n	8002de6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1e5      	bne.n	8002c34 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f042 0201 	orr.w	r2, r2, #1
 8002c76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c78:	f7ff fafe 	bl	8002278 <HAL_GetTick>
 8002c7c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c7e:	e012      	b.n	8002ca6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c80:	f7ff fafa 	bl	8002278 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b0a      	cmp	r3, #10
 8002c8c:	d90b      	bls.n	8002ca6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2205      	movs	r2, #5
 8002c9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e09f      	b.n	8002de6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0e5      	beq.n	8002c80 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	7e1b      	ldrb	r3, [r3, #24]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d108      	bne.n	8002cce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	e007      	b.n	8002cde <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cdc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	7e5b      	ldrb	r3, [r3, #25]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d108      	bne.n	8002cf8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	e007      	b.n	8002d08 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d06:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	7e9b      	ldrb	r3, [r3, #26]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d108      	bne.n	8002d22 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f042 0220 	orr.w	r2, r2, #32
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	e007      	b.n	8002d32 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 0220 	bic.w	r2, r2, #32
 8002d30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	7edb      	ldrb	r3, [r3, #27]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d108      	bne.n	8002d4c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 0210 	bic.w	r2, r2, #16
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	e007      	b.n	8002d5c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f042 0210 	orr.w	r2, r2, #16
 8002d5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	7f1b      	ldrb	r3, [r3, #28]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d108      	bne.n	8002d76 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0208 	orr.w	r2, r2, #8
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	e007      	b.n	8002d86 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 0208 	bic.w	r2, r2, #8
 8002d84:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	7f5b      	ldrb	r3, [r3, #29]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d108      	bne.n	8002da0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f042 0204 	orr.w	r2, r2, #4
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	e007      	b.n	8002db0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0204 	bic.w	r2, r2, #4
 8002dae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	431a      	orrs	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	ea42 0103 	orr.w	r1, r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	1e5a      	subs	r2, r3, #1
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b087      	sub	sp, #28
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e04:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002e06:	7cfb      	ldrb	r3, [r7, #19]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d003      	beq.n	8002e14 <HAL_CAN_ConfigFilter+0x26>
 8002e0c:	7cfb      	ldrb	r3, [r7, #19]
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	f040 80aa 	bne.w	8002f68 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e1a:	f043 0201 	orr.w	r2, r3, #1
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	f003 031f 	and.w	r3, r3, #31
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	401a      	ands	r2, r3
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d123      	bne.n	8002e96 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	43db      	mvns	r3, r3
 8002e58:	401a      	ands	r2, r3
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e70:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	3248      	adds	r2, #72	; 0x48
 8002e76:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e8a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e8c:	6979      	ldr	r1, [r7, #20]
 8002e8e:	3348      	adds	r3, #72	; 0x48
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	440b      	add	r3, r1
 8002e94:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d122      	bne.n	8002ee4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002ebe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	3248      	adds	r2, #72	; 0x48
 8002ec4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ed8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002eda:	6979      	ldr	r1, [r7, #20]
 8002edc:	3348      	adds	r3, #72	; 0x48
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	440b      	add	r3, r1
 8002ee2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d109      	bne.n	8002f00 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	401a      	ands	r2, r3
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002efe:	e007      	b.n	8002f10 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d109      	bne.n	8002f2c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	43db      	mvns	r3, r3
 8002f22:	401a      	ands	r2, r3
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002f2a:	e007      	b.n	8002f3c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	431a      	orrs	r2, r3
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d107      	bne.n	8002f54 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f5a:	f023 0201 	bic.w	r2, r3, #1
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002f64:	2300      	movs	r3, #0
 8002f66:	e006      	b.n	8002f76 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
  }
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	371c      	adds	r7, #28
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr

08002f80 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d12e      	bne.n	8002ff2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0201 	bic.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002fac:	f7ff f964 	bl	8002278 <HAL_GetTick>
 8002fb0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002fb2:	e012      	b.n	8002fda <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002fb4:	f7ff f960 	bl	8002278 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b0a      	cmp	r3, #10
 8002fc0:	d90b      	bls.n	8002fda <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2205      	movs	r2, #5
 8002fd2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e012      	b.n	8003000 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1e5      	bne.n	8002fb4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	e006      	b.n	8003000 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
  }
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003008:	b480      	push	{r7}
 800300a:	b089      	sub	sp, #36	; 0x24
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
 8003014:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f893 3020 	ldrb.w	r3, [r3, #32]
 800301c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003026:	7ffb      	ldrb	r3, [r7, #31]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d003      	beq.n	8003034 <HAL_CAN_AddTxMessage+0x2c>
 800302c:	7ffb      	ldrb	r3, [r7, #31]
 800302e:	2b02      	cmp	r3, #2
 8003030:	f040 80b8 	bne.w	80031a4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10a      	bne.n	8003054 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003044:	2b00      	cmp	r3, #0
 8003046:	d105      	bne.n	8003054 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 80a0 	beq.w	8003194 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	0e1b      	lsrs	r3, r3, #24
 8003058:	f003 0303 	and.w	r3, r3, #3
 800305c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2b02      	cmp	r3, #2
 8003062:	d907      	bls.n	8003074 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e09e      	b.n	80031b2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003074:	2201      	movs	r2, #1
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	409a      	lsls	r2, r3
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10d      	bne.n	80030a2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003090:	68f9      	ldr	r1, [r7, #12]
 8003092:	6809      	ldr	r1, [r1, #0]
 8003094:	431a      	orrs	r2, r3
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	3318      	adds	r3, #24
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	440b      	add	r3, r1
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	e00f      	b.n	80030c2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030ac:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030b2:	68f9      	ldr	r1, [r7, #12]
 80030b4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80030b6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	3318      	adds	r3, #24
 80030bc:	011b      	lsls	r3, r3, #4
 80030be:	440b      	add	r3, r1
 80030c0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6819      	ldr	r1, [r3, #0]
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	691a      	ldr	r2, [r3, #16]
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	3318      	adds	r3, #24
 80030ce:	011b      	lsls	r3, r3, #4
 80030d0:	440b      	add	r3, r1
 80030d2:	3304      	adds	r3, #4
 80030d4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	7d1b      	ldrb	r3, [r3, #20]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d111      	bne.n	8003102 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	3318      	adds	r3, #24
 80030e6:	011b      	lsls	r3, r3, #4
 80030e8:	4413      	add	r3, r2
 80030ea:	3304      	adds	r3, #4
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	6811      	ldr	r1, [r2, #0]
 80030f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	3318      	adds	r3, #24
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	440b      	add	r3, r1
 80030fe:	3304      	adds	r3, #4
 8003100:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3307      	adds	r3, #7
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	061a      	lsls	r2, r3, #24
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3306      	adds	r3, #6
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	041b      	lsls	r3, r3, #16
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3305      	adds	r3, #5
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	021b      	lsls	r3, r3, #8
 800311c:	4313      	orrs	r3, r2
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	3204      	adds	r2, #4
 8003122:	7812      	ldrb	r2, [r2, #0]
 8003124:	4610      	mov	r0, r2
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	6811      	ldr	r1, [r2, #0]
 800312a:	ea43 0200 	orr.w	r2, r3, r0
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	011b      	lsls	r3, r3, #4
 8003132:	440b      	add	r3, r1
 8003134:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003138:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	3303      	adds	r3, #3
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	061a      	lsls	r2, r3, #24
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	3302      	adds	r3, #2
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	041b      	lsls	r3, r3, #16
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3301      	adds	r3, #1
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	021b      	lsls	r3, r3, #8
 8003154:	4313      	orrs	r3, r2
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	7812      	ldrb	r2, [r2, #0]
 800315a:	4610      	mov	r0, r2
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	6811      	ldr	r1, [r2, #0]
 8003160:	ea43 0200 	orr.w	r2, r3, r0
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	011b      	lsls	r3, r3, #4
 8003168:	440b      	add	r3, r1
 800316a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800316e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	3318      	adds	r3, #24
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	4413      	add	r3, r2
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	6811      	ldr	r1, [r2, #0]
 8003182:	f043 0201 	orr.w	r2, r3, #1
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	3318      	adds	r3, #24
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	440b      	add	r3, r1
 800318e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003190:	2300      	movs	r3, #0
 8003192:	e00e      	b.n	80031b2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e006      	b.n	80031b2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
  }
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3724      	adds	r7, #36	; 0x24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr

080031bc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80031bc:	b480      	push	{r7}
 80031be:	b087      	sub	sp, #28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
 80031c8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031d0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80031d2:	7dfb      	ldrb	r3, [r7, #23]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d003      	beq.n	80031e0 <HAL_CAN_GetRxMessage+0x24>
 80031d8:	7dfb      	ldrb	r3, [r7, #23]
 80031da:	2b02      	cmp	r3, #2
 80031dc:	f040 80f3 	bne.w	80033c6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10e      	bne.n	8003204 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f003 0303 	and.w	r3, r3, #3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d116      	bne.n	8003222 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e0e7      	b.n	80033d4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d107      	bne.n	8003222 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003216:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e0d8      	b.n	80033d4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	331b      	adds	r3, #27
 800322a:	011b      	lsls	r3, r3, #4
 800322c:	4413      	add	r3, r2
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0204 	and.w	r2, r3, #4
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10c      	bne.n	800325a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	331b      	adds	r3, #27
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	4413      	add	r3, r2
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	0d5b      	lsrs	r3, r3, #21
 8003250:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	e00b      	b.n	8003272 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	331b      	adds	r3, #27
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	4413      	add	r3, r2
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	08db      	lsrs	r3, r3, #3
 800326a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	331b      	adds	r3, #27
 800327a:	011b      	lsls	r3, r3, #4
 800327c:	4413      	add	r3, r2
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0202 	and.w	r2, r3, #2
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	331b      	adds	r3, #27
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	4413      	add	r3, r2
 8003294:	3304      	adds	r3, #4
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 020f 	and.w	r2, r3, #15
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	331b      	adds	r3, #27
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	4413      	add	r3, r2
 80032ac:	3304      	adds	r3, #4
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	0a1b      	lsrs	r3, r3, #8
 80032b2:	b2da      	uxtb	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	331b      	adds	r3, #27
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	4413      	add	r3, r2
 80032c4:	3304      	adds	r3, #4
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	0c1b      	lsrs	r3, r3, #16
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	011b      	lsls	r3, r3, #4
 80032d8:	4413      	add	r3, r2
 80032da:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	4413      	add	r3, r2
 80032f0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	0a1a      	lsrs	r2, r3, #8
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	3301      	adds	r3, #1
 80032fc:	b2d2      	uxtb	r2, r2
 80032fe:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	011b      	lsls	r3, r3, #4
 8003308:	4413      	add	r3, r2
 800330a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	0c1a      	lsrs	r2, r3, #16
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	3302      	adds	r3, #2
 8003316:	b2d2      	uxtb	r2, r2
 8003318:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	4413      	add	r3, r2
 8003324:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	0e1a      	lsrs	r2, r3, #24
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	3303      	adds	r3, #3
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	4413      	add	r3, r2
 800333e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	3304      	adds	r3, #4
 8003348:	b2d2      	uxtb	r2, r2
 800334a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	4413      	add	r3, r2
 8003356:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	0a1a      	lsrs	r2, r3, #8
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	3305      	adds	r3, #5
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	011b      	lsls	r3, r3, #4
 800336e:	4413      	add	r3, r2
 8003370:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	0c1a      	lsrs	r2, r3, #16
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	3306      	adds	r3, #6
 800337c:	b2d2      	uxtb	r2, r2
 800337e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	4413      	add	r3, r2
 800338a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	0e1a      	lsrs	r2, r3, #24
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	3307      	adds	r3, #7
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d108      	bne.n	80033b2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0220 	orr.w	r2, r2, #32
 80033ae:	60da      	str	r2, [r3, #12]
 80033b0:	e007      	b.n	80033c2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	691a      	ldr	r2, [r3, #16]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f042 0220 	orr.w	r2, r2, #32
 80033c0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80033c2:	2300      	movs	r3, #0
 80033c4:	e006      	b.n	80033d4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
  }
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	371c      	adds	r7, #28
 80033d8:	46bd      	mov	sp, r7
 80033da:	bc80      	pop	{r7}
 80033dc:	4770      	bx	lr

080033de <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80033de:	b480      	push	{r7}
 80033e0:	b085      	sub	sp, #20
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
 80033e6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033ee:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d002      	beq.n	80033fc <HAL_CAN_ActivateNotification+0x1e>
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d109      	bne.n	8003410 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6959      	ldr	r1, [r3, #20]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800340c:	2300      	movs	r3, #0
 800340e:	e006      	b.n	800341e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
  }
}
 800341e:	4618      	mov	r0, r3
 8003420:	3714      	adds	r7, #20
 8003422:	46bd      	mov	sp, r7
 8003424:	bc80      	pop	{r7}
 8003426:	4770      	bx	lr

08003428 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b08a      	sub	sp, #40	; 0x28
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003430:	2300      	movs	r3, #0
 8003432:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d07c      	beq.n	8003568 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b00      	cmp	r3, #0
 8003476:	d023      	beq.n	80034c0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2201      	movs	r2, #1
 800347e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f97d 	bl	800378a <HAL_CAN_TxMailbox0CompleteCallback>
 8003490:	e016      	b.n	80034c0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b00      	cmp	r3, #0
 800349a:	d004      	beq.n	80034a6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24
 80034a4:	e00c      	b.n	80034c0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	f003 0308 	and.w	r3, r3, #8
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d004      	beq.n	80034ba <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
 80034b8:	e002      	b.n	80034c0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f980 	bl	80037c0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d024      	beq.n	8003514 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034d2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f95c 	bl	800379c <HAL_CAN_TxMailbox1CompleteCallback>
 80034e4:	e016      	b.n	8003514 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d004      	beq.n	80034fa <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24
 80034f8:	e00c      	b.n	8003514 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003500:	2b00      	cmp	r3, #0
 8003502:	d004      	beq.n	800350e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003506:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800350a:	627b      	str	r3, [r7, #36]	; 0x24
 800350c:	e002      	b.n	8003514 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f95f 	bl	80037d2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d024      	beq.n	8003568 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003526:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f93b 	bl	80037ae <HAL_CAN_TxMailbox2CompleteCallback>
 8003538:	e016      	b.n	8003568 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d004      	beq.n	800354e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
 800354c:	e00c      	b.n	8003568 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d004      	beq.n	8003562 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800355e:	627b      	str	r3, [r7, #36]	; 0x24
 8003560:	e002      	b.n	8003568 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f93e 	bl	80037e4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003568:	6a3b      	ldr	r3, [r7, #32]
 800356a:	f003 0308 	and.w	r3, r3, #8
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00c      	beq.n	800358c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f003 0310 	and.w	r3, r3, #16
 8003578:	2b00      	cmp	r3, #0
 800357a:	d007      	beq.n	800358c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003582:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2210      	movs	r2, #16
 800358a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800358c:	6a3b      	ldr	r3, [r7, #32]
 800358e:	f003 0304 	and.w	r3, r3, #4
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00b      	beq.n	80035ae <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f003 0308 	and.w	r3, r3, #8
 800359c:	2b00      	cmp	r3, #0
 800359e:	d006      	beq.n	80035ae <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2208      	movs	r2, #8
 80035a6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 f92d 	bl	8003808 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d009      	beq.n	80035cc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d002      	beq.n	80035cc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f915 	bl	80037f6 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00c      	beq.n	80035f0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	f003 0310 	and.w	r3, r3, #16
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d007      	beq.n	80035f0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80035e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2210      	movs	r2, #16
 80035ee:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	f003 0320 	and.w	r3, r3, #32
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00b      	beq.n	8003612 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	2b00      	cmp	r3, #0
 8003602:	d006      	beq.n	8003612 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2208      	movs	r2, #8
 800360a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f90d 	bl	800382c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	f003 0310 	and.w	r3, r3, #16
 8003618:	2b00      	cmp	r3, #0
 800361a:	d009      	beq.n	8003630 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	f003 0303 	and.w	r3, r3, #3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f8f5 	bl	800381a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00b      	beq.n	8003652 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	f003 0310 	and.w	r3, r3, #16
 8003640:	2b00      	cmp	r3, #0
 8003642:	d006      	beq.n	8003652 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2210      	movs	r2, #16
 800364a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f8f6 	bl	800383e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00b      	beq.n	8003674 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	2b00      	cmp	r3, #0
 8003664:	d006      	beq.n	8003674 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2208      	movs	r2, #8
 800366c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f8ee 	bl	8003850 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d075      	beq.n	800376a <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	d06c      	beq.n	8003762 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368e:	2b00      	cmp	r3, #0
 8003690:	d008      	beq.n	80036a4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003698:	2b00      	cmp	r3, #0
 800369a:	d003      	beq.n	80036a4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	f043 0301 	orr.w	r3, r3, #1
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80036a4:	6a3b      	ldr	r3, [r7, #32]
 80036a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d008      	beq.n	80036c0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d003      	beq.n	80036c0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80036b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ba:	f043 0302 	orr.w	r3, r3, #2
 80036be:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d008      	beq.n	80036dc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	f043 0304 	orr.w	r3, r3, #4
 80036da:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d03d      	beq.n	8003762 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d038      	beq.n	8003762 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036f6:	2b30      	cmp	r3, #48	; 0x30
 80036f8:	d017      	beq.n	800372a <HAL_CAN_IRQHandler+0x302>
 80036fa:	2b30      	cmp	r3, #48	; 0x30
 80036fc:	d804      	bhi.n	8003708 <HAL_CAN_IRQHandler+0x2e0>
 80036fe:	2b10      	cmp	r3, #16
 8003700:	d009      	beq.n	8003716 <HAL_CAN_IRQHandler+0x2ee>
 8003702:	2b20      	cmp	r3, #32
 8003704:	d00c      	beq.n	8003720 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003706:	e024      	b.n	8003752 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8003708:	2b50      	cmp	r3, #80	; 0x50
 800370a:	d018      	beq.n	800373e <HAL_CAN_IRQHandler+0x316>
 800370c:	2b60      	cmp	r3, #96	; 0x60
 800370e:	d01b      	beq.n	8003748 <HAL_CAN_IRQHandler+0x320>
 8003710:	2b40      	cmp	r3, #64	; 0x40
 8003712:	d00f      	beq.n	8003734 <HAL_CAN_IRQHandler+0x30c>
            break;
 8003714:	e01d      	b.n	8003752 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	f043 0308 	orr.w	r3, r3, #8
 800371c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800371e:	e018      	b.n	8003752 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003722:	f043 0310 	orr.w	r3, r3, #16
 8003726:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003728:	e013      	b.n	8003752 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	f043 0320 	orr.w	r3, r3, #32
 8003730:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003732:	e00e      	b.n	8003752 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800373a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800373c:	e009      	b.n	8003752 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003744:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003746:	e004      	b.n	8003752 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800374e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003750:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	699a      	ldr	r2, [r3, #24]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003760:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2204      	movs	r2, #4
 8003768:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	2b00      	cmp	r3, #0
 800376e:	d008      	beq.n	8003782 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003776:	431a      	orrs	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f870 	bl	8003862 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003782:	bf00      	nop
 8003784:	3728      	adds	r7, #40	; 0x28
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800378a:	b480      	push	{r7}
 800378c:	b083      	sub	sp, #12
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	bc80      	pop	{r7}
 800379a:	4770      	bx	lr

0800379c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bc80      	pop	{r7}
 80037ac:	4770      	bx	lr

080037ae <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bc80      	pop	{r7}
 80037be:	4770      	bx	lr

080037c0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bc80      	pop	{r7}
 80037d0:	4770      	bx	lr

080037d2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80037d2:	b480      	push	{r7}
 80037d4:	b083      	sub	sp, #12
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	bc80      	pop	{r7}
 80037e2:	4770      	bx	lr

080037e4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bc80      	pop	{r7}
 80037f4:	4770      	bx	lr

080037f6 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	bc80      	pop	{r7}
 8003806:	4770      	bx	lr

08003808 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	bc80      	pop	{r7}
 8003818:	4770      	bx	lr

0800381a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800381a:	b480      	push	{r7}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr

0800382c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	bc80      	pop	{r7}
 800383c:	4770      	bx	lr

0800383e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	bc80      	pop	{r7}
 800384e:	4770      	bx	lr

08003850 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	bc80      	pop	{r7}
 8003860:	4770      	bx	lr

08003862 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800386a:	bf00      	nop
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	bc80      	pop	{r7}
 8003872:	4770      	bx	lr

08003874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f003 0307 	and.w	r3, r3, #7
 8003882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003884:	4b0c      	ldr	r3, [pc, #48]	; (80038b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003890:	4013      	ands	r3, r2
 8003892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800389c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038a6:	4a04      	ldr	r2, [pc, #16]	; (80038b8 <__NVIC_SetPriorityGrouping+0x44>)
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	60d3      	str	r3, [r2, #12]
}
 80038ac:	bf00      	nop
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc80      	pop	{r7}
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	e000ed00 	.word	0xe000ed00

080038bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038c0:	4b04      	ldr	r3, [pc, #16]	; (80038d4 <__NVIC_GetPriorityGrouping+0x18>)
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	0a1b      	lsrs	r3, r3, #8
 80038c6:	f003 0307 	and.w	r3, r3, #7
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bc80      	pop	{r7}
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	e000ed00 	.word	0xe000ed00

080038d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	4603      	mov	r3, r0
 80038e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	db0b      	blt.n	8003902 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ea:	79fb      	ldrb	r3, [r7, #7]
 80038ec:	f003 021f 	and.w	r2, r3, #31
 80038f0:	4906      	ldr	r1, [pc, #24]	; (800390c <__NVIC_EnableIRQ+0x34>)
 80038f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f6:	095b      	lsrs	r3, r3, #5
 80038f8:	2001      	movs	r0, #1
 80038fa:	fa00 f202 	lsl.w	r2, r0, r2
 80038fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	bc80      	pop	{r7}
 800390a:	4770      	bx	lr
 800390c:	e000e100 	.word	0xe000e100

08003910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	4603      	mov	r3, r0
 8003918:	6039      	str	r1, [r7, #0]
 800391a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800391c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003920:	2b00      	cmp	r3, #0
 8003922:	db0a      	blt.n	800393a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	b2da      	uxtb	r2, r3
 8003928:	490c      	ldr	r1, [pc, #48]	; (800395c <__NVIC_SetPriority+0x4c>)
 800392a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392e:	0112      	lsls	r2, r2, #4
 8003930:	b2d2      	uxtb	r2, r2
 8003932:	440b      	add	r3, r1
 8003934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003938:	e00a      	b.n	8003950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	b2da      	uxtb	r2, r3
 800393e:	4908      	ldr	r1, [pc, #32]	; (8003960 <__NVIC_SetPriority+0x50>)
 8003940:	79fb      	ldrb	r3, [r7, #7]
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	3b04      	subs	r3, #4
 8003948:	0112      	lsls	r2, r2, #4
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	440b      	add	r3, r1
 800394e:	761a      	strb	r2, [r3, #24]
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	e000e100 	.word	0xe000e100
 8003960:	e000ed00 	.word	0xe000ed00

08003964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003964:	b480      	push	{r7}
 8003966:	b089      	sub	sp, #36	; 0x24
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f1c3 0307 	rsb	r3, r3, #7
 800397e:	2b04      	cmp	r3, #4
 8003980:	bf28      	it	cs
 8003982:	2304      	movcs	r3, #4
 8003984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	3304      	adds	r3, #4
 800398a:	2b06      	cmp	r3, #6
 800398c:	d902      	bls.n	8003994 <NVIC_EncodePriority+0x30>
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	3b03      	subs	r3, #3
 8003992:	e000      	b.n	8003996 <NVIC_EncodePriority+0x32>
 8003994:	2300      	movs	r3, #0
 8003996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003998:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	43da      	mvns	r2, r3
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	401a      	ands	r2, r3
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	fa01 f303 	lsl.w	r3, r1, r3
 80039b6:	43d9      	mvns	r1, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039bc:	4313      	orrs	r3, r2
         );
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3724      	adds	r7, #36	; 0x24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr

080039c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f7ff ff4f 	bl	8003874 <__NVIC_SetPriorityGrouping>
}
 80039d6:	bf00      	nop
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039de:	b580      	push	{r7, lr}
 80039e0:	b086      	sub	sp, #24
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	4603      	mov	r3, r0
 80039e6:	60b9      	str	r1, [r7, #8]
 80039e8:	607a      	str	r2, [r7, #4]
 80039ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039f0:	f7ff ff64 	bl	80038bc <__NVIC_GetPriorityGrouping>
 80039f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	68b9      	ldr	r1, [r7, #8]
 80039fa:	6978      	ldr	r0, [r7, #20]
 80039fc:	f7ff ffb2 	bl	8003964 <NVIC_EncodePriority>
 8003a00:	4602      	mov	r2, r0
 8003a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a06:	4611      	mov	r1, r2
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff ff81 	bl	8003910 <__NVIC_SetPriority>
}
 8003a0e:	bf00      	nop
 8003a10:	3718      	adds	r7, #24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b082      	sub	sp, #8
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7ff ff57 	bl	80038d8 <__NVIC_EnableIRQ>
}
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
	...

08003a34 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e043      	b.n	8003ad2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	4b22      	ldr	r3, [pc, #136]	; (8003adc <HAL_DMA_Init+0xa8>)
 8003a52:	4413      	add	r3, r2
 8003a54:	4a22      	ldr	r2, [pc, #136]	; (8003ae0 <HAL_DMA_Init+0xac>)
 8003a56:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5a:	091b      	lsrs	r3, r3, #4
 8003a5c:	009a      	lsls	r2, r3, #2
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a1f      	ldr	r2, [pc, #124]	; (8003ae4 <HAL_DMA_Init+0xb0>)
 8003a66:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003a7e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003a82:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003a8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aa4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bc80      	pop	{r7}
 8003ada:	4770      	bx	lr
 8003adc:	bffdfff8 	.word	0xbffdfff8
 8003ae0:	cccccccd 	.word	0xcccccccd
 8003ae4:	40020000 	.word	0x40020000

08003ae8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
 8003af4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d101      	bne.n	8003b08 <HAL_DMA_Start_IT+0x20>
 8003b04:	2302      	movs	r3, #2
 8003b06:	e04a      	b.n	8003b9e <HAL_DMA_Start_IT+0xb6>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d13a      	bne.n	8003b90 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2202      	movs	r2, #2
 8003b1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0201 	bic.w	r2, r2, #1
 8003b36:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	68b9      	ldr	r1, [r7, #8]
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 f972 	bl	8003e28 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d008      	beq.n	8003b5e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 020e 	orr.w	r2, r2, #14
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	e00f      	b.n	8003b7e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0204 	bic.w	r2, r2, #4
 8003b6c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f042 020a 	orr.w	r2, r2, #10
 8003b7c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f042 0201 	orr.w	r2, r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	e005      	b.n	8003b9c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003b98:	2302      	movs	r3, #2
 8003b9a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b085      	sub	sp, #20
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d008      	beq.n	8003bce <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2204      	movs	r2, #4
 8003bc0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e020      	b.n	8003c10 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 020e 	bic.w	r2, r2, #14
 8003bdc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0201 	bic.w	r2, r2, #1
 8003bec:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	fa01 f202 	lsl.w	r2, r1, r2
 8003bfc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bc80      	pop	{r7}
 8003c18:	4770      	bx	lr
	...

08003c1c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	2204      	movs	r2, #4
 8003c3a:	409a      	lsls	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d04f      	beq.n	8003ce4 <HAL_DMA_IRQHandler+0xc8>
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	f003 0304 	and.w	r3, r3, #4
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d04a      	beq.n	8003ce4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0320 	and.w	r3, r3, #32
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d107      	bne.n	8003c6c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 0204 	bic.w	r2, r2, #4
 8003c6a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a66      	ldr	r2, [pc, #408]	; (8003e0c <HAL_DMA_IRQHandler+0x1f0>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d029      	beq.n	8003cca <HAL_DMA_IRQHandler+0xae>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a65      	ldr	r2, [pc, #404]	; (8003e10 <HAL_DMA_IRQHandler+0x1f4>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d022      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0xaa>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a63      	ldr	r2, [pc, #396]	; (8003e14 <HAL_DMA_IRQHandler+0x1f8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d01a      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0xa4>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a62      	ldr	r2, [pc, #392]	; (8003e18 <HAL_DMA_IRQHandler+0x1fc>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d012      	beq.n	8003cba <HAL_DMA_IRQHandler+0x9e>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a60      	ldr	r2, [pc, #384]	; (8003e1c <HAL_DMA_IRQHandler+0x200>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d00a      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x98>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a5f      	ldr	r2, [pc, #380]	; (8003e20 <HAL_DMA_IRQHandler+0x204>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d102      	bne.n	8003cae <HAL_DMA_IRQHandler+0x92>
 8003ca8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003cac:	e00e      	b.n	8003ccc <HAL_DMA_IRQHandler+0xb0>
 8003cae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003cb2:	e00b      	b.n	8003ccc <HAL_DMA_IRQHandler+0xb0>
 8003cb4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003cb8:	e008      	b.n	8003ccc <HAL_DMA_IRQHandler+0xb0>
 8003cba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003cbe:	e005      	b.n	8003ccc <HAL_DMA_IRQHandler+0xb0>
 8003cc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cc4:	e002      	b.n	8003ccc <HAL_DMA_IRQHandler+0xb0>
 8003cc6:	2340      	movs	r3, #64	; 0x40
 8003cc8:	e000      	b.n	8003ccc <HAL_DMA_IRQHandler+0xb0>
 8003cca:	2304      	movs	r3, #4
 8003ccc:	4a55      	ldr	r2, [pc, #340]	; (8003e24 <HAL_DMA_IRQHandler+0x208>)
 8003cce:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 8094 	beq.w	8003e02 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003ce2:	e08e      	b.n	8003e02 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce8:	2202      	movs	r2, #2
 8003cea:	409a      	lsls	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d056      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x186>
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d051      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0320 	and.w	r3, r3, #32
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10b      	bne.n	8003d24 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 020a 	bic.w	r2, r2, #10
 8003d1a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a38      	ldr	r2, [pc, #224]	; (8003e0c <HAL_DMA_IRQHandler+0x1f0>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d029      	beq.n	8003d82 <HAL_DMA_IRQHandler+0x166>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a37      	ldr	r2, [pc, #220]	; (8003e10 <HAL_DMA_IRQHandler+0x1f4>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d022      	beq.n	8003d7e <HAL_DMA_IRQHandler+0x162>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a35      	ldr	r2, [pc, #212]	; (8003e14 <HAL_DMA_IRQHandler+0x1f8>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d01a      	beq.n	8003d78 <HAL_DMA_IRQHandler+0x15c>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a34      	ldr	r2, [pc, #208]	; (8003e18 <HAL_DMA_IRQHandler+0x1fc>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d012      	beq.n	8003d72 <HAL_DMA_IRQHandler+0x156>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a32      	ldr	r2, [pc, #200]	; (8003e1c <HAL_DMA_IRQHandler+0x200>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d00a      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x150>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a31      	ldr	r2, [pc, #196]	; (8003e20 <HAL_DMA_IRQHandler+0x204>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d102      	bne.n	8003d66 <HAL_DMA_IRQHandler+0x14a>
 8003d60:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003d64:	e00e      	b.n	8003d84 <HAL_DMA_IRQHandler+0x168>
 8003d66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d6a:	e00b      	b.n	8003d84 <HAL_DMA_IRQHandler+0x168>
 8003d6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d70:	e008      	b.n	8003d84 <HAL_DMA_IRQHandler+0x168>
 8003d72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d76:	e005      	b.n	8003d84 <HAL_DMA_IRQHandler+0x168>
 8003d78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d7c:	e002      	b.n	8003d84 <HAL_DMA_IRQHandler+0x168>
 8003d7e:	2320      	movs	r3, #32
 8003d80:	e000      	b.n	8003d84 <HAL_DMA_IRQHandler+0x168>
 8003d82:	2302      	movs	r3, #2
 8003d84:	4a27      	ldr	r2, [pc, #156]	; (8003e24 <HAL_DMA_IRQHandler+0x208>)
 8003d86:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d034      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003da0:	e02f      	b.n	8003e02 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	2208      	movs	r2, #8
 8003da8:	409a      	lsls	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	4013      	ands	r3, r2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d028      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x1e8>
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	f003 0308 	and.w	r3, r3, #8
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d023      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 020e 	bic.w	r2, r2, #14
 8003dca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd4:	2101      	movs	r1, #1
 8003dd6:	fa01 f202 	lsl.w	r2, r1, r2
 8003dda:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d004      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	4798      	blx	r3
    }
  }
  return;
 8003e02:	bf00      	nop
 8003e04:	bf00      	nop
}
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40020008 	.word	0x40020008
 8003e10:	4002001c 	.word	0x4002001c
 8003e14:	40020030 	.word	0x40020030
 8003e18:	40020044 	.word	0x40020044
 8003e1c:	40020058 	.word	0x40020058
 8003e20:	4002006c 	.word	0x4002006c
 8003e24:	40020000 	.word	0x40020000

08003e28 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
 8003e34:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e3e:	2101      	movs	r1, #1
 8003e40:	fa01 f202 	lsl.w	r2, r1, r2
 8003e44:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2b10      	cmp	r3, #16
 8003e54:	d108      	bne.n	8003e68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e66:	e007      	b.n	8003e78 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	60da      	str	r2, [r3, #12]
}
 8003e78:	bf00      	nop
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bc80      	pop	{r7}
 8003e80:	4770      	bx	lr
	...

08003e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b08b      	sub	sp, #44	; 0x2c
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003e92:	2300      	movs	r3, #0
 8003e94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e96:	e127      	b.n	80040e8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003e98:	2201      	movs	r2, #1
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	69fa      	ldr	r2, [r7, #28]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	f040 8116 	bne.w	80040e2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2b12      	cmp	r3, #18
 8003ebc:	d034      	beq.n	8003f28 <HAL_GPIO_Init+0xa4>
 8003ebe:	2b12      	cmp	r3, #18
 8003ec0:	d80d      	bhi.n	8003ede <HAL_GPIO_Init+0x5a>
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d02b      	beq.n	8003f1e <HAL_GPIO_Init+0x9a>
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d804      	bhi.n	8003ed4 <HAL_GPIO_Init+0x50>
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d031      	beq.n	8003f32 <HAL_GPIO_Init+0xae>
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d01c      	beq.n	8003f0c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003ed2:	e048      	b.n	8003f66 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003ed4:	2b03      	cmp	r3, #3
 8003ed6:	d043      	beq.n	8003f60 <HAL_GPIO_Init+0xdc>
 8003ed8:	2b11      	cmp	r3, #17
 8003eda:	d01b      	beq.n	8003f14 <HAL_GPIO_Init+0x90>
          break;
 8003edc:	e043      	b.n	8003f66 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003ede:	4a89      	ldr	r2, [pc, #548]	; (8004104 <HAL_GPIO_Init+0x280>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d026      	beq.n	8003f32 <HAL_GPIO_Init+0xae>
 8003ee4:	4a87      	ldr	r2, [pc, #540]	; (8004104 <HAL_GPIO_Init+0x280>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d806      	bhi.n	8003ef8 <HAL_GPIO_Init+0x74>
 8003eea:	4a87      	ldr	r2, [pc, #540]	; (8004108 <HAL_GPIO_Init+0x284>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d020      	beq.n	8003f32 <HAL_GPIO_Init+0xae>
 8003ef0:	4a86      	ldr	r2, [pc, #536]	; (800410c <HAL_GPIO_Init+0x288>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d01d      	beq.n	8003f32 <HAL_GPIO_Init+0xae>
          break;
 8003ef6:	e036      	b.n	8003f66 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003ef8:	4a85      	ldr	r2, [pc, #532]	; (8004110 <HAL_GPIO_Init+0x28c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d019      	beq.n	8003f32 <HAL_GPIO_Init+0xae>
 8003efe:	4a85      	ldr	r2, [pc, #532]	; (8004114 <HAL_GPIO_Init+0x290>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d016      	beq.n	8003f32 <HAL_GPIO_Init+0xae>
 8003f04:	4a84      	ldr	r2, [pc, #528]	; (8004118 <HAL_GPIO_Init+0x294>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d013      	beq.n	8003f32 <HAL_GPIO_Init+0xae>
          break;
 8003f0a:	e02c      	b.n	8003f66 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	623b      	str	r3, [r7, #32]
          break;
 8003f12:	e028      	b.n	8003f66 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	3304      	adds	r3, #4
 8003f1a:	623b      	str	r3, [r7, #32]
          break;
 8003f1c:	e023      	b.n	8003f66 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	3308      	adds	r3, #8
 8003f24:	623b      	str	r3, [r7, #32]
          break;
 8003f26:	e01e      	b.n	8003f66 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	330c      	adds	r3, #12
 8003f2e:	623b      	str	r3, [r7, #32]
          break;
 8003f30:	e019      	b.n	8003f66 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d102      	bne.n	8003f40 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003f3a:	2304      	movs	r3, #4
 8003f3c:	623b      	str	r3, [r7, #32]
          break;
 8003f3e:	e012      	b.n	8003f66 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d105      	bne.n	8003f54 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f48:	2308      	movs	r3, #8
 8003f4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	69fa      	ldr	r2, [r7, #28]
 8003f50:	611a      	str	r2, [r3, #16]
          break;
 8003f52:	e008      	b.n	8003f66 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f54:	2308      	movs	r3, #8
 8003f56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	69fa      	ldr	r2, [r7, #28]
 8003f5c:	615a      	str	r2, [r3, #20]
          break;
 8003f5e:	e002      	b.n	8003f66 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003f60:	2300      	movs	r3, #0
 8003f62:	623b      	str	r3, [r7, #32]
          break;
 8003f64:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	2bff      	cmp	r3, #255	; 0xff
 8003f6a:	d801      	bhi.n	8003f70 <HAL_GPIO_Init+0xec>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	e001      	b.n	8003f74 <HAL_GPIO_Init+0xf0>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	3304      	adds	r3, #4
 8003f74:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	2bff      	cmp	r3, #255	; 0xff
 8003f7a:	d802      	bhi.n	8003f82 <HAL_GPIO_Init+0xfe>
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	e002      	b.n	8003f88 <HAL_GPIO_Init+0x104>
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	3b08      	subs	r3, #8
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	210f      	movs	r1, #15
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	fa01 f303 	lsl.w	r3, r1, r3
 8003f96:	43db      	mvns	r3, r3
 8003f98:	401a      	ands	r2, r3
 8003f9a:	6a39      	ldr	r1, [r7, #32]
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 8096 	beq.w	80040e2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003fb6:	4b59      	ldr	r3, [pc, #356]	; (800411c <HAL_GPIO_Init+0x298>)
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	4a58      	ldr	r2, [pc, #352]	; (800411c <HAL_GPIO_Init+0x298>)
 8003fbc:	f043 0301 	orr.w	r3, r3, #1
 8003fc0:	6193      	str	r3, [r2, #24]
 8003fc2:	4b56      	ldr	r3, [pc, #344]	; (800411c <HAL_GPIO_Init+0x298>)
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	60bb      	str	r3, [r7, #8]
 8003fcc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003fce:	4a54      	ldr	r2, [pc, #336]	; (8004120 <HAL_GPIO_Init+0x29c>)
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	089b      	lsrs	r3, r3, #2
 8003fd4:	3302      	adds	r3, #2
 8003fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fda:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	f003 0303 	and.w	r3, r3, #3
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	220f      	movs	r2, #15
 8003fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fea:	43db      	mvns	r3, r3
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a4b      	ldr	r2, [pc, #300]	; (8004124 <HAL_GPIO_Init+0x2a0>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d013      	beq.n	8004022 <HAL_GPIO_Init+0x19e>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a4a      	ldr	r2, [pc, #296]	; (8004128 <HAL_GPIO_Init+0x2a4>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d00d      	beq.n	800401e <HAL_GPIO_Init+0x19a>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a49      	ldr	r2, [pc, #292]	; (800412c <HAL_GPIO_Init+0x2a8>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d007      	beq.n	800401a <HAL_GPIO_Init+0x196>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a48      	ldr	r2, [pc, #288]	; (8004130 <HAL_GPIO_Init+0x2ac>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d101      	bne.n	8004016 <HAL_GPIO_Init+0x192>
 8004012:	2303      	movs	r3, #3
 8004014:	e006      	b.n	8004024 <HAL_GPIO_Init+0x1a0>
 8004016:	2304      	movs	r3, #4
 8004018:	e004      	b.n	8004024 <HAL_GPIO_Init+0x1a0>
 800401a:	2302      	movs	r3, #2
 800401c:	e002      	b.n	8004024 <HAL_GPIO_Init+0x1a0>
 800401e:	2301      	movs	r3, #1
 8004020:	e000      	b.n	8004024 <HAL_GPIO_Init+0x1a0>
 8004022:	2300      	movs	r3, #0
 8004024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004026:	f002 0203 	and.w	r2, r2, #3
 800402a:	0092      	lsls	r2, r2, #2
 800402c:	4093      	lsls	r3, r2
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	4313      	orrs	r3, r2
 8004032:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004034:	493a      	ldr	r1, [pc, #232]	; (8004120 <HAL_GPIO_Init+0x29c>)
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	089b      	lsrs	r3, r3, #2
 800403a:	3302      	adds	r3, #2
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d006      	beq.n	800405c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800404e:	4b39      	ldr	r3, [pc, #228]	; (8004134 <HAL_GPIO_Init+0x2b0>)
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	4938      	ldr	r1, [pc, #224]	; (8004134 <HAL_GPIO_Init+0x2b0>)
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	4313      	orrs	r3, r2
 8004058:	600b      	str	r3, [r1, #0]
 800405a:	e006      	b.n	800406a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800405c:	4b35      	ldr	r3, [pc, #212]	; (8004134 <HAL_GPIO_Init+0x2b0>)
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	43db      	mvns	r3, r3
 8004064:	4933      	ldr	r1, [pc, #204]	; (8004134 <HAL_GPIO_Init+0x2b0>)
 8004066:	4013      	ands	r3, r2
 8004068:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d006      	beq.n	8004084 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004076:	4b2f      	ldr	r3, [pc, #188]	; (8004134 <HAL_GPIO_Init+0x2b0>)
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	492e      	ldr	r1, [pc, #184]	; (8004134 <HAL_GPIO_Init+0x2b0>)
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	4313      	orrs	r3, r2
 8004080:	604b      	str	r3, [r1, #4]
 8004082:	e006      	b.n	8004092 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004084:	4b2b      	ldr	r3, [pc, #172]	; (8004134 <HAL_GPIO_Init+0x2b0>)
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	43db      	mvns	r3, r3
 800408c:	4929      	ldr	r1, [pc, #164]	; (8004134 <HAL_GPIO_Init+0x2b0>)
 800408e:	4013      	ands	r3, r2
 8004090:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d006      	beq.n	80040ac <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800409e:	4b25      	ldr	r3, [pc, #148]	; (8004134 <HAL_GPIO_Init+0x2b0>)
 80040a0:	689a      	ldr	r2, [r3, #8]
 80040a2:	4924      	ldr	r1, [pc, #144]	; (8004134 <HAL_GPIO_Init+0x2b0>)
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	608b      	str	r3, [r1, #8]
 80040aa:	e006      	b.n	80040ba <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80040ac:	4b21      	ldr	r3, [pc, #132]	; (8004134 <HAL_GPIO_Init+0x2b0>)
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	43db      	mvns	r3, r3
 80040b4:	491f      	ldr	r1, [pc, #124]	; (8004134 <HAL_GPIO_Init+0x2b0>)
 80040b6:	4013      	ands	r3, r2
 80040b8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d006      	beq.n	80040d4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80040c6:	4b1b      	ldr	r3, [pc, #108]	; (8004134 <HAL_GPIO_Init+0x2b0>)
 80040c8:	68da      	ldr	r2, [r3, #12]
 80040ca:	491a      	ldr	r1, [pc, #104]	; (8004134 <HAL_GPIO_Init+0x2b0>)
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	60cb      	str	r3, [r1, #12]
 80040d2:	e006      	b.n	80040e2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80040d4:	4b17      	ldr	r3, [pc, #92]	; (8004134 <HAL_GPIO_Init+0x2b0>)
 80040d6:	68da      	ldr	r2, [r3, #12]
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	43db      	mvns	r3, r3
 80040dc:	4915      	ldr	r1, [pc, #84]	; (8004134 <HAL_GPIO_Init+0x2b0>)
 80040de:	4013      	ands	r3, r2
 80040e0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	3301      	adds	r3, #1
 80040e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	fa22 f303 	lsr.w	r3, r2, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f47f aed0 	bne.w	8003e98 <HAL_GPIO_Init+0x14>
  }
}
 80040f8:	bf00      	nop
 80040fa:	372c      	adds	r7, #44	; 0x2c
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bc80      	pop	{r7}
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	10210000 	.word	0x10210000
 8004108:	10110000 	.word	0x10110000
 800410c:	10120000 	.word	0x10120000
 8004110:	10310000 	.word	0x10310000
 8004114:	10320000 	.word	0x10320000
 8004118:	10220000 	.word	0x10220000
 800411c:	40021000 	.word	0x40021000
 8004120:	40010000 	.word	0x40010000
 8004124:	40010800 	.word	0x40010800
 8004128:	40010c00 	.word	0x40010c00
 800412c:	40011000 	.word	0x40011000
 8004130:	40011400 	.word	0x40011400
 8004134:	40010400 	.word	0x40010400

08004138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	460b      	mov	r3, r1
 8004142:	807b      	strh	r3, [r7, #2]
 8004144:	4613      	mov	r3, r2
 8004146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004148:	787b      	ldrb	r3, [r7, #1]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800414e:	887a      	ldrh	r2, [r7, #2]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004154:	e003      	b.n	800415e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004156:	887b      	ldrh	r3, [r7, #2]
 8004158:	041a      	lsls	r2, r3, #16
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	611a      	str	r2, [r3, #16]
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	bc80      	pop	{r7}
 8004166:	4770      	bx	lr

08004168 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	4603      	mov	r3, r0
 8004170:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004172:	4b08      	ldr	r3, [pc, #32]	; (8004194 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004174:	695a      	ldr	r2, [r3, #20]
 8004176:	88fb      	ldrh	r3, [r7, #6]
 8004178:	4013      	ands	r3, r2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d006      	beq.n	800418c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800417e:	4a05      	ldr	r2, [pc, #20]	; (8004194 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004180:	88fb      	ldrh	r3, [r7, #6]
 8004182:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004184:	88fb      	ldrh	r3, [r7, #6]
 8004186:	4618      	mov	r0, r3
 8004188:	f7fc fe98 	bl	8000ebc <HAL_GPIO_EXTI_Callback>
  }
}
 800418c:	bf00      	nop
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40010400 	.word	0x40010400

08004198 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e26c      	b.n	8004684 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f000 8087 	beq.w	80042c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041b8:	4b92      	ldr	r3, [pc, #584]	; (8004404 <HAL_RCC_OscConfig+0x26c>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f003 030c 	and.w	r3, r3, #12
 80041c0:	2b04      	cmp	r3, #4
 80041c2:	d00c      	beq.n	80041de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80041c4:	4b8f      	ldr	r3, [pc, #572]	; (8004404 <HAL_RCC_OscConfig+0x26c>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f003 030c 	and.w	r3, r3, #12
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	d112      	bne.n	80041f6 <HAL_RCC_OscConfig+0x5e>
 80041d0:	4b8c      	ldr	r3, [pc, #560]	; (8004404 <HAL_RCC_OscConfig+0x26c>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041dc:	d10b      	bne.n	80041f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041de:	4b89      	ldr	r3, [pc, #548]	; (8004404 <HAL_RCC_OscConfig+0x26c>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d06c      	beq.n	80042c4 <HAL_RCC_OscConfig+0x12c>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d168      	bne.n	80042c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e246      	b.n	8004684 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041fe:	d106      	bne.n	800420e <HAL_RCC_OscConfig+0x76>
 8004200:	4b80      	ldr	r3, [pc, #512]	; (8004404 <HAL_RCC_OscConfig+0x26c>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a7f      	ldr	r2, [pc, #508]	; (8004404 <HAL_RCC_OscConfig+0x26c>)
 8004206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800420a:	6013      	str	r3, [r2, #0]
 800420c:	e02e      	b.n	800426c <HAL_RCC_OscConfig+0xd4>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10c      	bne.n	8004230 <HAL_RCC_OscConfig+0x98>
 8004216:	4b7b      	ldr	r3, [pc, #492]	; (8004404 <HAL_RCC_OscConfig+0x26c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a7a      	ldr	r2, [pc, #488]	; (8004404 <HAL_RCC_OscConfig+0x26c>)
 800421c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004220:	6013      	str	r3, [r2, #0]
 8004222:	4b78      	ldr	r3, [pc, #480]	; (8004404 <HAL_RCC_OscConfig+0x26c>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a77      	ldr	r2, [pc, #476]	; (8004404 <HAL_RCC_OscConfig+0x26c>)
 8004228:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800422c:	6013      	str	r3, [r2, #0]
 800422e:	e01d      	b.n	800426c <HAL_RCC_OscConfig+0xd4>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004238:	d10c      	bne.n	8004254 <HAL_RCC_OscConfig+0xbc>
 800423a:	4b72      	ldr	r3, [pc, #456]	; (8004404 <HAL_RCC_OscConfig+0x26c>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a71      	ldr	r2, [pc, #452]	; (8004404 <HAL_RCC_OscConfig+0x26c>)
 8004240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	4b6f      	ldr	r3, [pc, #444]	; (8004404 <HAL_RCC_OscConfig+0x26c>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a6e      	ldr	r2, [pc, #440]	; (8004404 <HAL_RCC_OscConfig+0x26c>)
 800424c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004250:	6013      	str	r3, [r2, #0]
 8004252:	e00b      	b.n	800426c <HAL_RCC_OscConfig+0xd4>
 8004254:	4b6b      	ldr	r3, [pc, #428]	; (8004404 <HAL_RCC_OscConfig+0x26c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a6a      	ldr	r2, [pc, #424]	; (8004404 <HAL_RCC_OscConfig+0x26c>)
 800425a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800425e:	6013      	str	r3, [r2, #0]
 8004260:	4b68      	ldr	r3, [pc, #416]	; (8004404 <HAL_RCC_OscConfig+0x26c>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a67      	ldr	r2, [pc, #412]	; (8004404 <HAL_RCC_OscConfig+0x26c>)
 8004266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800426a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d013      	beq.n	800429c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004274:	f7fe f800 	bl	8002278 <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800427c:	f7fd fffc 	bl	8002278 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b64      	cmp	r3, #100	; 0x64
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e1fa      	b.n	8004684 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800428e:	4b5d      	ldr	r3, [pc, #372]	; (8004404 <HAL_RCC_OscConfig+0x26c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d0f0      	beq.n	800427c <HAL_RCC_OscConfig+0xe4>
 800429a:	e014      	b.n	80042c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800429c:	f7fd ffec 	bl	8002278 <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042a4:	f7fd ffe8 	bl	8002278 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b64      	cmp	r3, #100	; 0x64
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e1e6      	b.n	8004684 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042b6:	4b53      	ldr	r3, [pc, #332]	; (8004404 <HAL_RCC_OscConfig+0x26c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1f0      	bne.n	80042a4 <HAL_RCC_OscConfig+0x10c>
 80042c2:	e000      	b.n	80042c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d063      	beq.n	800439a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042d2:	4b4c      	ldr	r3, [pc, #304]	; (8004404 <HAL_RCC_OscConfig+0x26c>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f003 030c 	and.w	r3, r3, #12
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00b      	beq.n	80042f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80042de:	4b49      	ldr	r3, [pc, #292]	; (8004404 <HAL_RCC_OscConfig+0x26c>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f003 030c 	and.w	r3, r3, #12
 80042e6:	2b08      	cmp	r3, #8
 80042e8:	d11c      	bne.n	8004324 <HAL_RCC_OscConfig+0x18c>
 80042ea:	4b46      	ldr	r3, [pc, #280]	; (8004404 <HAL_RCC_OscConfig+0x26c>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d116      	bne.n	8004324 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042f6:	4b43      	ldr	r3, [pc, #268]	; (8004404 <HAL_RCC_OscConfig+0x26c>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d005      	beq.n	800430e <HAL_RCC_OscConfig+0x176>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d001      	beq.n	800430e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e1ba      	b.n	8004684 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800430e:	4b3d      	ldr	r3, [pc, #244]	; (8004404 <HAL_RCC_OscConfig+0x26c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	4939      	ldr	r1, [pc, #228]	; (8004404 <HAL_RCC_OscConfig+0x26c>)
 800431e:	4313      	orrs	r3, r2
 8004320:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004322:	e03a      	b.n	800439a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d020      	beq.n	800436e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800432c:	4b36      	ldr	r3, [pc, #216]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 800432e:	2201      	movs	r2, #1
 8004330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004332:	f7fd ffa1 	bl	8002278 <HAL_GetTick>
 8004336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004338:	e008      	b.n	800434c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800433a:	f7fd ff9d 	bl	8002278 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d901      	bls.n	800434c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e19b      	b.n	8004684 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800434c:	4b2d      	ldr	r3, [pc, #180]	; (8004404 <HAL_RCC_OscConfig+0x26c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0f0      	beq.n	800433a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004358:	4b2a      	ldr	r3, [pc, #168]	; (8004404 <HAL_RCC_OscConfig+0x26c>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	4927      	ldr	r1, [pc, #156]	; (8004404 <HAL_RCC_OscConfig+0x26c>)
 8004368:	4313      	orrs	r3, r2
 800436a:	600b      	str	r3, [r1, #0]
 800436c:	e015      	b.n	800439a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800436e:	4b26      	ldr	r3, [pc, #152]	; (8004408 <HAL_RCC_OscConfig+0x270>)
 8004370:	2200      	movs	r2, #0
 8004372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004374:	f7fd ff80 	bl	8002278 <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800437c:	f7fd ff7c 	bl	8002278 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e17a      	b.n	8004684 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800438e:	4b1d      	ldr	r3, [pc, #116]	; (8004404 <HAL_RCC_OscConfig+0x26c>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1f0      	bne.n	800437c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d03a      	beq.n	800441c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d019      	beq.n	80043e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043ae:	4b17      	ldr	r3, [pc, #92]	; (800440c <HAL_RCC_OscConfig+0x274>)
 80043b0:	2201      	movs	r2, #1
 80043b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043b4:	f7fd ff60 	bl	8002278 <HAL_GetTick>
 80043b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043bc:	f7fd ff5c 	bl	8002278 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e15a      	b.n	8004684 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ce:	4b0d      	ldr	r3, [pc, #52]	; (8004404 <HAL_RCC_OscConfig+0x26c>)
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0f0      	beq.n	80043bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80043da:	2001      	movs	r0, #1
 80043dc:	f000 fb0a 	bl	80049f4 <RCC_Delay>
 80043e0:	e01c      	b.n	800441c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043e2:	4b0a      	ldr	r3, [pc, #40]	; (800440c <HAL_RCC_OscConfig+0x274>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043e8:	f7fd ff46 	bl	8002278 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043ee:	e00f      	b.n	8004410 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043f0:	f7fd ff42 	bl	8002278 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d908      	bls.n	8004410 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e140      	b.n	8004684 <HAL_RCC_OscConfig+0x4ec>
 8004402:	bf00      	nop
 8004404:	40021000 	.word	0x40021000
 8004408:	42420000 	.word	0x42420000
 800440c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004410:	4b9e      	ldr	r3, [pc, #632]	; (800468c <HAL_RCC_OscConfig+0x4f4>)
 8004412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1e9      	bne.n	80043f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0304 	and.w	r3, r3, #4
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 80a6 	beq.w	8004576 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800442a:	2300      	movs	r3, #0
 800442c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800442e:	4b97      	ldr	r3, [pc, #604]	; (800468c <HAL_RCC_OscConfig+0x4f4>)
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10d      	bne.n	8004456 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800443a:	4b94      	ldr	r3, [pc, #592]	; (800468c <HAL_RCC_OscConfig+0x4f4>)
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	4a93      	ldr	r2, [pc, #588]	; (800468c <HAL_RCC_OscConfig+0x4f4>)
 8004440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004444:	61d3      	str	r3, [r2, #28]
 8004446:	4b91      	ldr	r3, [pc, #580]	; (800468c <HAL_RCC_OscConfig+0x4f4>)
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800444e:	60bb      	str	r3, [r7, #8]
 8004450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004452:	2301      	movs	r3, #1
 8004454:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004456:	4b8e      	ldr	r3, [pc, #568]	; (8004690 <HAL_RCC_OscConfig+0x4f8>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445e:	2b00      	cmp	r3, #0
 8004460:	d118      	bne.n	8004494 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004462:	4b8b      	ldr	r3, [pc, #556]	; (8004690 <HAL_RCC_OscConfig+0x4f8>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a8a      	ldr	r2, [pc, #552]	; (8004690 <HAL_RCC_OscConfig+0x4f8>)
 8004468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800446c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800446e:	f7fd ff03 	bl	8002278 <HAL_GetTick>
 8004472:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004474:	e008      	b.n	8004488 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004476:	f7fd feff 	bl	8002278 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b64      	cmp	r3, #100	; 0x64
 8004482:	d901      	bls.n	8004488 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e0fd      	b.n	8004684 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004488:	4b81      	ldr	r3, [pc, #516]	; (8004690 <HAL_RCC_OscConfig+0x4f8>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004490:	2b00      	cmp	r3, #0
 8004492:	d0f0      	beq.n	8004476 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d106      	bne.n	80044aa <HAL_RCC_OscConfig+0x312>
 800449c:	4b7b      	ldr	r3, [pc, #492]	; (800468c <HAL_RCC_OscConfig+0x4f4>)
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	4a7a      	ldr	r2, [pc, #488]	; (800468c <HAL_RCC_OscConfig+0x4f4>)
 80044a2:	f043 0301 	orr.w	r3, r3, #1
 80044a6:	6213      	str	r3, [r2, #32]
 80044a8:	e02d      	b.n	8004506 <HAL_RCC_OscConfig+0x36e>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10c      	bne.n	80044cc <HAL_RCC_OscConfig+0x334>
 80044b2:	4b76      	ldr	r3, [pc, #472]	; (800468c <HAL_RCC_OscConfig+0x4f4>)
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	4a75      	ldr	r2, [pc, #468]	; (800468c <HAL_RCC_OscConfig+0x4f4>)
 80044b8:	f023 0301 	bic.w	r3, r3, #1
 80044bc:	6213      	str	r3, [r2, #32]
 80044be:	4b73      	ldr	r3, [pc, #460]	; (800468c <HAL_RCC_OscConfig+0x4f4>)
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	4a72      	ldr	r2, [pc, #456]	; (800468c <HAL_RCC_OscConfig+0x4f4>)
 80044c4:	f023 0304 	bic.w	r3, r3, #4
 80044c8:	6213      	str	r3, [r2, #32]
 80044ca:	e01c      	b.n	8004506 <HAL_RCC_OscConfig+0x36e>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	2b05      	cmp	r3, #5
 80044d2:	d10c      	bne.n	80044ee <HAL_RCC_OscConfig+0x356>
 80044d4:	4b6d      	ldr	r3, [pc, #436]	; (800468c <HAL_RCC_OscConfig+0x4f4>)
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	4a6c      	ldr	r2, [pc, #432]	; (800468c <HAL_RCC_OscConfig+0x4f4>)
 80044da:	f043 0304 	orr.w	r3, r3, #4
 80044de:	6213      	str	r3, [r2, #32]
 80044e0:	4b6a      	ldr	r3, [pc, #424]	; (800468c <HAL_RCC_OscConfig+0x4f4>)
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	4a69      	ldr	r2, [pc, #420]	; (800468c <HAL_RCC_OscConfig+0x4f4>)
 80044e6:	f043 0301 	orr.w	r3, r3, #1
 80044ea:	6213      	str	r3, [r2, #32]
 80044ec:	e00b      	b.n	8004506 <HAL_RCC_OscConfig+0x36e>
 80044ee:	4b67      	ldr	r3, [pc, #412]	; (800468c <HAL_RCC_OscConfig+0x4f4>)
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	4a66      	ldr	r2, [pc, #408]	; (800468c <HAL_RCC_OscConfig+0x4f4>)
 80044f4:	f023 0301 	bic.w	r3, r3, #1
 80044f8:	6213      	str	r3, [r2, #32]
 80044fa:	4b64      	ldr	r3, [pc, #400]	; (800468c <HAL_RCC_OscConfig+0x4f4>)
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	4a63      	ldr	r2, [pc, #396]	; (800468c <HAL_RCC_OscConfig+0x4f4>)
 8004500:	f023 0304 	bic.w	r3, r3, #4
 8004504:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d015      	beq.n	800453a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800450e:	f7fd feb3 	bl	8002278 <HAL_GetTick>
 8004512:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004514:	e00a      	b.n	800452c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004516:	f7fd feaf 	bl	8002278 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	f241 3288 	movw	r2, #5000	; 0x1388
 8004524:	4293      	cmp	r3, r2
 8004526:	d901      	bls.n	800452c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e0ab      	b.n	8004684 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800452c:	4b57      	ldr	r3, [pc, #348]	; (800468c <HAL_RCC_OscConfig+0x4f4>)
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d0ee      	beq.n	8004516 <HAL_RCC_OscConfig+0x37e>
 8004538:	e014      	b.n	8004564 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800453a:	f7fd fe9d 	bl	8002278 <HAL_GetTick>
 800453e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004540:	e00a      	b.n	8004558 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004542:	f7fd fe99 	bl	8002278 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004550:	4293      	cmp	r3, r2
 8004552:	d901      	bls.n	8004558 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e095      	b.n	8004684 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004558:	4b4c      	ldr	r3, [pc, #304]	; (800468c <HAL_RCC_OscConfig+0x4f4>)
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	f003 0302 	and.w	r3, r3, #2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1ee      	bne.n	8004542 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004564:	7dfb      	ldrb	r3, [r7, #23]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d105      	bne.n	8004576 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800456a:	4b48      	ldr	r3, [pc, #288]	; (800468c <HAL_RCC_OscConfig+0x4f4>)
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	4a47      	ldr	r2, [pc, #284]	; (800468c <HAL_RCC_OscConfig+0x4f4>)
 8004570:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004574:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 8081 	beq.w	8004682 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004580:	4b42      	ldr	r3, [pc, #264]	; (800468c <HAL_RCC_OscConfig+0x4f4>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f003 030c 	and.w	r3, r3, #12
 8004588:	2b08      	cmp	r3, #8
 800458a:	d061      	beq.n	8004650 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	69db      	ldr	r3, [r3, #28]
 8004590:	2b02      	cmp	r3, #2
 8004592:	d146      	bne.n	8004622 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004594:	4b3f      	ldr	r3, [pc, #252]	; (8004694 <HAL_RCC_OscConfig+0x4fc>)
 8004596:	2200      	movs	r2, #0
 8004598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800459a:	f7fd fe6d 	bl	8002278 <HAL_GetTick>
 800459e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045a0:	e008      	b.n	80045b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a2:	f7fd fe69 	bl	8002278 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d901      	bls.n	80045b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e067      	b.n	8004684 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045b4:	4b35      	ldr	r3, [pc, #212]	; (800468c <HAL_RCC_OscConfig+0x4f4>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1f0      	bne.n	80045a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c8:	d108      	bne.n	80045dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80045ca:	4b30      	ldr	r3, [pc, #192]	; (800468c <HAL_RCC_OscConfig+0x4f4>)
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	492d      	ldr	r1, [pc, #180]	; (800468c <HAL_RCC_OscConfig+0x4f4>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045dc:	4b2b      	ldr	r3, [pc, #172]	; (800468c <HAL_RCC_OscConfig+0x4f4>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a19      	ldr	r1, [r3, #32]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	430b      	orrs	r3, r1
 80045ee:	4927      	ldr	r1, [pc, #156]	; (800468c <HAL_RCC_OscConfig+0x4f4>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045f4:	4b27      	ldr	r3, [pc, #156]	; (8004694 <HAL_RCC_OscConfig+0x4fc>)
 80045f6:	2201      	movs	r2, #1
 80045f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045fa:	f7fd fe3d 	bl	8002278 <HAL_GetTick>
 80045fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004600:	e008      	b.n	8004614 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004602:	f7fd fe39 	bl	8002278 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d901      	bls.n	8004614 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e037      	b.n	8004684 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004614:	4b1d      	ldr	r3, [pc, #116]	; (800468c <HAL_RCC_OscConfig+0x4f4>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d0f0      	beq.n	8004602 <HAL_RCC_OscConfig+0x46a>
 8004620:	e02f      	b.n	8004682 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004622:	4b1c      	ldr	r3, [pc, #112]	; (8004694 <HAL_RCC_OscConfig+0x4fc>)
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004628:	f7fd fe26 	bl	8002278 <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004630:	f7fd fe22 	bl	8002278 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b02      	cmp	r3, #2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e020      	b.n	8004684 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004642:	4b12      	ldr	r3, [pc, #72]	; (800468c <HAL_RCC_OscConfig+0x4f4>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1f0      	bne.n	8004630 <HAL_RCC_OscConfig+0x498>
 800464e:	e018      	b.n	8004682 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	69db      	ldr	r3, [r3, #28]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d101      	bne.n	800465c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e013      	b.n	8004684 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800465c:	4b0b      	ldr	r3, [pc, #44]	; (800468c <HAL_RCC_OscConfig+0x4f4>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	429a      	cmp	r2, r3
 800466e:	d106      	bne.n	800467e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800467a:	429a      	cmp	r2, r3
 800467c:	d001      	beq.n	8004682 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e000      	b.n	8004684 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3718      	adds	r7, #24
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	40021000 	.word	0x40021000
 8004690:	40007000 	.word	0x40007000
 8004694:	42420060 	.word	0x42420060

08004698 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e0d0      	b.n	800484e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046ac:	4b6a      	ldr	r3, [pc, #424]	; (8004858 <HAL_RCC_ClockConfig+0x1c0>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d910      	bls.n	80046dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ba:	4b67      	ldr	r3, [pc, #412]	; (8004858 <HAL_RCC_ClockConfig+0x1c0>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f023 0207 	bic.w	r2, r3, #7
 80046c2:	4965      	ldr	r1, [pc, #404]	; (8004858 <HAL_RCC_ClockConfig+0x1c0>)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ca:	4b63      	ldr	r3, [pc, #396]	; (8004858 <HAL_RCC_ClockConfig+0x1c0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0307 	and.w	r3, r3, #7
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d001      	beq.n	80046dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e0b8      	b.n	800484e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d020      	beq.n	800472a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0304 	and.w	r3, r3, #4
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d005      	beq.n	8004700 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046f4:	4b59      	ldr	r3, [pc, #356]	; (800485c <HAL_RCC_ClockConfig+0x1c4>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	4a58      	ldr	r2, [pc, #352]	; (800485c <HAL_RCC_ClockConfig+0x1c4>)
 80046fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0308 	and.w	r3, r3, #8
 8004708:	2b00      	cmp	r3, #0
 800470a:	d005      	beq.n	8004718 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800470c:	4b53      	ldr	r3, [pc, #332]	; (800485c <HAL_RCC_ClockConfig+0x1c4>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	4a52      	ldr	r2, [pc, #328]	; (800485c <HAL_RCC_ClockConfig+0x1c4>)
 8004712:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004716:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004718:	4b50      	ldr	r3, [pc, #320]	; (800485c <HAL_RCC_ClockConfig+0x1c4>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	494d      	ldr	r1, [pc, #308]	; (800485c <HAL_RCC_ClockConfig+0x1c4>)
 8004726:	4313      	orrs	r3, r2
 8004728:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d040      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d107      	bne.n	800474e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800473e:	4b47      	ldr	r3, [pc, #284]	; (800485c <HAL_RCC_ClockConfig+0x1c4>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d115      	bne.n	8004776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e07f      	b.n	800484e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	2b02      	cmp	r3, #2
 8004754:	d107      	bne.n	8004766 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004756:	4b41      	ldr	r3, [pc, #260]	; (800485c <HAL_RCC_ClockConfig+0x1c4>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d109      	bne.n	8004776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e073      	b.n	800484e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004766:	4b3d      	ldr	r3, [pc, #244]	; (800485c <HAL_RCC_ClockConfig+0x1c4>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e06b      	b.n	800484e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004776:	4b39      	ldr	r3, [pc, #228]	; (800485c <HAL_RCC_ClockConfig+0x1c4>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f023 0203 	bic.w	r2, r3, #3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	4936      	ldr	r1, [pc, #216]	; (800485c <HAL_RCC_ClockConfig+0x1c4>)
 8004784:	4313      	orrs	r3, r2
 8004786:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004788:	f7fd fd76 	bl	8002278 <HAL_GetTick>
 800478c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800478e:	e00a      	b.n	80047a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004790:	f7fd fd72 	bl	8002278 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	f241 3288 	movw	r2, #5000	; 0x1388
 800479e:	4293      	cmp	r3, r2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e053      	b.n	800484e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047a6:	4b2d      	ldr	r3, [pc, #180]	; (800485c <HAL_RCC_ClockConfig+0x1c4>)
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f003 020c 	and.w	r2, r3, #12
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d1eb      	bne.n	8004790 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047b8:	4b27      	ldr	r3, [pc, #156]	; (8004858 <HAL_RCC_ClockConfig+0x1c0>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d210      	bcs.n	80047e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c6:	4b24      	ldr	r3, [pc, #144]	; (8004858 <HAL_RCC_ClockConfig+0x1c0>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f023 0207 	bic.w	r2, r3, #7
 80047ce:	4922      	ldr	r1, [pc, #136]	; (8004858 <HAL_RCC_ClockConfig+0x1c0>)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d6:	4b20      	ldr	r3, [pc, #128]	; (8004858 <HAL_RCC_ClockConfig+0x1c0>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d001      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e032      	b.n	800484e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0304 	and.w	r3, r3, #4
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d008      	beq.n	8004806 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047f4:	4b19      	ldr	r3, [pc, #100]	; (800485c <HAL_RCC_ClockConfig+0x1c4>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	4916      	ldr	r1, [pc, #88]	; (800485c <HAL_RCC_ClockConfig+0x1c4>)
 8004802:	4313      	orrs	r3, r2
 8004804:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0308 	and.w	r3, r3, #8
 800480e:	2b00      	cmp	r3, #0
 8004810:	d009      	beq.n	8004826 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004812:	4b12      	ldr	r3, [pc, #72]	; (800485c <HAL_RCC_ClockConfig+0x1c4>)
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	490e      	ldr	r1, [pc, #56]	; (800485c <HAL_RCC_ClockConfig+0x1c4>)
 8004822:	4313      	orrs	r3, r2
 8004824:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004826:	f000 f821 	bl	800486c <HAL_RCC_GetSysClockFreq>
 800482a:	4601      	mov	r1, r0
 800482c:	4b0b      	ldr	r3, [pc, #44]	; (800485c <HAL_RCC_ClockConfig+0x1c4>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	091b      	lsrs	r3, r3, #4
 8004832:	f003 030f 	and.w	r3, r3, #15
 8004836:	4a0a      	ldr	r2, [pc, #40]	; (8004860 <HAL_RCC_ClockConfig+0x1c8>)
 8004838:	5cd3      	ldrb	r3, [r2, r3]
 800483a:	fa21 f303 	lsr.w	r3, r1, r3
 800483e:	4a09      	ldr	r2, [pc, #36]	; (8004864 <HAL_RCC_ClockConfig+0x1cc>)
 8004840:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004842:	4b09      	ldr	r3, [pc, #36]	; (8004868 <HAL_RCC_ClockConfig+0x1d0>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4618      	mov	r0, r3
 8004848:	f7fd fbce 	bl	8001fe8 <HAL_InitTick>

  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	40022000 	.word	0x40022000
 800485c:	40021000 	.word	0x40021000
 8004860:	0800859c 	.word	0x0800859c
 8004864:	20000018 	.word	0x20000018
 8004868:	2000001c 	.word	0x2000001c

0800486c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800486c:	b490      	push	{r4, r7}
 800486e:	b08a      	sub	sp, #40	; 0x28
 8004870:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004872:	4b2a      	ldr	r3, [pc, #168]	; (800491c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004874:	1d3c      	adds	r4, r7, #4
 8004876:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004878:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800487c:	4b28      	ldr	r3, [pc, #160]	; (8004920 <HAL_RCC_GetSysClockFreq+0xb4>)
 800487e:	881b      	ldrh	r3, [r3, #0]
 8004880:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004882:	2300      	movs	r3, #0
 8004884:	61fb      	str	r3, [r7, #28]
 8004886:	2300      	movs	r3, #0
 8004888:	61bb      	str	r3, [r7, #24]
 800488a:	2300      	movs	r3, #0
 800488c:	627b      	str	r3, [r7, #36]	; 0x24
 800488e:	2300      	movs	r3, #0
 8004890:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004892:	2300      	movs	r3, #0
 8004894:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004896:	4b23      	ldr	r3, [pc, #140]	; (8004924 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	f003 030c 	and.w	r3, r3, #12
 80048a2:	2b04      	cmp	r3, #4
 80048a4:	d002      	beq.n	80048ac <HAL_RCC_GetSysClockFreq+0x40>
 80048a6:	2b08      	cmp	r3, #8
 80048a8:	d003      	beq.n	80048b2 <HAL_RCC_GetSysClockFreq+0x46>
 80048aa:	e02d      	b.n	8004908 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80048ac:	4b1e      	ldr	r3, [pc, #120]	; (8004928 <HAL_RCC_GetSysClockFreq+0xbc>)
 80048ae:	623b      	str	r3, [r7, #32]
      break;
 80048b0:	e02d      	b.n	800490e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	0c9b      	lsrs	r3, r3, #18
 80048b6:	f003 030f 	and.w	r3, r3, #15
 80048ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80048be:	4413      	add	r3, r2
 80048c0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80048c4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d013      	beq.n	80048f8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048d0:	4b14      	ldr	r3, [pc, #80]	; (8004924 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	0c5b      	lsrs	r3, r3, #17
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80048de:	4413      	add	r3, r2
 80048e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80048e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	4a0f      	ldr	r2, [pc, #60]	; (8004928 <HAL_RCC_GetSysClockFreq+0xbc>)
 80048ea:	fb02 f203 	mul.w	r2, r2, r3
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f4:	627b      	str	r3, [r7, #36]	; 0x24
 80048f6:	e004      	b.n	8004902 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	4a0c      	ldr	r2, [pc, #48]	; (800492c <HAL_RCC_GetSysClockFreq+0xc0>)
 80048fc:	fb02 f303 	mul.w	r3, r2, r3
 8004900:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	623b      	str	r3, [r7, #32]
      break;
 8004906:	e002      	b.n	800490e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004908:	4b07      	ldr	r3, [pc, #28]	; (8004928 <HAL_RCC_GetSysClockFreq+0xbc>)
 800490a:	623b      	str	r3, [r7, #32]
      break;
 800490c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800490e:	6a3b      	ldr	r3, [r7, #32]
}
 8004910:	4618      	mov	r0, r3
 8004912:	3728      	adds	r7, #40	; 0x28
 8004914:	46bd      	mov	sp, r7
 8004916:	bc90      	pop	{r4, r7}
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	080084a4 	.word	0x080084a4
 8004920:	080084b4 	.word	0x080084b4
 8004924:	40021000 	.word	0x40021000
 8004928:	007a1200 	.word	0x007a1200
 800492c:	003d0900 	.word	0x003d0900

08004930 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004930:	b480      	push	{r7}
 8004932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004934:	4b02      	ldr	r3, [pc, #8]	; (8004940 <HAL_RCC_GetHCLKFreq+0x10>)
 8004936:	681b      	ldr	r3, [r3, #0]
}
 8004938:	4618      	mov	r0, r3
 800493a:	46bd      	mov	sp, r7
 800493c:	bc80      	pop	{r7}
 800493e:	4770      	bx	lr
 8004940:	20000018 	.word	0x20000018

08004944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004948:	f7ff fff2 	bl	8004930 <HAL_RCC_GetHCLKFreq>
 800494c:	4601      	mov	r1, r0
 800494e:	4b05      	ldr	r3, [pc, #20]	; (8004964 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	0a1b      	lsrs	r3, r3, #8
 8004954:	f003 0307 	and.w	r3, r3, #7
 8004958:	4a03      	ldr	r2, [pc, #12]	; (8004968 <HAL_RCC_GetPCLK1Freq+0x24>)
 800495a:	5cd3      	ldrb	r3, [r2, r3]
 800495c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004960:	4618      	mov	r0, r3
 8004962:	bd80      	pop	{r7, pc}
 8004964:	40021000 	.word	0x40021000
 8004968:	080085ac 	.word	0x080085ac

0800496c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004970:	f7ff ffde 	bl	8004930 <HAL_RCC_GetHCLKFreq>
 8004974:	4601      	mov	r1, r0
 8004976:	4b05      	ldr	r3, [pc, #20]	; (800498c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	0adb      	lsrs	r3, r3, #11
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	4a03      	ldr	r2, [pc, #12]	; (8004990 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004982:	5cd3      	ldrb	r3, [r2, r3]
 8004984:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004988:	4618      	mov	r0, r3
 800498a:	bd80      	pop	{r7, pc}
 800498c:	40021000 	.word	0x40021000
 8004990:	080085ac 	.word	0x080085ac

08004994 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	220f      	movs	r2, #15
 80049a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80049a4:	4b11      	ldr	r3, [pc, #68]	; (80049ec <HAL_RCC_GetClockConfig+0x58>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f003 0203 	and.w	r2, r3, #3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80049b0:	4b0e      	ldr	r3, [pc, #56]	; (80049ec <HAL_RCC_GetClockConfig+0x58>)
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80049bc:	4b0b      	ldr	r3, [pc, #44]	; (80049ec <HAL_RCC_GetClockConfig+0x58>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80049c8:	4b08      	ldr	r3, [pc, #32]	; (80049ec <HAL_RCC_GetClockConfig+0x58>)
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	08db      	lsrs	r3, r3, #3
 80049ce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80049d6:	4b06      	ldr	r3, [pc, #24]	; (80049f0 <HAL_RCC_GetClockConfig+0x5c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0207 	and.w	r2, r3, #7
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80049e2:	bf00      	nop
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bc80      	pop	{r7}
 80049ea:	4770      	bx	lr
 80049ec:	40021000 	.word	0x40021000
 80049f0:	40022000 	.word	0x40022000

080049f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80049fc:	4b0a      	ldr	r3, [pc, #40]	; (8004a28 <RCC_Delay+0x34>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a0a      	ldr	r2, [pc, #40]	; (8004a2c <RCC_Delay+0x38>)
 8004a02:	fba2 2303 	umull	r2, r3, r2, r3
 8004a06:	0a5b      	lsrs	r3, r3, #9
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	fb02 f303 	mul.w	r3, r2, r3
 8004a0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a10:	bf00      	nop
  }
  while (Delay --);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	1e5a      	subs	r2, r3, #1
 8004a16:	60fa      	str	r2, [r7, #12]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1f9      	bne.n	8004a10 <RCC_Delay+0x1c>
}
 8004a1c:	bf00      	nop
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bc80      	pop	{r7}
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	20000018 	.word	0x20000018
 8004a2c:	10624dd3 	.word	0x10624dd3

08004a30 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	613b      	str	r3, [r7, #16]
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d07d      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a50:	4b4f      	ldr	r3, [pc, #316]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a52:	69db      	ldr	r3, [r3, #28]
 8004a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10d      	bne.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a5c:	4b4c      	ldr	r3, [pc, #304]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a5e:	69db      	ldr	r3, [r3, #28]
 8004a60:	4a4b      	ldr	r2, [pc, #300]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a66:	61d3      	str	r3, [r2, #28]
 8004a68:	4b49      	ldr	r3, [pc, #292]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a6a:	69db      	ldr	r3, [r3, #28]
 8004a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a70:	60bb      	str	r3, [r7, #8]
 8004a72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a74:	2301      	movs	r3, #1
 8004a76:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a78:	4b46      	ldr	r3, [pc, #280]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d118      	bne.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a84:	4b43      	ldr	r3, [pc, #268]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a42      	ldr	r2, [pc, #264]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a90:	f7fd fbf2 	bl	8002278 <HAL_GetTick>
 8004a94:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a96:	e008      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a98:	f7fd fbee 	bl	8002278 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b64      	cmp	r3, #100	; 0x64
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e06d      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aaa:	4b3a      	ldr	r3, [pc, #232]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d0f0      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ab6:	4b36      	ldr	r3, [pc, #216]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004abe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d02e      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d027      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ad4:	4b2e      	ldr	r3, [pc, #184]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004adc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ade:	4b2e      	ldr	r3, [pc, #184]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ae4:	4b2c      	ldr	r3, [pc, #176]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004aea:	4a29      	ldr	r2, [pc, #164]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d014      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004afa:	f7fd fbbd 	bl	8002278 <HAL_GetTick>
 8004afe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b00:	e00a      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b02:	f7fd fbb9 	bl	8002278 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d901      	bls.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e036      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b18:	4b1d      	ldr	r3, [pc, #116]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d0ee      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b24:	4b1a      	ldr	r3, [pc, #104]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	4917      	ldr	r1, [pc, #92]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b36:	7dfb      	ldrb	r3, [r7, #23]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d105      	bne.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b3c:	4b14      	ldr	r3, [pc, #80]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b3e:	69db      	ldr	r3, [r3, #28]
 8004b40:	4a13      	ldr	r2, [pc, #76]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b46:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d008      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b54:	4b0e      	ldr	r3, [pc, #56]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	490b      	ldr	r1, [pc, #44]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0310 	and.w	r3, r3, #16
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d008      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b72:	4b07      	ldr	r3, [pc, #28]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	4904      	ldr	r1, [pc, #16]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3718      	adds	r7, #24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	40021000 	.word	0x40021000
 8004b94:	40007000 	.word	0x40007000
 8004b98:	42420440 	.word	0x42420440

08004b9c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004b9c:	b590      	push	{r4, r7, lr}
 8004b9e:	b08d      	sub	sp, #52	; 0x34
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004ba4:	4b55      	ldr	r3, [pc, #340]	; (8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004ba6:	f107 040c 	add.w	r4, r7, #12
 8004baa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004bac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004bb0:	4b53      	ldr	r3, [pc, #332]	; (8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004bb2:	881b      	ldrh	r3, [r3, #0]
 8004bb4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8004bba:	2300      	movs	r3, #0
 8004bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	61fb      	str	r3, [r7, #28]
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d07f      	beq.n	8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8004bd0:	2b10      	cmp	r3, #16
 8004bd2:	d002      	beq.n	8004bda <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d048      	beq.n	8004c6a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004bd8:	e08b      	b.n	8004cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8004bda:	4b4a      	ldr	r3, [pc, #296]	; (8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004be0:	4b48      	ldr	r3, [pc, #288]	; (8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d07f      	beq.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	0c9b      	lsrs	r3, r3, #18
 8004bf0:	f003 030f 	and.w	r3, r3, #15
 8004bf4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004bfe:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d018      	beq.n	8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c0a:	4b3e      	ldr	r3, [pc, #248]	; (8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	0c5b      	lsrs	r3, r3, #17
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004c18:	4413      	add	r3, r2
 8004c1a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004c1e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00d      	beq.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004c2a:	4a37      	ldr	r2, [pc, #220]	; (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c32:	6a3b      	ldr	r3, [r7, #32]
 8004c34:	fb02 f303 	mul.w	r3, r2, r3
 8004c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c3a:	e004      	b.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c3c:	6a3b      	ldr	r3, [r7, #32]
 8004c3e:	4a33      	ldr	r2, [pc, #204]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004c40:	fb02 f303 	mul.w	r3, r2, r3
 8004c44:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004c46:	4b2f      	ldr	r3, [pc, #188]	; (8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c52:	d102      	bne.n	8004c5a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8004c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c56:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004c58:	e048      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8004c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5c:	005b      	lsls	r3, r3, #1
 8004c5e:	4a2c      	ldr	r2, [pc, #176]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004c60:	fba2 2303 	umull	r2, r3, r2, r3
 8004c64:	085b      	lsrs	r3, r3, #1
 8004c66:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004c68:	e040      	b.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8004c6a:	4b26      	ldr	r3, [pc, #152]	; (8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c7a:	d108      	bne.n	8004c8e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8004c86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c8c:	e01f      	b.n	8004cce <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c98:	d109      	bne.n	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8004c9a:	4b1a      	ldr	r3, [pc, #104]	; (8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8004ca6:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004caa:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cac:	e00f      	b.n	8004cce <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cb8:	d11a      	bne.n	8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8004cba:	4b12      	ldr	r3, [pc, #72]	; (8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d014      	beq.n	8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8004cc6:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004cca:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004ccc:	e010      	b.n	8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8004cce:	e00f      	b.n	8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004cd0:	f7ff fe4c 	bl	800496c <HAL_RCC_GetPCLK2Freq>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	4b0b      	ldr	r3, [pc, #44]	; (8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	0b9b      	lsrs	r3, r3, #14
 8004cdc:	f003 0303 	and.w	r3, r3, #3
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004cea:	e002      	b.n	8004cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8004cec:	bf00      	nop
 8004cee:	e000      	b.n	8004cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8004cf0:	bf00      	nop
    }
  }
  return (frequency);
 8004cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3734      	adds	r7, #52	; 0x34
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd90      	pop	{r4, r7, pc}
 8004cfc:	080084b8 	.word	0x080084b8
 8004d00:	080084c8 	.word	0x080084c8
 8004d04:	40021000 	.word	0x40021000
 8004d08:	007a1200 	.word	0x007a1200
 8004d0c:	003d0900 	.word	0x003d0900
 8004d10:	aaaaaaab 	.word	0xaaaaaaab

08004d14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e01d      	b.n	8004d62 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d106      	bne.n	8004d40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7fd f8a2 	bl	8001e84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2202      	movs	r2, #2
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	3304      	adds	r3, #4
 8004d50:	4619      	mov	r1, r3
 8004d52:	4610      	mov	r0, r2
 8004d54:	f000 fb3c 	bl	80053d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b085      	sub	sp, #20
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68da      	ldr	r2, [r3, #12]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f042 0201 	orr.w	r2, r2, #1
 8004d80:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f003 0307 	and.w	r3, r3, #7
 8004d8c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2b06      	cmp	r3, #6
 8004d92:	d007      	beq.n	8004da4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0201 	orr.w	r2, r2, #1
 8004da2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3714      	adds	r7, #20
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bc80      	pop	{r7}
 8004dae:	4770      	bx	lr

08004db0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e01d      	b.n	8004dfe <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d106      	bne.n	8004ddc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f815 	bl	8004e06 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2202      	movs	r2, #2
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3304      	adds	r3, #4
 8004dec:	4619      	mov	r1, r3
 8004dee:	4610      	mov	r0, r2
 8004df0:	f000 faee 	bl	80053d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3708      	adds	r7, #8
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b083      	sub	sp, #12
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e0e:	bf00      	nop
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bc80      	pop	{r7}
 8004e16:	4770      	bx	lr

08004e18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2201      	movs	r2, #1
 8004e28:	6839      	ldr	r1, [r7, #0]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 fd50 	bl	80058d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a10      	ldr	r2, [pc, #64]	; (8004e78 <HAL_TIM_PWM_Start+0x60>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d107      	bne.n	8004e4a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f003 0307 	and.w	r3, r3, #7
 8004e54:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2b06      	cmp	r3, #6
 8004e5a:	d007      	beq.n	8004e6c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0201 	orr.w	r2, r2, #1
 8004e6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	40012c00 	.word	0x40012c00

08004e7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d122      	bne.n	8004ed8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d11b      	bne.n	8004ed8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f06f 0202 	mvn.w	r2, #2
 8004ea8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	f003 0303 	and.w	r3, r3, #3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 fa6a 	bl	8005398 <HAL_TIM_IC_CaptureCallback>
 8004ec4:	e005      	b.n	8004ed2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 fa5d 	bl	8005386 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 fa6c 	bl	80053aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	f003 0304 	and.w	r3, r3, #4
 8004ee2:	2b04      	cmp	r3, #4
 8004ee4:	d122      	bne.n	8004f2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b04      	cmp	r3, #4
 8004ef2:	d11b      	bne.n	8004f2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f06f 0204 	mvn.w	r2, #4
 8004efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2202      	movs	r2, #2
 8004f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d003      	beq.n	8004f1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 fa40 	bl	8005398 <HAL_TIM_IC_CaptureCallback>
 8004f18:	e005      	b.n	8004f26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 fa33 	bl	8005386 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 fa42 	bl	80053aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	f003 0308 	and.w	r3, r3, #8
 8004f36:	2b08      	cmp	r3, #8
 8004f38:	d122      	bne.n	8004f80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f003 0308 	and.w	r3, r3, #8
 8004f44:	2b08      	cmp	r3, #8
 8004f46:	d11b      	bne.n	8004f80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f06f 0208 	mvn.w	r2, #8
 8004f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2204      	movs	r2, #4
 8004f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	f003 0303 	and.w	r3, r3, #3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 fa16 	bl	8005398 <HAL_TIM_IC_CaptureCallback>
 8004f6c:	e005      	b.n	8004f7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 fa09 	bl	8005386 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 fa18 	bl	80053aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	f003 0310 	and.w	r3, r3, #16
 8004f8a:	2b10      	cmp	r3, #16
 8004f8c:	d122      	bne.n	8004fd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	f003 0310 	and.w	r3, r3, #16
 8004f98:	2b10      	cmp	r3, #16
 8004f9a:	d11b      	bne.n	8004fd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f06f 0210 	mvn.w	r2, #16
 8004fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2208      	movs	r2, #8
 8004faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	69db      	ldr	r3, [r3, #28]
 8004fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f9ec 	bl	8005398 <HAL_TIM_IC_CaptureCallback>
 8004fc0:	e005      	b.n	8004fce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f9df 	bl	8005386 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 f9ee 	bl	80053aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d10e      	bne.n	8005000 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d107      	bne.n	8005000 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f06f 0201 	mvn.w	r2, #1
 8004ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7fc f88c 	bl	8001118 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800500a:	2b80      	cmp	r3, #128	; 0x80
 800500c:	d10e      	bne.n	800502c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005018:	2b80      	cmp	r3, #128	; 0x80
 800501a:	d107      	bne.n	800502c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 fd14 	bl	8005a54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005036:	2b40      	cmp	r3, #64	; 0x40
 8005038:	d10e      	bne.n	8005058 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005044:	2b40      	cmp	r3, #64	; 0x40
 8005046:	d107      	bne.n	8005058 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f9b2 	bl	80053bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f003 0320 	and.w	r3, r3, #32
 8005062:	2b20      	cmp	r3, #32
 8005064:	d10e      	bne.n	8005084 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f003 0320 	and.w	r3, r3, #32
 8005070:	2b20      	cmp	r3, #32
 8005072:	d107      	bne.n	8005084 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f06f 0220 	mvn.w	r2, #32
 800507c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 fcdf 	bl	8005a42 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005084:	bf00      	nop
 8005086:	3708      	adds	r7, #8
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d101      	bne.n	80050a6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80050a2:	2302      	movs	r3, #2
 80050a4:	e0b4      	b.n	8005210 <HAL_TIM_PWM_ConfigChannel+0x184>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2202      	movs	r2, #2
 80050b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b0c      	cmp	r3, #12
 80050ba:	f200 809f 	bhi.w	80051fc <HAL_TIM_PWM_ConfigChannel+0x170>
 80050be:	a201      	add	r2, pc, #4	; (adr r2, 80050c4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80050c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c4:	080050f9 	.word	0x080050f9
 80050c8:	080051fd 	.word	0x080051fd
 80050cc:	080051fd 	.word	0x080051fd
 80050d0:	080051fd 	.word	0x080051fd
 80050d4:	08005139 	.word	0x08005139
 80050d8:	080051fd 	.word	0x080051fd
 80050dc:	080051fd 	.word	0x080051fd
 80050e0:	080051fd 	.word	0x080051fd
 80050e4:	0800517b 	.word	0x0800517b
 80050e8:	080051fd 	.word	0x080051fd
 80050ec:	080051fd 	.word	0x080051fd
 80050f0:	080051fd 	.word	0x080051fd
 80050f4:	080051bb 	.word	0x080051bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68b9      	ldr	r1, [r7, #8]
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 f9c8 	bl	8005494 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	699a      	ldr	r2, [r3, #24]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f042 0208 	orr.w	r2, r2, #8
 8005112:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	699a      	ldr	r2, [r3, #24]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 0204 	bic.w	r2, r2, #4
 8005122:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6999      	ldr	r1, [r3, #24]
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	691a      	ldr	r2, [r3, #16]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	619a      	str	r2, [r3, #24]
      break;
 8005136:	e062      	b.n	80051fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68b9      	ldr	r1, [r7, #8]
 800513e:	4618      	mov	r0, r3
 8005140:	f000 fa0e 	bl	8005560 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	699a      	ldr	r2, [r3, #24]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005152:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	699a      	ldr	r2, [r3, #24]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005162:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6999      	ldr	r1, [r3, #24]
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	021a      	lsls	r2, r3, #8
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	430a      	orrs	r2, r1
 8005176:	619a      	str	r2, [r3, #24]
      break;
 8005178:	e041      	b.n	80051fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68b9      	ldr	r1, [r7, #8]
 8005180:	4618      	mov	r0, r3
 8005182:	f000 fa57 	bl	8005634 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	69da      	ldr	r2, [r3, #28]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f042 0208 	orr.w	r2, r2, #8
 8005194:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	69da      	ldr	r2, [r3, #28]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f022 0204 	bic.w	r2, r2, #4
 80051a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	69d9      	ldr	r1, [r3, #28]
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	691a      	ldr	r2, [r3, #16]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	430a      	orrs	r2, r1
 80051b6:	61da      	str	r2, [r3, #28]
      break;
 80051b8:	e021      	b.n	80051fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68b9      	ldr	r1, [r7, #8]
 80051c0:	4618      	mov	r0, r3
 80051c2:	f000 faa1 	bl	8005708 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	69da      	ldr	r2, [r3, #28]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	69da      	ldr	r2, [r3, #28]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	69d9      	ldr	r1, [r3, #28]
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	021a      	lsls	r2, r3, #8
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	430a      	orrs	r2, r1
 80051f8:	61da      	str	r2, [r3, #28]
      break;
 80051fa:	e000      	b.n	80051fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80051fc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3710      	adds	r7, #16
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005228:	2b01      	cmp	r3, #1
 800522a:	d101      	bne.n	8005230 <HAL_TIM_ConfigClockSource+0x18>
 800522c:	2302      	movs	r3, #2
 800522e:	e0a6      	b.n	800537e <HAL_TIM_ConfigClockSource+0x166>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800524e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005256:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2b40      	cmp	r3, #64	; 0x40
 8005266:	d067      	beq.n	8005338 <HAL_TIM_ConfigClockSource+0x120>
 8005268:	2b40      	cmp	r3, #64	; 0x40
 800526a:	d80b      	bhi.n	8005284 <HAL_TIM_ConfigClockSource+0x6c>
 800526c:	2b10      	cmp	r3, #16
 800526e:	d073      	beq.n	8005358 <HAL_TIM_ConfigClockSource+0x140>
 8005270:	2b10      	cmp	r3, #16
 8005272:	d802      	bhi.n	800527a <HAL_TIM_ConfigClockSource+0x62>
 8005274:	2b00      	cmp	r3, #0
 8005276:	d06f      	beq.n	8005358 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005278:	e078      	b.n	800536c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800527a:	2b20      	cmp	r3, #32
 800527c:	d06c      	beq.n	8005358 <HAL_TIM_ConfigClockSource+0x140>
 800527e:	2b30      	cmp	r3, #48	; 0x30
 8005280:	d06a      	beq.n	8005358 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005282:	e073      	b.n	800536c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005284:	2b70      	cmp	r3, #112	; 0x70
 8005286:	d00d      	beq.n	80052a4 <HAL_TIM_ConfigClockSource+0x8c>
 8005288:	2b70      	cmp	r3, #112	; 0x70
 800528a:	d804      	bhi.n	8005296 <HAL_TIM_ConfigClockSource+0x7e>
 800528c:	2b50      	cmp	r3, #80	; 0x50
 800528e:	d033      	beq.n	80052f8 <HAL_TIM_ConfigClockSource+0xe0>
 8005290:	2b60      	cmp	r3, #96	; 0x60
 8005292:	d041      	beq.n	8005318 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005294:	e06a      	b.n	800536c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800529a:	d066      	beq.n	800536a <HAL_TIM_ConfigClockSource+0x152>
 800529c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052a0:	d017      	beq.n	80052d2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80052a2:	e063      	b.n	800536c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6818      	ldr	r0, [r3, #0]
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	6899      	ldr	r1, [r3, #8]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	f000 faed 	bl	8005892 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052c6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	609a      	str	r2, [r3, #8]
      break;
 80052d0:	e04c      	b.n	800536c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6818      	ldr	r0, [r3, #0]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	6899      	ldr	r1, [r3, #8]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	685a      	ldr	r2, [r3, #4]
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f000 fad6 	bl	8005892 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052f4:	609a      	str	r2, [r3, #8]
      break;
 80052f6:	e039      	b.n	800536c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6818      	ldr	r0, [r3, #0]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	6859      	ldr	r1, [r3, #4]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	461a      	mov	r2, r3
 8005306:	f000 fa4d 	bl	80057a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2150      	movs	r1, #80	; 0x50
 8005310:	4618      	mov	r0, r3
 8005312:	f000 faa4 	bl	800585e <TIM_ITRx_SetConfig>
      break;
 8005316:	e029      	b.n	800536c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6818      	ldr	r0, [r3, #0]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	6859      	ldr	r1, [r3, #4]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	461a      	mov	r2, r3
 8005326:	f000 fa6b 	bl	8005800 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2160      	movs	r1, #96	; 0x60
 8005330:	4618      	mov	r0, r3
 8005332:	f000 fa94 	bl	800585e <TIM_ITRx_SetConfig>
      break;
 8005336:	e019      	b.n	800536c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6818      	ldr	r0, [r3, #0]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	6859      	ldr	r1, [r3, #4]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	461a      	mov	r2, r3
 8005346:	f000 fa2d 	bl	80057a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2140      	movs	r1, #64	; 0x40
 8005350:	4618      	mov	r0, r3
 8005352:	f000 fa84 	bl	800585e <TIM_ITRx_SetConfig>
      break;
 8005356:	e009      	b.n	800536c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4619      	mov	r1, r3
 8005362:	4610      	mov	r0, r2
 8005364:	f000 fa7b 	bl	800585e <TIM_ITRx_SetConfig>
      break;
 8005368:	e000      	b.n	800536c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800536a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005386:	b480      	push	{r7}
 8005388:	b083      	sub	sp, #12
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800538e:	bf00      	nop
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	bc80      	pop	{r7}
 8005396:	4770      	bx	lr

08005398 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bc80      	pop	{r7}
 80053a8:	4770      	bx	lr

080053aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b083      	sub	sp, #12
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053b2:	bf00      	nop
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bc80      	pop	{r7}
 80053ba:	4770      	bx	lr

080053bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bc80      	pop	{r7}
 80053cc:	4770      	bx	lr
	...

080053d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a29      	ldr	r2, [pc, #164]	; (8005488 <TIM_Base_SetConfig+0xb8>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d00b      	beq.n	8005400 <TIM_Base_SetConfig+0x30>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ee:	d007      	beq.n	8005400 <TIM_Base_SetConfig+0x30>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a26      	ldr	r2, [pc, #152]	; (800548c <TIM_Base_SetConfig+0xbc>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d003      	beq.n	8005400 <TIM_Base_SetConfig+0x30>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a25      	ldr	r2, [pc, #148]	; (8005490 <TIM_Base_SetConfig+0xc0>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d108      	bne.n	8005412 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005406:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	4313      	orrs	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a1c      	ldr	r2, [pc, #112]	; (8005488 <TIM_Base_SetConfig+0xb8>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d00b      	beq.n	8005432 <TIM_Base_SetConfig+0x62>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005420:	d007      	beq.n	8005432 <TIM_Base_SetConfig+0x62>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a19      	ldr	r2, [pc, #100]	; (800548c <TIM_Base_SetConfig+0xbc>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d003      	beq.n	8005432 <TIM_Base_SetConfig+0x62>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a18      	ldr	r2, [pc, #96]	; (8005490 <TIM_Base_SetConfig+0xc0>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d108      	bne.n	8005444 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	4313      	orrs	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	4313      	orrs	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	689a      	ldr	r2, [r3, #8]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a07      	ldr	r2, [pc, #28]	; (8005488 <TIM_Base_SetConfig+0xb8>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d103      	bne.n	8005478 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	691a      	ldr	r2, [r3, #16]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	615a      	str	r2, [r3, #20]
}
 800547e:	bf00      	nop
 8005480:	3714      	adds	r7, #20
 8005482:	46bd      	mov	sp, r7
 8005484:	bc80      	pop	{r7}
 8005486:	4770      	bx	lr
 8005488:	40012c00 	.word	0x40012c00
 800548c:	40000400 	.word	0x40000400
 8005490:	40000800 	.word	0x40000800

08005494 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005494:	b480      	push	{r7}
 8005496:	b087      	sub	sp, #28
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	f023 0201 	bic.w	r2, r3, #1
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f023 0303 	bic.w	r3, r3, #3
 80054ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f023 0302 	bic.w	r3, r3, #2
 80054dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a1c      	ldr	r2, [pc, #112]	; (800555c <TIM_OC1_SetConfig+0xc8>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d10c      	bne.n	800550a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	f023 0308 	bic.w	r3, r3, #8
 80054f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	4313      	orrs	r3, r2
 8005500:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f023 0304 	bic.w	r3, r3, #4
 8005508:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a13      	ldr	r2, [pc, #76]	; (800555c <TIM_OC1_SetConfig+0xc8>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d111      	bne.n	8005536 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005518:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005520:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	4313      	orrs	r3, r2
 800552a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	4313      	orrs	r3, r2
 8005534:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	621a      	str	r2, [r3, #32]
}
 8005550:	bf00      	nop
 8005552:	371c      	adds	r7, #28
 8005554:	46bd      	mov	sp, r7
 8005556:	bc80      	pop	{r7}
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	40012c00 	.word	0x40012c00

08005560 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005560:	b480      	push	{r7}
 8005562:	b087      	sub	sp, #28
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	f023 0210 	bic.w	r2, r3, #16
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800558e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005596:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	021b      	lsls	r3, r3, #8
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f023 0320 	bic.w	r3, r3, #32
 80055aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	011b      	lsls	r3, r3, #4
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a1d      	ldr	r2, [pc, #116]	; (8005630 <TIM_OC2_SetConfig+0xd0>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d10d      	bne.n	80055dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	011b      	lsls	r3, r3, #4
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a14      	ldr	r2, [pc, #80]	; (8005630 <TIM_OC2_SetConfig+0xd0>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d113      	bne.n	800560c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	695b      	ldr	r3, [r3, #20]
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	4313      	orrs	r3, r2
 800560a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	685a      	ldr	r2, [r3, #4]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	621a      	str	r2, [r3, #32]
}
 8005626:	bf00      	nop
 8005628:	371c      	adds	r7, #28
 800562a:	46bd      	mov	sp, r7
 800562c:	bc80      	pop	{r7}
 800562e:	4770      	bx	lr
 8005630:	40012c00 	.word	0x40012c00

08005634 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005634:	b480      	push	{r7}
 8005636:	b087      	sub	sp, #28
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f023 0303 	bic.w	r3, r3, #3
 800566a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	4313      	orrs	r3, r2
 8005674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800567c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	021b      	lsls	r3, r3, #8
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	4313      	orrs	r3, r2
 8005688:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a1d      	ldr	r2, [pc, #116]	; (8005704 <TIM_OC3_SetConfig+0xd0>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d10d      	bne.n	80056ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005698:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	021b      	lsls	r3, r3, #8
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a14      	ldr	r2, [pc, #80]	; (8005704 <TIM_OC3_SetConfig+0xd0>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d113      	bne.n	80056de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	011b      	lsls	r3, r3, #4
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	011b      	lsls	r3, r3, #4
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	4313      	orrs	r3, r2
 80056dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	685a      	ldr	r2, [r3, #4]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	621a      	str	r2, [r3, #32]
}
 80056f8:	bf00      	nop
 80056fa:	371c      	adds	r7, #28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bc80      	pop	{r7}
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	40012c00 	.word	0x40012c00

08005708 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005708:	b480      	push	{r7}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800573e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	021b      	lsls	r3, r3, #8
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	4313      	orrs	r3, r2
 800574a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005752:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	031b      	lsls	r3, r3, #12
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	4313      	orrs	r3, r2
 800575e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a0f      	ldr	r2, [pc, #60]	; (80057a0 <TIM_OC4_SetConfig+0x98>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d109      	bne.n	800577c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800576e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	695b      	ldr	r3, [r3, #20]
 8005774:	019b      	lsls	r3, r3, #6
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	4313      	orrs	r3, r2
 800577a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	685a      	ldr	r2, [r3, #4]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	621a      	str	r2, [r3, #32]
}
 8005796:	bf00      	nop
 8005798:	371c      	adds	r7, #28
 800579a:	46bd      	mov	sp, r7
 800579c:	bc80      	pop	{r7}
 800579e:	4770      	bx	lr
 80057a0:	40012c00 	.word	0x40012c00

080057a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b087      	sub	sp, #28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	f023 0201 	bic.w	r2, r3, #1
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	011b      	lsls	r3, r3, #4
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f023 030a 	bic.w	r3, r3, #10
 80057e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	621a      	str	r2, [r3, #32]
}
 80057f6:	bf00      	nop
 80057f8:	371c      	adds	r7, #28
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bc80      	pop	{r7}
 80057fe:	4770      	bx	lr

08005800 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6a1b      	ldr	r3, [r3, #32]
 8005810:	f023 0210 	bic.w	r2, r3, #16
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800582a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	031b      	lsls	r3, r3, #12
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	4313      	orrs	r3, r2
 8005834:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800583c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	011b      	lsls	r3, r3, #4
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	4313      	orrs	r3, r2
 8005846:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	621a      	str	r2, [r3, #32]
}
 8005854:	bf00      	nop
 8005856:	371c      	adds	r7, #28
 8005858:	46bd      	mov	sp, r7
 800585a:	bc80      	pop	{r7}
 800585c:	4770      	bx	lr

0800585e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800585e:	b480      	push	{r7}
 8005860:	b085      	sub	sp, #20
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
 8005866:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005874:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4313      	orrs	r3, r2
 800587c:	f043 0307 	orr.w	r3, r3, #7
 8005880:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	609a      	str	r2, [r3, #8]
}
 8005888:	bf00      	nop
 800588a:	3714      	adds	r7, #20
 800588c:	46bd      	mov	sp, r7
 800588e:	bc80      	pop	{r7}
 8005890:	4770      	bx	lr

08005892 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005892:	b480      	push	{r7}
 8005894:	b087      	sub	sp, #28
 8005896:	af00      	add	r7, sp, #0
 8005898:	60f8      	str	r0, [r7, #12]
 800589a:	60b9      	str	r1, [r7, #8]
 800589c:	607a      	str	r2, [r7, #4]
 800589e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	021a      	lsls	r2, r3, #8
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	431a      	orrs	r2, r3
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	4313      	orrs	r3, r2
 80058be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	609a      	str	r2, [r3, #8]
}
 80058c6:	bf00      	nop
 80058c8:	371c      	adds	r7, #28
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bc80      	pop	{r7}
 80058ce:	4770      	bx	lr

080058d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	f003 031f 	and.w	r3, r3, #31
 80058e2:	2201      	movs	r2, #1
 80058e4:	fa02 f303 	lsl.w	r3, r2, r3
 80058e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6a1a      	ldr	r2, [r3, #32]
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	43db      	mvns	r3, r3
 80058f2:	401a      	ands	r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6a1a      	ldr	r2, [r3, #32]
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	f003 031f 	and.w	r3, r3, #31
 8005902:	6879      	ldr	r1, [r7, #4]
 8005904:	fa01 f303 	lsl.w	r3, r1, r3
 8005908:	431a      	orrs	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	621a      	str	r2, [r3, #32]
}
 800590e:	bf00      	nop
 8005910:	371c      	adds	r7, #28
 8005912:	46bd      	mov	sp, r7
 8005914:	bc80      	pop	{r7}
 8005916:	4770      	bx	lr

08005918 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005928:	2b01      	cmp	r3, #1
 800592a:	d101      	bne.n	8005930 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800592c:	2302      	movs	r3, #2
 800592e:	e032      	b.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2202      	movs	r2, #2
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005956:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	4313      	orrs	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005968:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	4313      	orrs	r3, r2
 8005972:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68ba      	ldr	r2, [r7, #8]
 8005982:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3714      	adds	r7, #20
 800599a:	46bd      	mov	sp, r7
 800599c:	bc80      	pop	{r7}
 800599e:	4770      	bx	lr

080059a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80059aa:	2300      	movs	r3, #0
 80059ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d101      	bne.n	80059bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80059b8:	2302      	movs	r3, #2
 80059ba:	e03d      	b.n	8005a38 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	4313      	orrs	r3, r2
 80059de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3714      	adds	r7, #20
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bc80      	pop	{r7}
 8005a40:	4770      	bx	lr

08005a42 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b083      	sub	sp, #12
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a4a:	bf00      	nop
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bc80      	pop	{r7}
 8005a52:	4770      	bx	lr

08005a54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bc80      	pop	{r7}
 8005a64:	4770      	bx	lr
	...

08005a68 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a6e:	f3ef 8305 	mrs	r3, IPSR
 8005a72:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a74:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10f      	bne.n	8005a9a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a7a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a7e:	607b      	str	r3, [r7, #4]
  return(result);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d109      	bne.n	8005a9a <osKernelInitialize+0x32>
 8005a86:	4b10      	ldr	r3, [pc, #64]	; (8005ac8 <osKernelInitialize+0x60>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d109      	bne.n	8005aa2 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a8e:	f3ef 8311 	mrs	r3, BASEPRI
 8005a92:	603b      	str	r3, [r7, #0]
  return(result);
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005a9a:	f06f 0305 	mvn.w	r3, #5
 8005a9e:	60fb      	str	r3, [r7, #12]
 8005aa0:	e00c      	b.n	8005abc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005aa2:	4b09      	ldr	r3, [pc, #36]	; (8005ac8 <osKernelInitialize+0x60>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d105      	bne.n	8005ab6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005aaa:	4b07      	ldr	r3, [pc, #28]	; (8005ac8 <osKernelInitialize+0x60>)
 8005aac:	2201      	movs	r2, #1
 8005aae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	60fb      	str	r3, [r7, #12]
 8005ab4:	e002      	b.n	8005abc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005ab6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005aba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005abc:	68fb      	ldr	r3, [r7, #12]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3714      	adds	r7, #20
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bc80      	pop	{r7}
 8005ac6:	4770      	bx	lr
 8005ac8:	2000009c 	.word	0x2000009c

08005acc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ad2:	f3ef 8305 	mrs	r3, IPSR
 8005ad6:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ad8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10f      	bne.n	8005afe <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ade:	f3ef 8310 	mrs	r3, PRIMASK
 8005ae2:	607b      	str	r3, [r7, #4]
  return(result);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d109      	bne.n	8005afe <osKernelStart+0x32>
 8005aea:	4b11      	ldr	r3, [pc, #68]	; (8005b30 <osKernelStart+0x64>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d109      	bne.n	8005b06 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005af2:	f3ef 8311 	mrs	r3, BASEPRI
 8005af6:	603b      	str	r3, [r7, #0]
  return(result);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <osKernelStart+0x3a>
    stat = osErrorISR;
 8005afe:	f06f 0305 	mvn.w	r3, #5
 8005b02:	60fb      	str	r3, [r7, #12]
 8005b04:	e00e      	b.n	8005b24 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005b06:	4b0a      	ldr	r3, [pc, #40]	; (8005b30 <osKernelStart+0x64>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d107      	bne.n	8005b1e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005b0e:	4b08      	ldr	r3, [pc, #32]	; (8005b30 <osKernelStart+0x64>)
 8005b10:	2202      	movs	r2, #2
 8005b12:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005b14:	f001 f868 	bl	8006be8 <vTaskStartScheduler>
      stat = osOK;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	e002      	b.n	8005b24 <osKernelStart+0x58>
    } else {
      stat = osError;
 8005b1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b22:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005b24:	68fb      	ldr	r3, [r7, #12]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	2000009c 	.word	0x2000009c

08005b34 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b092      	sub	sp, #72	; 0x48
 8005b38:	af04      	add	r7, sp, #16
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005b40:	2300      	movs	r3, #0
 8005b42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b44:	f3ef 8305 	mrs	r3, IPSR
 8005b48:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f040 8094 	bne.w	8005c7a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b52:	f3ef 8310 	mrs	r3, PRIMASK
 8005b56:	623b      	str	r3, [r7, #32]
  return(result);
 8005b58:	6a3b      	ldr	r3, [r7, #32]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f040 808d 	bne.w	8005c7a <osThreadNew+0x146>
 8005b60:	4b48      	ldr	r3, [pc, #288]	; (8005c84 <osThreadNew+0x150>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d106      	bne.n	8005b76 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b68:	f3ef 8311 	mrs	r3, BASEPRI
 8005b6c:	61fb      	str	r3, [r7, #28]
  return(result);
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f040 8082 	bne.w	8005c7a <osThreadNew+0x146>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d07e      	beq.n	8005c7a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005b7c:	2380      	movs	r3, #128	; 0x80
 8005b7e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005b80:	2318      	movs	r3, #24
 8005b82:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005b84:	2300      	movs	r3, #0
 8005b86:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005b88:	f107 031b 	add.w	r3, r7, #27
 8005b8c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8005b8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b92:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d045      	beq.n	8005c26 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d002      	beq.n	8005ba8 <osThreadNew+0x74>
        name = attr->name;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	699b      	ldr	r3, [r3, #24]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d002      	beq.n	8005bb6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d008      	beq.n	8005bce <osThreadNew+0x9a>
 8005bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbe:	2b38      	cmp	r3, #56	; 0x38
 8005bc0:	d805      	bhi.n	8005bce <osThreadNew+0x9a>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d001      	beq.n	8005bd2 <osThreadNew+0x9e>
        return (NULL);
 8005bce:	2300      	movs	r3, #0
 8005bd0:	e054      	b.n	8005c7c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	089b      	lsrs	r3, r3, #2
 8005be0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00e      	beq.n	8005c08 <osThreadNew+0xd4>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	2b5f      	cmp	r3, #95	; 0x5f
 8005bf0:	d90a      	bls.n	8005c08 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d006      	beq.n	8005c08 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d002      	beq.n	8005c08 <osThreadNew+0xd4>
        mem = 1;
 8005c02:	2301      	movs	r3, #1
 8005c04:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c06:	e010      	b.n	8005c2a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d10c      	bne.n	8005c2a <osThreadNew+0xf6>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d108      	bne.n	8005c2a <osThreadNew+0xf6>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d104      	bne.n	8005c2a <osThreadNew+0xf6>
          mem = 0;
 8005c20:	2300      	movs	r3, #0
 8005c22:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c24:	e001      	b.n	8005c2a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005c26:	2300      	movs	r3, #0
 8005c28:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8005c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d110      	bne.n	8005c52 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005c38:	9202      	str	r2, [sp, #8]
 8005c3a:	9301      	str	r3, [sp, #4]
 8005c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3e:	9300      	str	r3, [sp, #0]
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c44:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f000 fe02 	bl	8006850 <xTaskCreateStatic>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	617b      	str	r3, [r7, #20]
 8005c50:	e013      	b.n	8005c7a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d110      	bne.n	8005c7a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	f107 0314 	add.w	r3, r7, #20
 8005c60:	9301      	str	r3, [sp, #4]
 8005c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f000 fe49 	bl	8006902 <xTaskCreate>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d001      	beq.n	8005c7a <osThreadNew+0x146>
          hTask = NULL;
 8005c76:	2300      	movs	r3, #0
 8005c78:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005c7a:	697b      	ldr	r3, [r7, #20]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3738      	adds	r7, #56	; 0x38
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	2000009c 	.word	0x2000009c

08005c88 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b086      	sub	sp, #24
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c90:	f3ef 8305 	mrs	r3, IPSR
 8005c94:	613b      	str	r3, [r7, #16]
  return(result);
 8005c96:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10f      	bne.n	8005cbc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c9c:	f3ef 8310 	mrs	r3, PRIMASK
 8005ca0:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d109      	bne.n	8005cbc <osDelay+0x34>
 8005ca8:	4b0d      	ldr	r3, [pc, #52]	; (8005ce0 <osDelay+0x58>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d109      	bne.n	8005cc4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005cb0:	f3ef 8311 	mrs	r3, BASEPRI
 8005cb4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d003      	beq.n	8005cc4 <osDelay+0x3c>
    stat = osErrorISR;
 8005cbc:	f06f 0305 	mvn.w	r3, #5
 8005cc0:	617b      	str	r3, [r7, #20]
 8005cc2:	e007      	b.n	8005cd4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d002      	beq.n	8005cd4 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 ff56 	bl	8006b80 <vTaskDelay>
    }
  }

  return (stat);
 8005cd4:	697b      	ldr	r3, [r7, #20]
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3718      	adds	r7, #24
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	2000009c 	.word	0x2000009c

08005ce4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	4a06      	ldr	r2, [pc, #24]	; (8005d0c <vApplicationGetIdleTaskMemory+0x28>)
 8005cf4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	4a05      	ldr	r2, [pc, #20]	; (8005d10 <vApplicationGetIdleTaskMemory+0x2c>)
 8005cfa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2280      	movs	r2, #128	; 0x80
 8005d00:	601a      	str	r2, [r3, #0]
}
 8005d02:	bf00      	nop
 8005d04:	3714      	adds	r7, #20
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bc80      	pop	{r7}
 8005d0a:	4770      	bx	lr
 8005d0c:	200000a0 	.word	0x200000a0
 8005d10:	20000100 	.word	0x20000100

08005d14 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4a07      	ldr	r2, [pc, #28]	; (8005d40 <vApplicationGetTimerTaskMemory+0x2c>)
 8005d24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	4a06      	ldr	r2, [pc, #24]	; (8005d44 <vApplicationGetTimerTaskMemory+0x30>)
 8005d2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d32:	601a      	str	r2, [r3, #0]
}
 8005d34:	bf00      	nop
 8005d36:	3714      	adds	r7, #20
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bc80      	pop	{r7}
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	20000300 	.word	0x20000300
 8005d44:	20000360 	.word	0x20000360

08005d48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f103 0208 	add.w	r2, r3, #8
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f103 0208 	add.w	r2, r3, #8
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f103 0208 	add.w	r2, r3, #8
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bc80      	pop	{r7}
 8005d84:	4770      	bx	lr

08005d86 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d86:	b480      	push	{r7}
 8005d88:	b083      	sub	sp, #12
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bc80      	pop	{r7}
 8005d9c:	4770      	bx	lr

08005d9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b085      	sub	sp, #20
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
 8005da6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	689a      	ldr	r2, [r3, #8]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	683a      	ldr	r2, [r7, #0]
 8005dc2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	683a      	ldr	r2, [r7, #0]
 8005dc8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	1c5a      	adds	r2, r3, #1
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	601a      	str	r2, [r3, #0]
}
 8005dda:	bf00      	nop
 8005ddc:	3714      	adds	r7, #20
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bc80      	pop	{r7}
 8005de2:	4770      	bx	lr

08005de4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dfa:	d103      	bne.n	8005e04 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	60fb      	str	r3, [r7, #12]
 8005e02:	e00c      	b.n	8005e1e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	3308      	adds	r3, #8
 8005e08:	60fb      	str	r3, [r7, #12]
 8005e0a:	e002      	b.n	8005e12 <vListInsert+0x2e>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	60fb      	str	r3, [r7, #12]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d2f6      	bcs.n	8005e0c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	685a      	ldr	r2, [r3, #4]
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	1c5a      	adds	r2, r3, #1
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	601a      	str	r2, [r3, #0]
}
 8005e4a:	bf00      	nop
 8005e4c:	3714      	adds	r7, #20
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bc80      	pop	{r7}
 8005e52:	4770      	bx	lr

08005e54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	6892      	ldr	r2, [r2, #8]
 8005e6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	6852      	ldr	r2, [r2, #4]
 8005e74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d103      	bne.n	8005e88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	689a      	ldr	r2, [r3, #8]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	1e5a      	subs	r2, r3, #1
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3714      	adds	r7, #20
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bc80      	pop	{r7}
 8005ea4:	4770      	bx	lr
	...

08005ea8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d109      	bne.n	8005ed0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec0:	f383 8811 	msr	BASEPRI, r3
 8005ec4:	f3bf 8f6f 	isb	sy
 8005ec8:	f3bf 8f4f 	dsb	sy
 8005ecc:	60bb      	str	r3, [r7, #8]
 8005ece:	e7fe      	b.n	8005ece <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005ed0:	f001 ffc2 	bl	8007e58 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005edc:	68f9      	ldr	r1, [r7, #12]
 8005ede:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005ee0:	fb01 f303 	mul.w	r3, r1, r3
 8005ee4:	441a      	add	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f00:	3b01      	subs	r3, #1
 8005f02:	68f9      	ldr	r1, [r7, #12]
 8005f04:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f06:	fb01 f303 	mul.w	r3, r1, r3
 8005f0a:	441a      	add	r2, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	22ff      	movs	r2, #255	; 0xff
 8005f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	22ff      	movs	r2, #255	; 0xff
 8005f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d114      	bne.n	8005f50 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d01a      	beq.n	8005f64 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	3310      	adds	r3, #16
 8005f32:	4618      	mov	r0, r3
 8005f34:	f001 f900 	bl	8007138 <xTaskRemoveFromEventList>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d012      	beq.n	8005f64 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005f3e:	4b0d      	ldr	r3, [pc, #52]	; (8005f74 <xQueueGenericReset+0xcc>)
 8005f40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f44:	601a      	str	r2, [r3, #0]
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	f3bf 8f6f 	isb	sy
 8005f4e:	e009      	b.n	8005f64 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	3310      	adds	r3, #16
 8005f54:	4618      	mov	r0, r3
 8005f56:	f7ff fef7 	bl	8005d48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	3324      	adds	r3, #36	; 0x24
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7ff fef2 	bl	8005d48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f64:	f001 ffa6 	bl	8007eb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f68:	2301      	movs	r3, #1
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	e000ed04 	.word	0xe000ed04

08005f78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08e      	sub	sp, #56	; 0x38
 8005f7c:	af02      	add	r7, sp, #8
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
 8005f84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d109      	bne.n	8005fa0 <xQueueGenericCreateStatic+0x28>
 8005f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f9e:	e7fe      	b.n	8005f9e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d109      	bne.n	8005fba <xQueueGenericCreateStatic+0x42>
 8005fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005faa:	f383 8811 	msr	BASEPRI, r3
 8005fae:	f3bf 8f6f 	isb	sy
 8005fb2:	f3bf 8f4f 	dsb	sy
 8005fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8005fb8:	e7fe      	b.n	8005fb8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d002      	beq.n	8005fc6 <xQueueGenericCreateStatic+0x4e>
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d001      	beq.n	8005fca <xQueueGenericCreateStatic+0x52>
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e000      	b.n	8005fcc <xQueueGenericCreateStatic+0x54>
 8005fca:	2300      	movs	r3, #0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d109      	bne.n	8005fe4 <xQueueGenericCreateStatic+0x6c>
 8005fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd4:	f383 8811 	msr	BASEPRI, r3
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	623b      	str	r3, [r7, #32]
 8005fe2:	e7fe      	b.n	8005fe2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d102      	bne.n	8005ff0 <xQueueGenericCreateStatic+0x78>
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d101      	bne.n	8005ff4 <xQueueGenericCreateStatic+0x7c>
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e000      	b.n	8005ff6 <xQueueGenericCreateStatic+0x7e>
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d109      	bne.n	800600e <xQueueGenericCreateStatic+0x96>
 8005ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffe:	f383 8811 	msr	BASEPRI, r3
 8006002:	f3bf 8f6f 	isb	sy
 8006006:	f3bf 8f4f 	dsb	sy
 800600a:	61fb      	str	r3, [r7, #28]
 800600c:	e7fe      	b.n	800600c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800600e:	2350      	movs	r3, #80	; 0x50
 8006010:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2b50      	cmp	r3, #80	; 0x50
 8006016:	d009      	beq.n	800602c <xQueueGenericCreateStatic+0xb4>
 8006018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601c:	f383 8811 	msr	BASEPRI, r3
 8006020:	f3bf 8f6f 	isb	sy
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	61bb      	str	r3, [r7, #24]
 800602a:	e7fe      	b.n	800602a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00d      	beq.n	8006052 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006038:	2201      	movs	r2, #1
 800603a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800603e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	4613      	mov	r3, r2
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	68b9      	ldr	r1, [r7, #8]
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f000 f805 	bl	800605c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006054:	4618      	mov	r0, r3
 8006056:	3730      	adds	r7, #48	; 0x30
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
 8006068:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d103      	bne.n	8006078 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	69ba      	ldr	r2, [r7, #24]
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	e002      	b.n	800607e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	68ba      	ldr	r2, [r7, #8]
 8006088:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800608a:	2101      	movs	r1, #1
 800608c:	69b8      	ldr	r0, [r7, #24]
 800608e:	f7ff ff0b 	bl	8005ea8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	78fa      	ldrb	r2, [r7, #3]
 8006096:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800609a:	bf00      	nop
 800609c:	3710      	adds	r7, #16
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
	...

080060a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b08e      	sub	sp, #56	; 0x38
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
 80060b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80060b2:	2300      	movs	r3, #0
 80060b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80060ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d109      	bne.n	80060d4 <xQueueGenericSend+0x30>
 80060c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80060d2:	e7fe      	b.n	80060d2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d103      	bne.n	80060e2 <xQueueGenericSend+0x3e>
 80060da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <xQueueGenericSend+0x42>
 80060e2:	2301      	movs	r3, #1
 80060e4:	e000      	b.n	80060e8 <xQueueGenericSend+0x44>
 80060e6:	2300      	movs	r3, #0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d109      	bne.n	8006100 <xQueueGenericSend+0x5c>
 80060ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f0:	f383 8811 	msr	BASEPRI, r3
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	627b      	str	r3, [r7, #36]	; 0x24
 80060fe:	e7fe      	b.n	80060fe <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	2b02      	cmp	r3, #2
 8006104:	d103      	bne.n	800610e <xQueueGenericSend+0x6a>
 8006106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800610a:	2b01      	cmp	r3, #1
 800610c:	d101      	bne.n	8006112 <xQueueGenericSend+0x6e>
 800610e:	2301      	movs	r3, #1
 8006110:	e000      	b.n	8006114 <xQueueGenericSend+0x70>
 8006112:	2300      	movs	r3, #0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d109      	bne.n	800612c <xQueueGenericSend+0x88>
 8006118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611c:	f383 8811 	msr	BASEPRI, r3
 8006120:	f3bf 8f6f 	isb	sy
 8006124:	f3bf 8f4f 	dsb	sy
 8006128:	623b      	str	r3, [r7, #32]
 800612a:	e7fe      	b.n	800612a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800612c:	f001 f9be 	bl	80074ac <xTaskGetSchedulerState>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d102      	bne.n	800613c <xQueueGenericSend+0x98>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d101      	bne.n	8006140 <xQueueGenericSend+0x9c>
 800613c:	2301      	movs	r3, #1
 800613e:	e000      	b.n	8006142 <xQueueGenericSend+0x9e>
 8006140:	2300      	movs	r3, #0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d109      	bne.n	800615a <xQueueGenericSend+0xb6>
 8006146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614a:	f383 8811 	msr	BASEPRI, r3
 800614e:	f3bf 8f6f 	isb	sy
 8006152:	f3bf 8f4f 	dsb	sy
 8006156:	61fb      	str	r3, [r7, #28]
 8006158:	e7fe      	b.n	8006158 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800615a:	f001 fe7d 	bl	8007e58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800615e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006160:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006166:	429a      	cmp	r2, r3
 8006168:	d302      	bcc.n	8006170 <xQueueGenericSend+0xcc>
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	2b02      	cmp	r3, #2
 800616e:	d129      	bne.n	80061c4 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006170:	683a      	ldr	r2, [r7, #0]
 8006172:	68b9      	ldr	r1, [r7, #8]
 8006174:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006176:	f000 f9ff 	bl	8006578 <prvCopyDataToQueue>
 800617a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800617c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006180:	2b00      	cmp	r3, #0
 8006182:	d010      	beq.n	80061a6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006186:	3324      	adds	r3, #36	; 0x24
 8006188:	4618      	mov	r0, r3
 800618a:	f000 ffd5 	bl	8007138 <xTaskRemoveFromEventList>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d013      	beq.n	80061bc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006194:	4b3f      	ldr	r3, [pc, #252]	; (8006294 <xQueueGenericSend+0x1f0>)
 8006196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800619a:	601a      	str	r2, [r3, #0]
 800619c:	f3bf 8f4f 	dsb	sy
 80061a0:	f3bf 8f6f 	isb	sy
 80061a4:	e00a      	b.n	80061bc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80061a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d007      	beq.n	80061bc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80061ac:	4b39      	ldr	r3, [pc, #228]	; (8006294 <xQueueGenericSend+0x1f0>)
 80061ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	f3bf 8f4f 	dsb	sy
 80061b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80061bc:	f001 fe7a 	bl	8007eb4 <vPortExitCritical>
				return pdPASS;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e063      	b.n	800628c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d103      	bne.n	80061d2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80061ca:	f001 fe73 	bl	8007eb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80061ce:	2300      	movs	r3, #0
 80061d0:	e05c      	b.n	800628c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80061d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d106      	bne.n	80061e6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80061d8:	f107 0314 	add.w	r3, r7, #20
 80061dc:	4618      	mov	r0, r3
 80061de:	f001 f80d 	bl	80071fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061e2:	2301      	movs	r3, #1
 80061e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061e6:	f001 fe65 	bl	8007eb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80061ea:	f000 fd67 	bl	8006cbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061ee:	f001 fe33 	bl	8007e58 <vPortEnterCritical>
 80061f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061f8:	b25b      	sxtb	r3, r3
 80061fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061fe:	d103      	bne.n	8006208 <xQueueGenericSend+0x164>
 8006200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006202:	2200      	movs	r2, #0
 8006204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800620e:	b25b      	sxtb	r3, r3
 8006210:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006214:	d103      	bne.n	800621e <xQueueGenericSend+0x17a>
 8006216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006218:	2200      	movs	r2, #0
 800621a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800621e:	f001 fe49 	bl	8007eb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006222:	1d3a      	adds	r2, r7, #4
 8006224:	f107 0314 	add.w	r3, r7, #20
 8006228:	4611      	mov	r1, r2
 800622a:	4618      	mov	r0, r3
 800622c:	f000 fffc 	bl	8007228 <xTaskCheckForTimeOut>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d124      	bne.n	8006280 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006236:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006238:	f000 fa96 	bl	8006768 <prvIsQueueFull>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d018      	beq.n	8006274 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006244:	3310      	adds	r3, #16
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	4611      	mov	r1, r2
 800624a:	4618      	mov	r0, r3
 800624c:	f000 ff26 	bl	800709c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006250:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006252:	f000 fa21 	bl	8006698 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006256:	f000 fd3f 	bl	8006cd8 <xTaskResumeAll>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	f47f af7c 	bne.w	800615a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006262:	4b0c      	ldr	r3, [pc, #48]	; (8006294 <xQueueGenericSend+0x1f0>)
 8006264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006268:	601a      	str	r2, [r3, #0]
 800626a:	f3bf 8f4f 	dsb	sy
 800626e:	f3bf 8f6f 	isb	sy
 8006272:	e772      	b.n	800615a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006274:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006276:	f000 fa0f 	bl	8006698 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800627a:	f000 fd2d 	bl	8006cd8 <xTaskResumeAll>
 800627e:	e76c      	b.n	800615a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006280:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006282:	f000 fa09 	bl	8006698 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006286:	f000 fd27 	bl	8006cd8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800628a:	2300      	movs	r3, #0
		}
	}
}
 800628c:	4618      	mov	r0, r3
 800628e:	3738      	adds	r7, #56	; 0x38
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	e000ed04 	.word	0xe000ed04

08006298 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b08e      	sub	sp, #56	; 0x38
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
 80062a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80062aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d109      	bne.n	80062c4 <xQueueGenericSendFromISR+0x2c>
 80062b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b4:	f383 8811 	msr	BASEPRI, r3
 80062b8:	f3bf 8f6f 	isb	sy
 80062bc:	f3bf 8f4f 	dsb	sy
 80062c0:	627b      	str	r3, [r7, #36]	; 0x24
 80062c2:	e7fe      	b.n	80062c2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d103      	bne.n	80062d2 <xQueueGenericSendFromISR+0x3a>
 80062ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d101      	bne.n	80062d6 <xQueueGenericSendFromISR+0x3e>
 80062d2:	2301      	movs	r3, #1
 80062d4:	e000      	b.n	80062d8 <xQueueGenericSendFromISR+0x40>
 80062d6:	2300      	movs	r3, #0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d109      	bne.n	80062f0 <xQueueGenericSendFromISR+0x58>
 80062dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e0:	f383 8811 	msr	BASEPRI, r3
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	623b      	str	r3, [r7, #32]
 80062ee:	e7fe      	b.n	80062ee <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d103      	bne.n	80062fe <xQueueGenericSendFromISR+0x66>
 80062f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d101      	bne.n	8006302 <xQueueGenericSendFromISR+0x6a>
 80062fe:	2301      	movs	r3, #1
 8006300:	e000      	b.n	8006304 <xQueueGenericSendFromISR+0x6c>
 8006302:	2300      	movs	r3, #0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d109      	bne.n	800631c <xQueueGenericSendFromISR+0x84>
 8006308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630c:	f383 8811 	msr	BASEPRI, r3
 8006310:	f3bf 8f6f 	isb	sy
 8006314:	f3bf 8f4f 	dsb	sy
 8006318:	61fb      	str	r3, [r7, #28]
 800631a:	e7fe      	b.n	800631a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800631c:	f001 fe56 	bl	8007fcc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006320:	f3ef 8211 	mrs	r2, BASEPRI
 8006324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006328:	f383 8811 	msr	BASEPRI, r3
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	61ba      	str	r2, [r7, #24]
 8006336:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006338:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800633a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800633c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006344:	429a      	cmp	r2, r3
 8006346:	d302      	bcc.n	800634e <xQueueGenericSendFromISR+0xb6>
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	2b02      	cmp	r3, #2
 800634c:	d12c      	bne.n	80063a8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800634e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006350:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006354:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006358:	683a      	ldr	r2, [r7, #0]
 800635a:	68b9      	ldr	r1, [r7, #8]
 800635c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800635e:	f000 f90b 	bl	8006578 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006362:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006366:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800636a:	d112      	bne.n	8006392 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800636c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006370:	2b00      	cmp	r3, #0
 8006372:	d016      	beq.n	80063a2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006376:	3324      	adds	r3, #36	; 0x24
 8006378:	4618      	mov	r0, r3
 800637a:	f000 fedd 	bl	8007138 <xTaskRemoveFromEventList>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00e      	beq.n	80063a2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00b      	beq.n	80063a2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	601a      	str	r2, [r3, #0]
 8006390:	e007      	b.n	80063a2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006392:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006396:	3301      	adds	r3, #1
 8006398:	b2db      	uxtb	r3, r3
 800639a:	b25a      	sxtb	r2, r3
 800639c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80063a2:	2301      	movs	r3, #1
 80063a4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80063a6:	e001      	b.n	80063ac <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80063a8:	2300      	movs	r3, #0
 80063aa:	637b      	str	r3, [r7, #52]	; 0x34
 80063ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ae:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80063b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3738      	adds	r7, #56	; 0x38
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b08c      	sub	sp, #48	; 0x30
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80063cc:	2300      	movs	r3, #0
 80063ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80063d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d109      	bne.n	80063ee <xQueueReceive+0x2e>
	__asm volatile
 80063da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063de:	f383 8811 	msr	BASEPRI, r3
 80063e2:	f3bf 8f6f 	isb	sy
 80063e6:	f3bf 8f4f 	dsb	sy
 80063ea:	623b      	str	r3, [r7, #32]
 80063ec:	e7fe      	b.n	80063ec <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d103      	bne.n	80063fc <xQueueReceive+0x3c>
 80063f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d101      	bne.n	8006400 <xQueueReceive+0x40>
 80063fc:	2301      	movs	r3, #1
 80063fe:	e000      	b.n	8006402 <xQueueReceive+0x42>
 8006400:	2300      	movs	r3, #0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d109      	bne.n	800641a <xQueueReceive+0x5a>
 8006406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640a:	f383 8811 	msr	BASEPRI, r3
 800640e:	f3bf 8f6f 	isb	sy
 8006412:	f3bf 8f4f 	dsb	sy
 8006416:	61fb      	str	r3, [r7, #28]
 8006418:	e7fe      	b.n	8006418 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800641a:	f001 f847 	bl	80074ac <xTaskGetSchedulerState>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d102      	bne.n	800642a <xQueueReceive+0x6a>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d101      	bne.n	800642e <xQueueReceive+0x6e>
 800642a:	2301      	movs	r3, #1
 800642c:	e000      	b.n	8006430 <xQueueReceive+0x70>
 800642e:	2300      	movs	r3, #0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d109      	bne.n	8006448 <xQueueReceive+0x88>
 8006434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006438:	f383 8811 	msr	BASEPRI, r3
 800643c:	f3bf 8f6f 	isb	sy
 8006440:	f3bf 8f4f 	dsb	sy
 8006444:	61bb      	str	r3, [r7, #24]
 8006446:	e7fe      	b.n	8006446 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006448:	f001 fd06 	bl	8007e58 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800644c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006450:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006454:	2b00      	cmp	r3, #0
 8006456:	d01f      	beq.n	8006498 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006458:	68b9      	ldr	r1, [r7, #8]
 800645a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800645c:	f000 f8f6 	bl	800664c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006462:	1e5a      	subs	r2, r3, #1
 8006464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006466:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00f      	beq.n	8006490 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006472:	3310      	adds	r3, #16
 8006474:	4618      	mov	r0, r3
 8006476:	f000 fe5f 	bl	8007138 <xTaskRemoveFromEventList>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d007      	beq.n	8006490 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006480:	4b3c      	ldr	r3, [pc, #240]	; (8006574 <xQueueReceive+0x1b4>)
 8006482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006486:	601a      	str	r2, [r3, #0]
 8006488:	f3bf 8f4f 	dsb	sy
 800648c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006490:	f001 fd10 	bl	8007eb4 <vPortExitCritical>
				return pdPASS;
 8006494:	2301      	movs	r3, #1
 8006496:	e069      	b.n	800656c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d103      	bne.n	80064a6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800649e:	f001 fd09 	bl	8007eb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80064a2:	2300      	movs	r3, #0
 80064a4:	e062      	b.n	800656c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d106      	bne.n	80064ba <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064ac:	f107 0310 	add.w	r3, r7, #16
 80064b0:	4618      	mov	r0, r3
 80064b2:	f000 fea3 	bl	80071fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064b6:	2301      	movs	r3, #1
 80064b8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064ba:	f001 fcfb 	bl	8007eb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064be:	f000 fbfd 	bl	8006cbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064c2:	f001 fcc9 	bl	8007e58 <vPortEnterCritical>
 80064c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064cc:	b25b      	sxtb	r3, r3
 80064ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064d2:	d103      	bne.n	80064dc <xQueueReceive+0x11c>
 80064d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064e2:	b25b      	sxtb	r3, r3
 80064e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064e8:	d103      	bne.n	80064f2 <xQueueReceive+0x132>
 80064ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064f2:	f001 fcdf 	bl	8007eb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064f6:	1d3a      	adds	r2, r7, #4
 80064f8:	f107 0310 	add.w	r3, r7, #16
 80064fc:	4611      	mov	r1, r2
 80064fe:	4618      	mov	r0, r3
 8006500:	f000 fe92 	bl	8007228 <xTaskCheckForTimeOut>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d123      	bne.n	8006552 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800650a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800650c:	f000 f916 	bl	800673c <prvIsQueueEmpty>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d017      	beq.n	8006546 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006518:	3324      	adds	r3, #36	; 0x24
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	4611      	mov	r1, r2
 800651e:	4618      	mov	r0, r3
 8006520:	f000 fdbc 	bl	800709c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006524:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006526:	f000 f8b7 	bl	8006698 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800652a:	f000 fbd5 	bl	8006cd8 <xTaskResumeAll>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d189      	bne.n	8006448 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006534:	4b0f      	ldr	r3, [pc, #60]	; (8006574 <xQueueReceive+0x1b4>)
 8006536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800653a:	601a      	str	r2, [r3, #0]
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	f3bf 8f6f 	isb	sy
 8006544:	e780      	b.n	8006448 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006546:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006548:	f000 f8a6 	bl	8006698 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800654c:	f000 fbc4 	bl	8006cd8 <xTaskResumeAll>
 8006550:	e77a      	b.n	8006448 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006552:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006554:	f000 f8a0 	bl	8006698 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006558:	f000 fbbe 	bl	8006cd8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800655c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800655e:	f000 f8ed 	bl	800673c <prvIsQueueEmpty>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	f43f af6f 	beq.w	8006448 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800656a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800656c:	4618      	mov	r0, r3
 800656e:	3730      	adds	r7, #48	; 0x30
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	e000ed04 	.word	0xe000ed04

08006578 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b086      	sub	sp, #24
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006584:	2300      	movs	r3, #0
 8006586:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10d      	bne.n	80065b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d14d      	bne.n	800663a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	4618      	mov	r0, r3
 80065a4:	f000 ffa0 	bl	80074e8 <xTaskPriorityDisinherit>
 80065a8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	605a      	str	r2, [r3, #4]
 80065b0:	e043      	b.n	800663a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d119      	bne.n	80065ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6898      	ldr	r0, [r3, #8]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c0:	461a      	mov	r2, r3
 80065c2:	68b9      	ldr	r1, [r7, #8]
 80065c4:	f001 ff36 	bl	8008434 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	689a      	ldr	r2, [r3, #8]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d0:	441a      	add	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	689a      	ldr	r2, [r3, #8]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d32b      	bcc.n	800663a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	609a      	str	r2, [r3, #8]
 80065ea:	e026      	b.n	800663a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	68d8      	ldr	r0, [r3, #12]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f4:	461a      	mov	r2, r3
 80065f6:	68b9      	ldr	r1, [r7, #8]
 80065f8:	f001 ff1c 	bl	8008434 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	68da      	ldr	r2, [r3, #12]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006604:	425b      	negs	r3, r3
 8006606:	441a      	add	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	68da      	ldr	r2, [r3, #12]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	429a      	cmp	r2, r3
 8006616:	d207      	bcs.n	8006628 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	685a      	ldr	r2, [r3, #4]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006620:	425b      	negs	r3, r3
 8006622:	441a      	add	r2, r3
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2b02      	cmp	r3, #2
 800662c:	d105      	bne.n	800663a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d002      	beq.n	800663a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	3b01      	subs	r3, #1
 8006638:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	1c5a      	adds	r2, r3, #1
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006642:	697b      	ldr	r3, [r7, #20]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3718      	adds	r7, #24
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665a:	2b00      	cmp	r3, #0
 800665c:	d018      	beq.n	8006690 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	68da      	ldr	r2, [r3, #12]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006666:	441a      	add	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68da      	ldr	r2, [r3, #12]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	429a      	cmp	r2, r3
 8006676:	d303      	bcc.n	8006680 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	68d9      	ldr	r1, [r3, #12]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006688:	461a      	mov	r2, r3
 800668a:	6838      	ldr	r0, [r7, #0]
 800668c:	f001 fed2 	bl	8008434 <memcpy>
	}
}
 8006690:	bf00      	nop
 8006692:	3708      	adds	r7, #8
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80066a0:	f001 fbda 	bl	8007e58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066ac:	e011      	b.n	80066d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d012      	beq.n	80066dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	3324      	adds	r3, #36	; 0x24
 80066ba:	4618      	mov	r0, r3
 80066bc:	f000 fd3c 	bl	8007138 <xTaskRemoveFromEventList>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d001      	beq.n	80066ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80066c6:	f000 fe0f 	bl	80072e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80066ca:	7bfb      	ldrb	r3, [r7, #15]
 80066cc:	3b01      	subs	r3, #1
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	dce9      	bgt.n	80066ae <prvUnlockQueue+0x16>
 80066da:	e000      	b.n	80066de <prvUnlockQueue+0x46>
					break;
 80066dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	22ff      	movs	r2, #255	; 0xff
 80066e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80066e6:	f001 fbe5 	bl	8007eb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80066ea:	f001 fbb5 	bl	8007e58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80066f6:	e011      	b.n	800671c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d012      	beq.n	8006726 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	3310      	adds	r3, #16
 8006704:	4618      	mov	r0, r3
 8006706:	f000 fd17 	bl	8007138 <xTaskRemoveFromEventList>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d001      	beq.n	8006714 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006710:	f000 fdea 	bl	80072e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006714:	7bbb      	ldrb	r3, [r7, #14]
 8006716:	3b01      	subs	r3, #1
 8006718:	b2db      	uxtb	r3, r3
 800671a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800671c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006720:	2b00      	cmp	r3, #0
 8006722:	dce9      	bgt.n	80066f8 <prvUnlockQueue+0x60>
 8006724:	e000      	b.n	8006728 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006726:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	22ff      	movs	r2, #255	; 0xff
 800672c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006730:	f001 fbc0 	bl	8007eb4 <vPortExitCritical>
}
 8006734:	bf00      	nop
 8006736:	3710      	adds	r7, #16
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006744:	f001 fb88 	bl	8007e58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674c:	2b00      	cmp	r3, #0
 800674e:	d102      	bne.n	8006756 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006750:	2301      	movs	r3, #1
 8006752:	60fb      	str	r3, [r7, #12]
 8006754:	e001      	b.n	800675a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006756:	2300      	movs	r3, #0
 8006758:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800675a:	f001 fbab 	bl	8007eb4 <vPortExitCritical>

	return xReturn;
 800675e:	68fb      	ldr	r3, [r7, #12]
}
 8006760:	4618      	mov	r0, r3
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006770:	f001 fb72 	bl	8007e58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800677c:	429a      	cmp	r2, r3
 800677e:	d102      	bne.n	8006786 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006780:	2301      	movs	r3, #1
 8006782:	60fb      	str	r3, [r7, #12]
 8006784:	e001      	b.n	800678a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006786:	2300      	movs	r3, #0
 8006788:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800678a:	f001 fb93 	bl	8007eb4 <vPortExitCritical>

	return xReturn;
 800678e:	68fb      	ldr	r3, [r7, #12]
}
 8006790:	4618      	mov	r0, r3
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80067a2:	2300      	movs	r3, #0
 80067a4:	60fb      	str	r3, [r7, #12]
 80067a6:	e014      	b.n	80067d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80067a8:	4a0e      	ldr	r2, [pc, #56]	; (80067e4 <vQueueAddToRegistry+0x4c>)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d10b      	bne.n	80067cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80067b4:	490b      	ldr	r1, [pc, #44]	; (80067e4 <vQueueAddToRegistry+0x4c>)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	683a      	ldr	r2, [r7, #0]
 80067ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80067be:	4a09      	ldr	r2, [pc, #36]	; (80067e4 <vQueueAddToRegistry+0x4c>)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	00db      	lsls	r3, r3, #3
 80067c4:	4413      	add	r3, r2
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80067ca:	e005      	b.n	80067d8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	3301      	adds	r3, #1
 80067d0:	60fb      	str	r3, [r7, #12]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2b07      	cmp	r3, #7
 80067d6:	d9e7      	bls.n	80067a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80067d8:	bf00      	nop
 80067da:	3714      	adds	r7, #20
 80067dc:	46bd      	mov	sp, r7
 80067de:	bc80      	pop	{r7}
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	20002bb8 	.word	0x20002bb8

080067e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b086      	sub	sp, #24
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80067f8:	f001 fb2e 	bl	8007e58 <vPortEnterCritical>
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006802:	b25b      	sxtb	r3, r3
 8006804:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006808:	d103      	bne.n	8006812 <vQueueWaitForMessageRestricted+0x2a>
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006818:	b25b      	sxtb	r3, r3
 800681a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800681e:	d103      	bne.n	8006828 <vQueueWaitForMessageRestricted+0x40>
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006828:	f001 fb44 	bl	8007eb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006830:	2b00      	cmp	r3, #0
 8006832:	d106      	bne.n	8006842 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	3324      	adds	r3, #36	; 0x24
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	68b9      	ldr	r1, [r7, #8]
 800683c:	4618      	mov	r0, r3
 800683e:	f000 fc51 	bl	80070e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006842:	6978      	ldr	r0, [r7, #20]
 8006844:	f7ff ff28 	bl	8006698 <prvUnlockQueue>
	}
 8006848:	bf00      	nop
 800684a:	3718      	adds	r7, #24
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006850:	b580      	push	{r7, lr}
 8006852:	b08e      	sub	sp, #56	; 0x38
 8006854:	af04      	add	r7, sp, #16
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]
 800685c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800685e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006860:	2b00      	cmp	r3, #0
 8006862:	d109      	bne.n	8006878 <xTaskCreateStatic+0x28>
 8006864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006868:	f383 8811 	msr	BASEPRI, r3
 800686c:	f3bf 8f6f 	isb	sy
 8006870:	f3bf 8f4f 	dsb	sy
 8006874:	623b      	str	r3, [r7, #32]
 8006876:	e7fe      	b.n	8006876 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687a:	2b00      	cmp	r3, #0
 800687c:	d109      	bne.n	8006892 <xTaskCreateStatic+0x42>
 800687e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006882:	f383 8811 	msr	BASEPRI, r3
 8006886:	f3bf 8f6f 	isb	sy
 800688a:	f3bf 8f4f 	dsb	sy
 800688e:	61fb      	str	r3, [r7, #28]
 8006890:	e7fe      	b.n	8006890 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006892:	2360      	movs	r3, #96	; 0x60
 8006894:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	2b60      	cmp	r3, #96	; 0x60
 800689a:	d009      	beq.n	80068b0 <xTaskCreateStatic+0x60>
 800689c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a0:	f383 8811 	msr	BASEPRI, r3
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	61bb      	str	r3, [r7, #24]
 80068ae:	e7fe      	b.n	80068ae <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80068b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d01e      	beq.n	80068f4 <xTaskCreateStatic+0xa4>
 80068b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d01b      	beq.n	80068f4 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80068bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80068c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c8:	2202      	movs	r2, #2
 80068ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80068ce:	2300      	movs	r3, #0
 80068d0:	9303      	str	r3, [sp, #12]
 80068d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d4:	9302      	str	r3, [sp, #8]
 80068d6:	f107 0314 	add.w	r3, r7, #20
 80068da:	9301      	str	r3, [sp, #4]
 80068dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068de:	9300      	str	r3, [sp, #0]
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	68b9      	ldr	r1, [r7, #8]
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f000 f850 	bl	800698c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068ee:	f000 f8d7 	bl	8006aa0 <prvAddNewTaskToReadyList>
 80068f2:	e001      	b.n	80068f8 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80068f4:	2300      	movs	r3, #0
 80068f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80068f8:	697b      	ldr	r3, [r7, #20]
	}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3728      	adds	r7, #40	; 0x28
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006902:	b580      	push	{r7, lr}
 8006904:	b08c      	sub	sp, #48	; 0x30
 8006906:	af04      	add	r7, sp, #16
 8006908:	60f8      	str	r0, [r7, #12]
 800690a:	60b9      	str	r1, [r7, #8]
 800690c:	603b      	str	r3, [r7, #0]
 800690e:	4613      	mov	r3, r2
 8006910:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006912:	88fb      	ldrh	r3, [r7, #6]
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4618      	mov	r0, r3
 8006918:	f001 fb94 	bl	8008044 <pvPortMalloc>
 800691c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00e      	beq.n	8006942 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006924:	2060      	movs	r0, #96	; 0x60
 8006926:	f001 fb8d 	bl	8008044 <pvPortMalloc>
 800692a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d003      	beq.n	800693a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	631a      	str	r2, [r3, #48]	; 0x30
 8006938:	e005      	b.n	8006946 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800693a:	6978      	ldr	r0, [r7, #20]
 800693c:	f001 fc44 	bl	80081c8 <vPortFree>
 8006940:	e001      	b.n	8006946 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006942:	2300      	movs	r3, #0
 8006944:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d017      	beq.n	800697c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006954:	88fa      	ldrh	r2, [r7, #6]
 8006956:	2300      	movs	r3, #0
 8006958:	9303      	str	r3, [sp, #12]
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	9302      	str	r3, [sp, #8]
 800695e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006960:	9301      	str	r3, [sp, #4]
 8006962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	68b9      	ldr	r1, [r7, #8]
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f000 f80e 	bl	800698c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006970:	69f8      	ldr	r0, [r7, #28]
 8006972:	f000 f895 	bl	8006aa0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006976:	2301      	movs	r3, #1
 8006978:	61bb      	str	r3, [r7, #24]
 800697a:	e002      	b.n	8006982 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800697c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006980:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006982:	69bb      	ldr	r3, [r7, #24]
	}
 8006984:	4618      	mov	r0, r3
 8006986:	3720      	adds	r7, #32
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b088      	sub	sp, #32
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
 8006998:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800699a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	461a      	mov	r2, r3
 80069a4:	21a5      	movs	r1, #165	; 0xa5
 80069a6:	f001 fd50 	bl	800844a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80069aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80069b4:	3b01      	subs	r3, #1
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	4413      	add	r3, r2
 80069ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	f023 0307 	bic.w	r3, r3, #7
 80069c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	f003 0307 	and.w	r3, r3, #7
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d009      	beq.n	80069e2 <prvInitialiseNewTask+0x56>
 80069ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d2:	f383 8811 	msr	BASEPRI, r3
 80069d6:	f3bf 8f6f 	isb	sy
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	617b      	str	r3, [r7, #20]
 80069e0:	e7fe      	b.n	80069e0 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80069e2:	2300      	movs	r3, #0
 80069e4:	61fb      	str	r3, [r7, #28]
 80069e6:	e012      	b.n	8006a0e <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	4413      	add	r3, r2
 80069ee:	7819      	ldrb	r1, [r3, #0]
 80069f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	4413      	add	r3, r2
 80069f6:	3334      	adds	r3, #52	; 0x34
 80069f8:	460a      	mov	r2, r1
 80069fa:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80069fc:	68ba      	ldr	r2, [r7, #8]
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	4413      	add	r3, r2
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d006      	beq.n	8006a16 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	61fb      	str	r3, [r7, #28]
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	2b0f      	cmp	r3, #15
 8006a12:	d9e9      	bls.n	80069e8 <prvInitialiseNewTask+0x5c>
 8006a14:	e000      	b.n	8006a18 <prvInitialiseNewTask+0x8c>
		{
			break;
 8006a16:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a22:	2b37      	cmp	r3, #55	; 0x37
 8006a24:	d901      	bls.n	8006a2a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006a26:	2337      	movs	r3, #55	; 0x37
 8006a28:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a2e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a34:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a38:	2200      	movs	r2, #0
 8006a3a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3e:	3304      	adds	r3, #4
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7ff f9a0 	bl	8005d86 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a48:	3318      	adds	r3, #24
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7ff f99b 	bl	8005d86 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a54:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a58:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a64:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8006a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a68:	2200      	movs	r2, #0
 8006a6a:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6e:	2200      	movs	r2, #0
 8006a70:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	68f9      	ldr	r1, [r7, #12]
 8006a7e:	69b8      	ldr	r0, [r7, #24]
 8006a80:	f001 f8fc 	bl	8007c7c <pxPortInitialiseStack>
 8006a84:	4602      	mov	r2, r0
 8006a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a88:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d002      	beq.n	8006a96 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a96:	bf00      	nop
 8006a98:	3720      	adds	r7, #32
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
	...

08006aa0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006aa8:	f001 f9d6 	bl	8007e58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006aac:	4b2d      	ldr	r3, [pc, #180]	; (8006b64 <prvAddNewTaskToReadyList+0xc4>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	4a2c      	ldr	r2, [pc, #176]	; (8006b64 <prvAddNewTaskToReadyList+0xc4>)
 8006ab4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006ab6:	4b2c      	ldr	r3, [pc, #176]	; (8006b68 <prvAddNewTaskToReadyList+0xc8>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d109      	bne.n	8006ad2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006abe:	4a2a      	ldr	r2, [pc, #168]	; (8006b68 <prvAddNewTaskToReadyList+0xc8>)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006ac4:	4b27      	ldr	r3, [pc, #156]	; (8006b64 <prvAddNewTaskToReadyList+0xc4>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d110      	bne.n	8006aee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006acc:	f000 fc30 	bl	8007330 <prvInitialiseTaskLists>
 8006ad0:	e00d      	b.n	8006aee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006ad2:	4b26      	ldr	r3, [pc, #152]	; (8006b6c <prvAddNewTaskToReadyList+0xcc>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d109      	bne.n	8006aee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006ada:	4b23      	ldr	r3, [pc, #140]	; (8006b68 <prvAddNewTaskToReadyList+0xc8>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d802      	bhi.n	8006aee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006ae8:	4a1f      	ldr	r2, [pc, #124]	; (8006b68 <prvAddNewTaskToReadyList+0xc8>)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006aee:	4b20      	ldr	r3, [pc, #128]	; (8006b70 <prvAddNewTaskToReadyList+0xd0>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	3301      	adds	r3, #1
 8006af4:	4a1e      	ldr	r2, [pc, #120]	; (8006b70 <prvAddNewTaskToReadyList+0xd0>)
 8006af6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006af8:	4b1d      	ldr	r3, [pc, #116]	; (8006b70 <prvAddNewTaskToReadyList+0xd0>)
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b04:	4b1b      	ldr	r3, [pc, #108]	; (8006b74 <prvAddNewTaskToReadyList+0xd4>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d903      	bls.n	8006b14 <prvAddNewTaskToReadyList+0x74>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b10:	4a18      	ldr	r2, [pc, #96]	; (8006b74 <prvAddNewTaskToReadyList+0xd4>)
 8006b12:	6013      	str	r3, [r2, #0]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b18:	4613      	mov	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	4413      	add	r3, r2
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	4a15      	ldr	r2, [pc, #84]	; (8006b78 <prvAddNewTaskToReadyList+0xd8>)
 8006b22:	441a      	add	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	3304      	adds	r3, #4
 8006b28:	4619      	mov	r1, r3
 8006b2a:	4610      	mov	r0, r2
 8006b2c:	f7ff f937 	bl	8005d9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006b30:	f001 f9c0 	bl	8007eb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006b34:	4b0d      	ldr	r3, [pc, #52]	; (8006b6c <prvAddNewTaskToReadyList+0xcc>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d00e      	beq.n	8006b5a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006b3c:	4b0a      	ldr	r3, [pc, #40]	; (8006b68 <prvAddNewTaskToReadyList+0xc8>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d207      	bcs.n	8006b5a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006b4a:	4b0c      	ldr	r3, [pc, #48]	; (8006b7c <prvAddNewTaskToReadyList+0xdc>)
 8006b4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b50:	601a      	str	r2, [r3, #0]
 8006b52:	f3bf 8f4f 	dsb	sy
 8006b56:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b5a:	bf00      	nop
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	20000c34 	.word	0x20000c34
 8006b68:	20000760 	.word	0x20000760
 8006b6c:	20000c40 	.word	0x20000c40
 8006b70:	20000c50 	.word	0x20000c50
 8006b74:	20000c3c 	.word	0x20000c3c
 8006b78:	20000764 	.word	0x20000764
 8006b7c:	e000ed04 	.word	0xe000ed04

08006b80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d016      	beq.n	8006bc0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006b92:	4b13      	ldr	r3, [pc, #76]	; (8006be0 <vTaskDelay+0x60>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d009      	beq.n	8006bae <vTaskDelay+0x2e>
 8006b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9e:	f383 8811 	msr	BASEPRI, r3
 8006ba2:	f3bf 8f6f 	isb	sy
 8006ba6:	f3bf 8f4f 	dsb	sy
 8006baa:	60bb      	str	r3, [r7, #8]
 8006bac:	e7fe      	b.n	8006bac <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006bae:	f000 f885 	bl	8006cbc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006bb2:	2100      	movs	r1, #0
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 fd03 	bl	80075c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006bba:	f000 f88d 	bl	8006cd8 <xTaskResumeAll>
 8006bbe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d107      	bne.n	8006bd6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006bc6:	4b07      	ldr	r3, [pc, #28]	; (8006be4 <vTaskDelay+0x64>)
 8006bc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006bd6:	bf00      	nop
 8006bd8:	3710      	adds	r7, #16
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	20000c5c 	.word	0x20000c5c
 8006be4:	e000ed04 	.word	0xe000ed04

08006be8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b08a      	sub	sp, #40	; 0x28
 8006bec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006bf6:	463a      	mov	r2, r7
 8006bf8:	1d39      	adds	r1, r7, #4
 8006bfa:	f107 0308 	add.w	r3, r7, #8
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7ff f870 	bl	8005ce4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006c04:	6839      	ldr	r1, [r7, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68ba      	ldr	r2, [r7, #8]
 8006c0a:	9202      	str	r2, [sp, #8]
 8006c0c:	9301      	str	r3, [sp, #4]
 8006c0e:	2300      	movs	r3, #0
 8006c10:	9300      	str	r3, [sp, #0]
 8006c12:	2300      	movs	r3, #0
 8006c14:	460a      	mov	r2, r1
 8006c16:	4922      	ldr	r1, [pc, #136]	; (8006ca0 <vTaskStartScheduler+0xb8>)
 8006c18:	4822      	ldr	r0, [pc, #136]	; (8006ca4 <vTaskStartScheduler+0xbc>)
 8006c1a:	f7ff fe19 	bl	8006850 <xTaskCreateStatic>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	4b21      	ldr	r3, [pc, #132]	; (8006ca8 <vTaskStartScheduler+0xc0>)
 8006c22:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006c24:	4b20      	ldr	r3, [pc, #128]	; (8006ca8 <vTaskStartScheduler+0xc0>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d002      	beq.n	8006c32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	617b      	str	r3, [r7, #20]
 8006c30:	e001      	b.n	8006c36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006c32:	2300      	movs	r3, #0
 8006c34:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d102      	bne.n	8006c42 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006c3c:	f000 fd14 	bl	8007668 <xTimerCreateTimerTask>
 8006c40:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d118      	bne.n	8006c7a <vTaskStartScheduler+0x92>
 8006c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4c:	f383 8811 	msr	BASEPRI, r3
 8006c50:	f3bf 8f6f 	isb	sy
 8006c54:	f3bf 8f4f 	dsb	sy
 8006c58:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c5a:	4b14      	ldr	r3, [pc, #80]	; (8006cac <vTaskStartScheduler+0xc4>)
 8006c5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c60:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006c62:	4b13      	ldr	r3, [pc, #76]	; (8006cb0 <vTaskStartScheduler+0xc8>)
 8006c64:	2201      	movs	r2, #1
 8006c66:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006c68:	4b12      	ldr	r3, [pc, #72]	; (8006cb4 <vTaskStartScheduler+0xcc>)
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8006c6e:	4b12      	ldr	r3, [pc, #72]	; (8006cb8 <vTaskStartScheduler+0xd0>)
 8006c70:	2200      	movs	r2, #0
 8006c72:	601a      	str	r2, [r3, #0]

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006c74:	f001 f880 	bl	8007d78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006c78:	e00d      	b.n	8006c96 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c80:	d109      	bne.n	8006c96 <vTaskStartScheduler+0xae>
 8006c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c86:	f383 8811 	msr	BASEPRI, r3
 8006c8a:	f3bf 8f6f 	isb	sy
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	60fb      	str	r3, [r7, #12]
 8006c94:	e7fe      	b.n	8006c94 <vTaskStartScheduler+0xac>
}
 8006c96:	bf00      	nop
 8006c98:	3718      	adds	r7, #24
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	080084cc 	.word	0x080084cc
 8006ca4:	08007301 	.word	0x08007301
 8006ca8:	20000c58 	.word	0x20000c58
 8006cac:	20000c54 	.word	0x20000c54
 8006cb0:	20000c40 	.word	0x20000c40
 8006cb4:	20000c38 	.word	0x20000c38
 8006cb8:	20002b70 	.word	0x20002b70

08006cbc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006cc0:	4b04      	ldr	r3, [pc, #16]	; (8006cd4 <vTaskSuspendAll+0x18>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	4a03      	ldr	r2, [pc, #12]	; (8006cd4 <vTaskSuspendAll+0x18>)
 8006cc8:	6013      	str	r3, [r2, #0]
}
 8006cca:	bf00      	nop
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bc80      	pop	{r7}
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	20000c5c 	.word	0x20000c5c

08006cd8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006ce6:	4b41      	ldr	r3, [pc, #260]	; (8006dec <xTaskResumeAll+0x114>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d109      	bne.n	8006d02 <xTaskResumeAll+0x2a>
 8006cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf2:	f383 8811 	msr	BASEPRI, r3
 8006cf6:	f3bf 8f6f 	isb	sy
 8006cfa:	f3bf 8f4f 	dsb	sy
 8006cfe:	603b      	str	r3, [r7, #0]
 8006d00:	e7fe      	b.n	8006d00 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006d02:	f001 f8a9 	bl	8007e58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006d06:	4b39      	ldr	r3, [pc, #228]	; (8006dec <xTaskResumeAll+0x114>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	4a37      	ldr	r2, [pc, #220]	; (8006dec <xTaskResumeAll+0x114>)
 8006d0e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d10:	4b36      	ldr	r3, [pc, #216]	; (8006dec <xTaskResumeAll+0x114>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d162      	bne.n	8006dde <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d18:	4b35      	ldr	r3, [pc, #212]	; (8006df0 <xTaskResumeAll+0x118>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d05e      	beq.n	8006dde <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d20:	e02f      	b.n	8006d82 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006d22:	4b34      	ldr	r3, [pc, #208]	; (8006df4 <xTaskResumeAll+0x11c>)
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	3318      	adds	r3, #24
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7ff f890 	bl	8005e54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	3304      	adds	r3, #4
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7ff f88b 	bl	8005e54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d42:	4b2d      	ldr	r3, [pc, #180]	; (8006df8 <xTaskResumeAll+0x120>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d903      	bls.n	8006d52 <xTaskResumeAll+0x7a>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4e:	4a2a      	ldr	r2, [pc, #168]	; (8006df8 <xTaskResumeAll+0x120>)
 8006d50:	6013      	str	r3, [r2, #0]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d56:	4613      	mov	r3, r2
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	4413      	add	r3, r2
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	4a27      	ldr	r2, [pc, #156]	; (8006dfc <xTaskResumeAll+0x124>)
 8006d60:	441a      	add	r2, r3
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	3304      	adds	r3, #4
 8006d66:	4619      	mov	r1, r3
 8006d68:	4610      	mov	r0, r2
 8006d6a:	f7ff f818 	bl	8005d9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d72:	4b23      	ldr	r3, [pc, #140]	; (8006e00 <xTaskResumeAll+0x128>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d302      	bcc.n	8006d82 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006d7c:	4b21      	ldr	r3, [pc, #132]	; (8006e04 <xTaskResumeAll+0x12c>)
 8006d7e:	2201      	movs	r2, #1
 8006d80:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d82:	4b1c      	ldr	r3, [pc, #112]	; (8006df4 <xTaskResumeAll+0x11c>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1cb      	bne.n	8006d22 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d001      	beq.n	8006d94 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006d90:	f000 fb68 	bl	8007464 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006d94:	4b1c      	ldr	r3, [pc, #112]	; (8006e08 <xTaskResumeAll+0x130>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d010      	beq.n	8006dc2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006da0:	f000 f844 	bl	8006e2c <xTaskIncrementTick>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d002      	beq.n	8006db0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006daa:	4b16      	ldr	r3, [pc, #88]	; (8006e04 <xTaskResumeAll+0x12c>)
 8006dac:	2201      	movs	r2, #1
 8006dae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	3b01      	subs	r3, #1
 8006db4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1f1      	bne.n	8006da0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006dbc:	4b12      	ldr	r3, [pc, #72]	; (8006e08 <xTaskResumeAll+0x130>)
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006dc2:	4b10      	ldr	r3, [pc, #64]	; (8006e04 <xTaskResumeAll+0x12c>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d009      	beq.n	8006dde <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006dce:	4b0f      	ldr	r3, [pc, #60]	; (8006e0c <xTaskResumeAll+0x134>)
 8006dd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dd4:	601a      	str	r2, [r3, #0]
 8006dd6:	f3bf 8f4f 	dsb	sy
 8006dda:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006dde:	f001 f869 	bl	8007eb4 <vPortExitCritical>

	return xAlreadyYielded;
 8006de2:	68bb      	ldr	r3, [r7, #8]
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3710      	adds	r7, #16
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	20000c5c 	.word	0x20000c5c
 8006df0:	20000c34 	.word	0x20000c34
 8006df4:	20000bf4 	.word	0x20000bf4
 8006df8:	20000c3c 	.word	0x20000c3c
 8006dfc:	20000764 	.word	0x20000764
 8006e00:	20000760 	.word	0x20000760
 8006e04:	20000c48 	.word	0x20000c48
 8006e08:	20000c44 	.word	0x20000c44
 8006e0c:	e000ed04 	.word	0xe000ed04

08006e10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006e16:	4b04      	ldr	r3, [pc, #16]	; (8006e28 <xTaskGetTickCount+0x18>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006e1c:	687b      	ldr	r3, [r7, #4]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	370c      	adds	r7, #12
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bc80      	pop	{r7}
 8006e26:	4770      	bx	lr
 8006e28:	20000c38 	.word	0x20000c38

08006e2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b086      	sub	sp, #24
 8006e30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e32:	2300      	movs	r3, #0
 8006e34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e36:	4b51      	ldr	r3, [pc, #324]	; (8006f7c <xTaskIncrementTick+0x150>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f040 808d 	bne.w	8006f5a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e40:	4b4f      	ldr	r3, [pc, #316]	; (8006f80 <xTaskIncrementTick+0x154>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	3301      	adds	r3, #1
 8006e46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e48:	4a4d      	ldr	r2, [pc, #308]	; (8006f80 <xTaskIncrementTick+0x154>)
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d11f      	bne.n	8006e94 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e54:	4b4b      	ldr	r3, [pc, #300]	; (8006f84 <xTaskIncrementTick+0x158>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d009      	beq.n	8006e72 <xTaskIncrementTick+0x46>
 8006e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	603b      	str	r3, [r7, #0]
 8006e70:	e7fe      	b.n	8006e70 <xTaskIncrementTick+0x44>
 8006e72:	4b44      	ldr	r3, [pc, #272]	; (8006f84 <xTaskIncrementTick+0x158>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	60fb      	str	r3, [r7, #12]
 8006e78:	4b43      	ldr	r3, [pc, #268]	; (8006f88 <xTaskIncrementTick+0x15c>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a41      	ldr	r2, [pc, #260]	; (8006f84 <xTaskIncrementTick+0x158>)
 8006e7e:	6013      	str	r3, [r2, #0]
 8006e80:	4a41      	ldr	r2, [pc, #260]	; (8006f88 <xTaskIncrementTick+0x15c>)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6013      	str	r3, [r2, #0]
 8006e86:	4b41      	ldr	r3, [pc, #260]	; (8006f8c <xTaskIncrementTick+0x160>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	4a3f      	ldr	r2, [pc, #252]	; (8006f8c <xTaskIncrementTick+0x160>)
 8006e8e:	6013      	str	r3, [r2, #0]
 8006e90:	f000 fae8 	bl	8007464 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e94:	4b3e      	ldr	r3, [pc, #248]	; (8006f90 <xTaskIncrementTick+0x164>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	693a      	ldr	r2, [r7, #16]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d34e      	bcc.n	8006f3c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e9e:	4b39      	ldr	r3, [pc, #228]	; (8006f84 <xTaskIncrementTick+0x158>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d101      	bne.n	8006eac <xTaskIncrementTick+0x80>
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e000      	b.n	8006eae <xTaskIncrementTick+0x82>
 8006eac:	2300      	movs	r3, #0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d004      	beq.n	8006ebc <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eb2:	4b37      	ldr	r3, [pc, #220]	; (8006f90 <xTaskIncrementTick+0x164>)
 8006eb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006eb8:	601a      	str	r2, [r3, #0]
					break;
 8006eba:	e03f      	b.n	8006f3c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006ebc:	4b31      	ldr	r3, [pc, #196]	; (8006f84 <xTaskIncrementTick+0x158>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ecc:	693a      	ldr	r2, [r7, #16]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d203      	bcs.n	8006edc <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ed4:	4a2e      	ldr	r2, [pc, #184]	; (8006f90 <xTaskIncrementTick+0x164>)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6013      	str	r3, [r2, #0]
						break;
 8006eda:	e02f      	b.n	8006f3c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	3304      	adds	r3, #4
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7fe ffb7 	bl	8005e54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d004      	beq.n	8006ef8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	3318      	adds	r3, #24
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7fe ffae 	bl	8005e54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006efc:	4b25      	ldr	r3, [pc, #148]	; (8006f94 <xTaskIncrementTick+0x168>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d903      	bls.n	8006f0c <xTaskIncrementTick+0xe0>
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f08:	4a22      	ldr	r2, [pc, #136]	; (8006f94 <xTaskIncrementTick+0x168>)
 8006f0a:	6013      	str	r3, [r2, #0]
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f10:	4613      	mov	r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	4413      	add	r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	4a1f      	ldr	r2, [pc, #124]	; (8006f98 <xTaskIncrementTick+0x16c>)
 8006f1a:	441a      	add	r2, r3
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	3304      	adds	r3, #4
 8006f20:	4619      	mov	r1, r3
 8006f22:	4610      	mov	r0, r2
 8006f24:	f7fe ff3b 	bl	8005d9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f2c:	4b1b      	ldr	r3, [pc, #108]	; (8006f9c <xTaskIncrementTick+0x170>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d3b3      	bcc.n	8006e9e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006f36:	2301      	movs	r3, #1
 8006f38:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f3a:	e7b0      	b.n	8006e9e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f3c:	4b17      	ldr	r3, [pc, #92]	; (8006f9c <xTaskIncrementTick+0x170>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f42:	4915      	ldr	r1, [pc, #84]	; (8006f98 <xTaskIncrementTick+0x16c>)
 8006f44:	4613      	mov	r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	4413      	add	r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	440b      	add	r3, r1
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d907      	bls.n	8006f64 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006f54:	2301      	movs	r3, #1
 8006f56:	617b      	str	r3, [r7, #20]
 8006f58:	e004      	b.n	8006f64 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006f5a:	4b11      	ldr	r3, [pc, #68]	; (8006fa0 <xTaskIncrementTick+0x174>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	4a0f      	ldr	r2, [pc, #60]	; (8006fa0 <xTaskIncrementTick+0x174>)
 8006f62:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006f64:	4b0f      	ldr	r3, [pc, #60]	; (8006fa4 <xTaskIncrementTick+0x178>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d001      	beq.n	8006f70 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006f70:	697b      	ldr	r3, [r7, #20]
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3718      	adds	r7, #24
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	20000c5c 	.word	0x20000c5c
 8006f80:	20000c38 	.word	0x20000c38
 8006f84:	20000bec 	.word	0x20000bec
 8006f88:	20000bf0 	.word	0x20000bf0
 8006f8c:	20000c4c 	.word	0x20000c4c
 8006f90:	20000c54 	.word	0x20000c54
 8006f94:	20000c3c 	.word	0x20000c3c
 8006f98:	20000764 	.word	0x20000764
 8006f9c:	20000760 	.word	0x20000760
 8006fa0:	20000c44 	.word	0x20000c44
 8006fa4:	20000c48 	.word	0x20000c48

08006fa8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006fae:	4b33      	ldr	r3, [pc, #204]	; (800707c <vTaskSwitchContext+0xd4>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d003      	beq.n	8006fbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006fb6:	4b32      	ldr	r3, [pc, #200]	; (8007080 <vTaskSwitchContext+0xd8>)
 8006fb8:	2201      	movs	r2, #1
 8006fba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006fbc:	e058      	b.n	8007070 <vTaskSwitchContext+0xc8>
		xYieldPending = pdFALSE;
 8006fbe:	4b30      	ldr	r3, [pc, #192]	; (8007080 <vTaskSwitchContext+0xd8>)
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8006fc4:	4b2f      	ldr	r3, [pc, #188]	; (8007084 <vTaskSwitchContext+0xdc>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a2f      	ldr	r2, [pc, #188]	; (8007088 <vTaskSwitchContext+0xe0>)
 8006fca:	6013      	str	r3, [r2, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8006fcc:	4b2e      	ldr	r3, [pc, #184]	; (8007088 <vTaskSwitchContext+0xe0>)
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	4b2e      	ldr	r3, [pc, #184]	; (800708c <vTaskSwitchContext+0xe4>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d909      	bls.n	8006fec <vTaskSwitchContext+0x44>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8006fd8:	4b2d      	ldr	r3, [pc, #180]	; (8007090 <vTaskSwitchContext+0xe8>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006fde:	4a2a      	ldr	r2, [pc, #168]	; (8007088 <vTaskSwitchContext+0xe0>)
 8006fe0:	6810      	ldr	r0, [r2, #0]
 8006fe2:	4a2a      	ldr	r2, [pc, #168]	; (800708c <vTaskSwitchContext+0xe4>)
 8006fe4:	6812      	ldr	r2, [r2, #0]
 8006fe6:	1a82      	subs	r2, r0, r2
 8006fe8:	440a      	add	r2, r1
 8006fea:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 8006fec:	4b26      	ldr	r3, [pc, #152]	; (8007088 <vTaskSwitchContext+0xe0>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a26      	ldr	r2, [pc, #152]	; (800708c <vTaskSwitchContext+0xe4>)
 8006ff2:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006ff4:	4b27      	ldr	r3, [pc, #156]	; (8007094 <vTaskSwitchContext+0xec>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	60fb      	str	r3, [r7, #12]
 8006ffa:	e00f      	b.n	800701c <vTaskSwitchContext+0x74>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d109      	bne.n	8007016 <vTaskSwitchContext+0x6e>
 8007002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007006:	f383 8811 	msr	BASEPRI, r3
 800700a:	f3bf 8f6f 	isb	sy
 800700e:	f3bf 8f4f 	dsb	sy
 8007012:	607b      	str	r3, [r7, #4]
 8007014:	e7fe      	b.n	8007014 <vTaskSwitchContext+0x6c>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	3b01      	subs	r3, #1
 800701a:	60fb      	str	r3, [r7, #12]
 800701c:	491e      	ldr	r1, [pc, #120]	; (8007098 <vTaskSwitchContext+0xf0>)
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	4613      	mov	r3, r2
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	4413      	add	r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	440b      	add	r3, r1
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d0e5      	beq.n	8006ffc <vTaskSwitchContext+0x54>
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	4613      	mov	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	4413      	add	r3, r2
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	4a17      	ldr	r2, [pc, #92]	; (8007098 <vTaskSwitchContext+0xf0>)
 800703c:	4413      	add	r3, r2
 800703e:	60bb      	str	r3, [r7, #8]
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	685a      	ldr	r2, [r3, #4]
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	605a      	str	r2, [r3, #4]
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	685a      	ldr	r2, [r3, #4]
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	3308      	adds	r3, #8
 8007052:	429a      	cmp	r2, r3
 8007054:	d104      	bne.n	8007060 <vTaskSwitchContext+0xb8>
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	685a      	ldr	r2, [r3, #4]
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	605a      	str	r2, [r3, #4]
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	4a0a      	ldr	r2, [pc, #40]	; (8007090 <vTaskSwitchContext+0xe8>)
 8007068:	6013      	str	r3, [r2, #0]
 800706a:	4a0a      	ldr	r2, [pc, #40]	; (8007094 <vTaskSwitchContext+0xec>)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6013      	str	r3, [r2, #0]
}
 8007070:	bf00      	nop
 8007072:	3714      	adds	r7, #20
 8007074:	46bd      	mov	sp, r7
 8007076:	bc80      	pop	{r7}
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	20000c5c 	.word	0x20000c5c
 8007080:	20000c48 	.word	0x20000c48
 8007084:	20002b70 	.word	0x20002b70
 8007088:	20000c64 	.word	0x20000c64
 800708c:	20000c60 	.word	0x20000c60
 8007090:	20000760 	.word	0x20000760
 8007094:	20000c3c 	.word	0x20000c3c
 8007098:	20000764 	.word	0x20000764

0800709c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d109      	bne.n	80070c0 <vTaskPlaceOnEventList+0x24>
 80070ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b0:	f383 8811 	msr	BASEPRI, r3
 80070b4:	f3bf 8f6f 	isb	sy
 80070b8:	f3bf 8f4f 	dsb	sy
 80070bc:	60fb      	str	r3, [r7, #12]
 80070be:	e7fe      	b.n	80070be <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80070c0:	4b07      	ldr	r3, [pc, #28]	; (80070e0 <vTaskPlaceOnEventList+0x44>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	3318      	adds	r3, #24
 80070c6:	4619      	mov	r1, r3
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f7fe fe8b 	bl	8005de4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80070ce:	2101      	movs	r1, #1
 80070d0:	6838      	ldr	r0, [r7, #0]
 80070d2:	f000 fa75 	bl	80075c0 <prvAddCurrentTaskToDelayedList>
}
 80070d6:	bf00      	nop
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	20000760 	.word	0x20000760

080070e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b086      	sub	sp, #24
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d109      	bne.n	800710a <vTaskPlaceOnEventListRestricted+0x26>
 80070f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fa:	f383 8811 	msr	BASEPRI, r3
 80070fe:	f3bf 8f6f 	isb	sy
 8007102:	f3bf 8f4f 	dsb	sy
 8007106:	617b      	str	r3, [r7, #20]
 8007108:	e7fe      	b.n	8007108 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800710a:	4b0a      	ldr	r3, [pc, #40]	; (8007134 <vTaskPlaceOnEventListRestricted+0x50>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	3318      	adds	r3, #24
 8007110:	4619      	mov	r1, r3
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f7fe fe43 	bl	8005d9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d002      	beq.n	8007124 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800711e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007122:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007124:	6879      	ldr	r1, [r7, #4]
 8007126:	68b8      	ldr	r0, [r7, #8]
 8007128:	f000 fa4a 	bl	80075c0 <prvAddCurrentTaskToDelayedList>
	}
 800712c:	bf00      	nop
 800712e:	3718      	adds	r7, #24
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	20000760 	.word	0x20000760

08007138 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b086      	sub	sp, #24
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d109      	bne.n	8007162 <xTaskRemoveFromEventList+0x2a>
 800714e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007152:	f383 8811 	msr	BASEPRI, r3
 8007156:	f3bf 8f6f 	isb	sy
 800715a:	f3bf 8f4f 	dsb	sy
 800715e:	60fb      	str	r3, [r7, #12]
 8007160:	e7fe      	b.n	8007160 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	3318      	adds	r3, #24
 8007166:	4618      	mov	r0, r3
 8007168:	f7fe fe74 	bl	8005e54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800716c:	4b1d      	ldr	r3, [pc, #116]	; (80071e4 <xTaskRemoveFromEventList+0xac>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d11d      	bne.n	80071b0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	3304      	adds	r3, #4
 8007178:	4618      	mov	r0, r3
 800717a:	f7fe fe6b 	bl	8005e54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007182:	4b19      	ldr	r3, [pc, #100]	; (80071e8 <xTaskRemoveFromEventList+0xb0>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	429a      	cmp	r2, r3
 8007188:	d903      	bls.n	8007192 <xTaskRemoveFromEventList+0x5a>
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718e:	4a16      	ldr	r2, [pc, #88]	; (80071e8 <xTaskRemoveFromEventList+0xb0>)
 8007190:	6013      	str	r3, [r2, #0]
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007196:	4613      	mov	r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	4413      	add	r3, r2
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	4a13      	ldr	r2, [pc, #76]	; (80071ec <xTaskRemoveFromEventList+0xb4>)
 80071a0:	441a      	add	r2, r3
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	3304      	adds	r3, #4
 80071a6:	4619      	mov	r1, r3
 80071a8:	4610      	mov	r0, r2
 80071aa:	f7fe fdf8 	bl	8005d9e <vListInsertEnd>
 80071ae:	e005      	b.n	80071bc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	3318      	adds	r3, #24
 80071b4:	4619      	mov	r1, r3
 80071b6:	480e      	ldr	r0, [pc, #56]	; (80071f0 <xTaskRemoveFromEventList+0xb8>)
 80071b8:	f7fe fdf1 	bl	8005d9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c0:	4b0c      	ldr	r3, [pc, #48]	; (80071f4 <xTaskRemoveFromEventList+0xbc>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d905      	bls.n	80071d6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80071ca:	2301      	movs	r3, #1
 80071cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80071ce:	4b0a      	ldr	r3, [pc, #40]	; (80071f8 <xTaskRemoveFromEventList+0xc0>)
 80071d0:	2201      	movs	r2, #1
 80071d2:	601a      	str	r2, [r3, #0]
 80071d4:	e001      	b.n	80071da <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80071d6:	2300      	movs	r3, #0
 80071d8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80071da:	697b      	ldr	r3, [r7, #20]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3718      	adds	r7, #24
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	20000c5c 	.word	0x20000c5c
 80071e8:	20000c3c 	.word	0x20000c3c
 80071ec:	20000764 	.word	0x20000764
 80071f0:	20000bf4 	.word	0x20000bf4
 80071f4:	20000760 	.word	0x20000760
 80071f8:	20000c48 	.word	0x20000c48

080071fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007204:	4b06      	ldr	r3, [pc, #24]	; (8007220 <vTaskInternalSetTimeOutState+0x24>)
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800720c:	4b05      	ldr	r3, [pc, #20]	; (8007224 <vTaskInternalSetTimeOutState+0x28>)
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	605a      	str	r2, [r3, #4]
}
 8007214:	bf00      	nop
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	bc80      	pop	{r7}
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	20000c4c 	.word	0x20000c4c
 8007224:	20000c38 	.word	0x20000c38

08007228 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b088      	sub	sp, #32
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d109      	bne.n	800724c <xTaskCheckForTimeOut+0x24>
 8007238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723c:	f383 8811 	msr	BASEPRI, r3
 8007240:	f3bf 8f6f 	isb	sy
 8007244:	f3bf 8f4f 	dsb	sy
 8007248:	613b      	str	r3, [r7, #16]
 800724a:	e7fe      	b.n	800724a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d109      	bne.n	8007266 <xTaskCheckForTimeOut+0x3e>
 8007252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007256:	f383 8811 	msr	BASEPRI, r3
 800725a:	f3bf 8f6f 	isb	sy
 800725e:	f3bf 8f4f 	dsb	sy
 8007262:	60fb      	str	r3, [r7, #12]
 8007264:	e7fe      	b.n	8007264 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007266:	f000 fdf7 	bl	8007e58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800726a:	4b1d      	ldr	r3, [pc, #116]	; (80072e0 <xTaskCheckForTimeOut+0xb8>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	69ba      	ldr	r2, [r7, #24]
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007282:	d102      	bne.n	800728a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007284:	2300      	movs	r3, #0
 8007286:	61fb      	str	r3, [r7, #28]
 8007288:	e023      	b.n	80072d2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	4b15      	ldr	r3, [pc, #84]	; (80072e4 <xTaskCheckForTimeOut+0xbc>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	429a      	cmp	r2, r3
 8007294:	d007      	beq.n	80072a6 <xTaskCheckForTimeOut+0x7e>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	69ba      	ldr	r2, [r7, #24]
 800729c:	429a      	cmp	r2, r3
 800729e:	d302      	bcc.n	80072a6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80072a0:	2301      	movs	r3, #1
 80072a2:	61fb      	str	r3, [r7, #28]
 80072a4:	e015      	b.n	80072d2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	697a      	ldr	r2, [r7, #20]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d20b      	bcs.n	80072c8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	1ad2      	subs	r2, r2, r3
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f7ff ff9d 	bl	80071fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80072c2:	2300      	movs	r3, #0
 80072c4:	61fb      	str	r3, [r7, #28]
 80072c6:	e004      	b.n	80072d2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	2200      	movs	r2, #0
 80072cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80072ce:	2301      	movs	r3, #1
 80072d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80072d2:	f000 fdef 	bl	8007eb4 <vPortExitCritical>

	return xReturn;
 80072d6:	69fb      	ldr	r3, [r7, #28]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3720      	adds	r7, #32
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	20000c38 	.word	0x20000c38
 80072e4:	20000c4c 	.word	0x20000c4c

080072e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80072e8:	b480      	push	{r7}
 80072ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80072ec:	4b03      	ldr	r3, [pc, #12]	; (80072fc <vTaskMissedYield+0x14>)
 80072ee:	2201      	movs	r2, #1
 80072f0:	601a      	str	r2, [r3, #0]
}
 80072f2:	bf00      	nop
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bc80      	pop	{r7}
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	20000c48 	.word	0x20000c48

08007300 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007308:	f000 f852 	bl	80073b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800730c:	4b06      	ldr	r3, [pc, #24]	; (8007328 <prvIdleTask+0x28>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2b01      	cmp	r3, #1
 8007312:	d9f9      	bls.n	8007308 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007314:	4b05      	ldr	r3, [pc, #20]	; (800732c <prvIdleTask+0x2c>)
 8007316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800731a:	601a      	str	r2, [r3, #0]
 800731c:	f3bf 8f4f 	dsb	sy
 8007320:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007324:	e7f0      	b.n	8007308 <prvIdleTask+0x8>
 8007326:	bf00      	nop
 8007328:	20000764 	.word	0x20000764
 800732c:	e000ed04 	.word	0xe000ed04

08007330 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007336:	2300      	movs	r3, #0
 8007338:	607b      	str	r3, [r7, #4]
 800733a:	e00c      	b.n	8007356 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	4613      	mov	r3, r2
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	4413      	add	r3, r2
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	4a12      	ldr	r2, [pc, #72]	; (8007390 <prvInitialiseTaskLists+0x60>)
 8007348:	4413      	add	r3, r2
 800734a:	4618      	mov	r0, r3
 800734c:	f7fe fcfc 	bl	8005d48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	3301      	adds	r3, #1
 8007354:	607b      	str	r3, [r7, #4]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2b37      	cmp	r3, #55	; 0x37
 800735a:	d9ef      	bls.n	800733c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800735c:	480d      	ldr	r0, [pc, #52]	; (8007394 <prvInitialiseTaskLists+0x64>)
 800735e:	f7fe fcf3 	bl	8005d48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007362:	480d      	ldr	r0, [pc, #52]	; (8007398 <prvInitialiseTaskLists+0x68>)
 8007364:	f7fe fcf0 	bl	8005d48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007368:	480c      	ldr	r0, [pc, #48]	; (800739c <prvInitialiseTaskLists+0x6c>)
 800736a:	f7fe fced 	bl	8005d48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800736e:	480c      	ldr	r0, [pc, #48]	; (80073a0 <prvInitialiseTaskLists+0x70>)
 8007370:	f7fe fcea 	bl	8005d48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007374:	480b      	ldr	r0, [pc, #44]	; (80073a4 <prvInitialiseTaskLists+0x74>)
 8007376:	f7fe fce7 	bl	8005d48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800737a:	4b0b      	ldr	r3, [pc, #44]	; (80073a8 <prvInitialiseTaskLists+0x78>)
 800737c:	4a05      	ldr	r2, [pc, #20]	; (8007394 <prvInitialiseTaskLists+0x64>)
 800737e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007380:	4b0a      	ldr	r3, [pc, #40]	; (80073ac <prvInitialiseTaskLists+0x7c>)
 8007382:	4a05      	ldr	r2, [pc, #20]	; (8007398 <prvInitialiseTaskLists+0x68>)
 8007384:	601a      	str	r2, [r3, #0]
}
 8007386:	bf00      	nop
 8007388:	3708      	adds	r7, #8
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	20000764 	.word	0x20000764
 8007394:	20000bc4 	.word	0x20000bc4
 8007398:	20000bd8 	.word	0x20000bd8
 800739c:	20000bf4 	.word	0x20000bf4
 80073a0:	20000c08 	.word	0x20000c08
 80073a4:	20000c20 	.word	0x20000c20
 80073a8:	20000bec 	.word	0x20000bec
 80073ac:	20000bf0 	.word	0x20000bf0

080073b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073b6:	e019      	b.n	80073ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80073b8:	f000 fd4e 	bl	8007e58 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80073bc:	4b0f      	ldr	r3, [pc, #60]	; (80073fc <prvCheckTasksWaitingTermination+0x4c>)
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	3304      	adds	r3, #4
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7fe fd43 	bl	8005e54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80073ce:	4b0c      	ldr	r3, [pc, #48]	; (8007400 <prvCheckTasksWaitingTermination+0x50>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	3b01      	subs	r3, #1
 80073d4:	4a0a      	ldr	r2, [pc, #40]	; (8007400 <prvCheckTasksWaitingTermination+0x50>)
 80073d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80073d8:	4b0a      	ldr	r3, [pc, #40]	; (8007404 <prvCheckTasksWaitingTermination+0x54>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	3b01      	subs	r3, #1
 80073de:	4a09      	ldr	r2, [pc, #36]	; (8007404 <prvCheckTasksWaitingTermination+0x54>)
 80073e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80073e2:	f000 fd67 	bl	8007eb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 f80e 	bl	8007408 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073ec:	4b05      	ldr	r3, [pc, #20]	; (8007404 <prvCheckTasksWaitingTermination+0x54>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1e1      	bne.n	80073b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80073f4:	bf00      	nop
 80073f6:	3708      	adds	r7, #8
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	20000c08 	.word	0x20000c08
 8007400:	20000c34 	.word	0x20000c34
 8007404:	20000c1c 	.word	0x20000c1c

08007408 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007416:	2b00      	cmp	r3, #0
 8007418:	d108      	bne.n	800742c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800741e:	4618      	mov	r0, r3
 8007420:	f000 fed2 	bl	80081c8 <vPortFree>
				vPortFree( pxTCB );
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 fecf 	bl	80081c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800742a:	e017      	b.n	800745c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007432:	2b01      	cmp	r3, #1
 8007434:	d103      	bne.n	800743e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 fec6 	bl	80081c8 <vPortFree>
	}
 800743c:	e00e      	b.n	800745c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007444:	2b02      	cmp	r3, #2
 8007446:	d009      	beq.n	800745c <prvDeleteTCB+0x54>
 8007448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744c:	f383 8811 	msr	BASEPRI, r3
 8007450:	f3bf 8f6f 	isb	sy
 8007454:	f3bf 8f4f 	dsb	sy
 8007458:	60fb      	str	r3, [r7, #12]
 800745a:	e7fe      	b.n	800745a <prvDeleteTCB+0x52>
	}
 800745c:	bf00      	nop
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800746a:	4b0e      	ldr	r3, [pc, #56]	; (80074a4 <prvResetNextTaskUnblockTime+0x40>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d101      	bne.n	8007478 <prvResetNextTaskUnblockTime+0x14>
 8007474:	2301      	movs	r3, #1
 8007476:	e000      	b.n	800747a <prvResetNextTaskUnblockTime+0x16>
 8007478:	2300      	movs	r3, #0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d004      	beq.n	8007488 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800747e:	4b0a      	ldr	r3, [pc, #40]	; (80074a8 <prvResetNextTaskUnblockTime+0x44>)
 8007480:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007484:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007486:	e008      	b.n	800749a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007488:	4b06      	ldr	r3, [pc, #24]	; (80074a4 <prvResetNextTaskUnblockTime+0x40>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	4a04      	ldr	r2, [pc, #16]	; (80074a8 <prvResetNextTaskUnblockTime+0x44>)
 8007498:	6013      	str	r3, [r2, #0]
}
 800749a:	bf00      	nop
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	bc80      	pop	{r7}
 80074a2:	4770      	bx	lr
 80074a4:	20000bec 	.word	0x20000bec
 80074a8:	20000c54 	.word	0x20000c54

080074ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80074b2:	4b0b      	ldr	r3, [pc, #44]	; (80074e0 <xTaskGetSchedulerState+0x34>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d102      	bne.n	80074c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80074ba:	2301      	movs	r3, #1
 80074bc:	607b      	str	r3, [r7, #4]
 80074be:	e008      	b.n	80074d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074c0:	4b08      	ldr	r3, [pc, #32]	; (80074e4 <xTaskGetSchedulerState+0x38>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d102      	bne.n	80074ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80074c8:	2302      	movs	r3, #2
 80074ca:	607b      	str	r3, [r7, #4]
 80074cc:	e001      	b.n	80074d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80074ce:	2300      	movs	r3, #0
 80074d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80074d2:	687b      	ldr	r3, [r7, #4]
	}
 80074d4:	4618      	mov	r0, r3
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	bc80      	pop	{r7}
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	20000c40 	.word	0x20000c40
 80074e4:	20000c5c 	.word	0x20000c5c

080074e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b086      	sub	sp, #24
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80074f4:	2300      	movs	r3, #0
 80074f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d054      	beq.n	80075a8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80074fe:	4b2d      	ldr	r3, [pc, #180]	; (80075b4 <xTaskPriorityDisinherit+0xcc>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	693a      	ldr	r2, [r7, #16]
 8007504:	429a      	cmp	r2, r3
 8007506:	d009      	beq.n	800751c <xTaskPriorityDisinherit+0x34>
 8007508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750c:	f383 8811 	msr	BASEPRI, r3
 8007510:	f3bf 8f6f 	isb	sy
 8007514:	f3bf 8f4f 	dsb	sy
 8007518:	60fb      	str	r3, [r7, #12]
 800751a:	e7fe      	b.n	800751a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007520:	2b00      	cmp	r3, #0
 8007522:	d109      	bne.n	8007538 <xTaskPriorityDisinherit+0x50>
 8007524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007528:	f383 8811 	msr	BASEPRI, r3
 800752c:	f3bf 8f6f 	isb	sy
 8007530:	f3bf 8f4f 	dsb	sy
 8007534:	60bb      	str	r3, [r7, #8]
 8007536:	e7fe      	b.n	8007536 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800753c:	1e5a      	subs	r2, r3, #1
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800754a:	429a      	cmp	r2, r3
 800754c:	d02c      	beq.n	80075a8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007552:	2b00      	cmp	r3, #0
 8007554:	d128      	bne.n	80075a8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	3304      	adds	r3, #4
 800755a:	4618      	mov	r0, r3
 800755c:	f7fe fc7a 	bl	8005e54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007578:	4b0f      	ldr	r3, [pc, #60]	; (80075b8 <xTaskPriorityDisinherit+0xd0>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	429a      	cmp	r2, r3
 800757e:	d903      	bls.n	8007588 <xTaskPriorityDisinherit+0xa0>
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007584:	4a0c      	ldr	r2, [pc, #48]	; (80075b8 <xTaskPriorityDisinherit+0xd0>)
 8007586:	6013      	str	r3, [r2, #0]
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800758c:	4613      	mov	r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4413      	add	r3, r2
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	4a09      	ldr	r2, [pc, #36]	; (80075bc <xTaskPriorityDisinherit+0xd4>)
 8007596:	441a      	add	r2, r3
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	3304      	adds	r3, #4
 800759c:	4619      	mov	r1, r3
 800759e:	4610      	mov	r0, r2
 80075a0:	f7fe fbfd 	bl	8005d9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80075a4:	2301      	movs	r3, #1
 80075a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80075a8:	697b      	ldr	r3, [r7, #20]
	}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3718      	adds	r7, #24
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	20000760 	.word	0x20000760
 80075b8:	20000c3c 	.word	0x20000c3c
 80075bc:	20000764 	.word	0x20000764

080075c0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80075ca:	4b21      	ldr	r3, [pc, #132]	; (8007650 <prvAddCurrentTaskToDelayedList+0x90>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075d0:	4b20      	ldr	r3, [pc, #128]	; (8007654 <prvAddCurrentTaskToDelayedList+0x94>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	3304      	adds	r3, #4
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7fe fc3c 	bl	8005e54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075e2:	d10a      	bne.n	80075fa <prvAddCurrentTaskToDelayedList+0x3a>
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d007      	beq.n	80075fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075ea:	4b1a      	ldr	r3, [pc, #104]	; (8007654 <prvAddCurrentTaskToDelayedList+0x94>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	3304      	adds	r3, #4
 80075f0:	4619      	mov	r1, r3
 80075f2:	4819      	ldr	r0, [pc, #100]	; (8007658 <prvAddCurrentTaskToDelayedList+0x98>)
 80075f4:	f7fe fbd3 	bl	8005d9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80075f8:	e026      	b.n	8007648 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4413      	add	r3, r2
 8007600:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007602:	4b14      	ldr	r3, [pc, #80]	; (8007654 <prvAddCurrentTaskToDelayedList+0x94>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800760a:	68ba      	ldr	r2, [r7, #8]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	429a      	cmp	r2, r3
 8007610:	d209      	bcs.n	8007626 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007612:	4b12      	ldr	r3, [pc, #72]	; (800765c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	4b0f      	ldr	r3, [pc, #60]	; (8007654 <prvAddCurrentTaskToDelayedList+0x94>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	3304      	adds	r3, #4
 800761c:	4619      	mov	r1, r3
 800761e:	4610      	mov	r0, r2
 8007620:	f7fe fbe0 	bl	8005de4 <vListInsert>
}
 8007624:	e010      	b.n	8007648 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007626:	4b0e      	ldr	r3, [pc, #56]	; (8007660 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	4b0a      	ldr	r3, [pc, #40]	; (8007654 <prvAddCurrentTaskToDelayedList+0x94>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	3304      	adds	r3, #4
 8007630:	4619      	mov	r1, r3
 8007632:	4610      	mov	r0, r2
 8007634:	f7fe fbd6 	bl	8005de4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007638:	4b0a      	ldr	r3, [pc, #40]	; (8007664 <prvAddCurrentTaskToDelayedList+0xa4>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	429a      	cmp	r2, r3
 8007640:	d202      	bcs.n	8007648 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007642:	4a08      	ldr	r2, [pc, #32]	; (8007664 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	6013      	str	r3, [r2, #0]
}
 8007648:	bf00      	nop
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	20000c38 	.word	0x20000c38
 8007654:	20000760 	.word	0x20000760
 8007658:	20000c20 	.word	0x20000c20
 800765c:	20000bf0 	.word	0x20000bf0
 8007660:	20000bec 	.word	0x20000bec
 8007664:	20000c54 	.word	0x20000c54

08007668 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b08a      	sub	sp, #40	; 0x28
 800766c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800766e:	2300      	movs	r3, #0
 8007670:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007672:	f000 fac3 	bl	8007bfc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007676:	4b1c      	ldr	r3, [pc, #112]	; (80076e8 <xTimerCreateTimerTask+0x80>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d021      	beq.n	80076c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800767e:	2300      	movs	r3, #0
 8007680:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007682:	2300      	movs	r3, #0
 8007684:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007686:	1d3a      	adds	r2, r7, #4
 8007688:	f107 0108 	add.w	r1, r7, #8
 800768c:	f107 030c 	add.w	r3, r7, #12
 8007690:	4618      	mov	r0, r3
 8007692:	f7fe fb3f 	bl	8005d14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007696:	6879      	ldr	r1, [r7, #4]
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	68fa      	ldr	r2, [r7, #12]
 800769c:	9202      	str	r2, [sp, #8]
 800769e:	9301      	str	r3, [sp, #4]
 80076a0:	2302      	movs	r3, #2
 80076a2:	9300      	str	r3, [sp, #0]
 80076a4:	2300      	movs	r3, #0
 80076a6:	460a      	mov	r2, r1
 80076a8:	4910      	ldr	r1, [pc, #64]	; (80076ec <xTimerCreateTimerTask+0x84>)
 80076aa:	4811      	ldr	r0, [pc, #68]	; (80076f0 <xTimerCreateTimerTask+0x88>)
 80076ac:	f7ff f8d0 	bl	8006850 <xTaskCreateStatic>
 80076b0:	4602      	mov	r2, r0
 80076b2:	4b10      	ldr	r3, [pc, #64]	; (80076f4 <xTimerCreateTimerTask+0x8c>)
 80076b4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80076b6:	4b0f      	ldr	r3, [pc, #60]	; (80076f4 <xTimerCreateTimerTask+0x8c>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d001      	beq.n	80076c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80076be:	2301      	movs	r3, #1
 80076c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d109      	bne.n	80076dc <xTimerCreateTimerTask+0x74>
 80076c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076cc:	f383 8811 	msr	BASEPRI, r3
 80076d0:	f3bf 8f6f 	isb	sy
 80076d4:	f3bf 8f4f 	dsb	sy
 80076d8:	613b      	str	r3, [r7, #16]
 80076da:	e7fe      	b.n	80076da <xTimerCreateTimerTask+0x72>
	return xReturn;
 80076dc:	697b      	ldr	r3, [r7, #20]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3718      	adds	r7, #24
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	20000c98 	.word	0x20000c98
 80076ec:	080084fc 	.word	0x080084fc
 80076f0:	08007811 	.word	0x08007811
 80076f4:	20000c9c 	.word	0x20000c9c

080076f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b08a      	sub	sp, #40	; 0x28
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	607a      	str	r2, [r7, #4]
 8007704:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007706:	2300      	movs	r3, #0
 8007708:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d109      	bne.n	8007724 <xTimerGenericCommand+0x2c>
 8007710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007714:	f383 8811 	msr	BASEPRI, r3
 8007718:	f3bf 8f6f 	isb	sy
 800771c:	f3bf 8f4f 	dsb	sy
 8007720:	623b      	str	r3, [r7, #32]
 8007722:	e7fe      	b.n	8007722 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007724:	4b19      	ldr	r3, [pc, #100]	; (800778c <xTimerGenericCommand+0x94>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d02a      	beq.n	8007782 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	2b05      	cmp	r3, #5
 800773c:	dc18      	bgt.n	8007770 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800773e:	f7ff feb5 	bl	80074ac <xTaskGetSchedulerState>
 8007742:	4603      	mov	r3, r0
 8007744:	2b02      	cmp	r3, #2
 8007746:	d109      	bne.n	800775c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007748:	4b10      	ldr	r3, [pc, #64]	; (800778c <xTimerGenericCommand+0x94>)
 800774a:	6818      	ldr	r0, [r3, #0]
 800774c:	f107 0110 	add.w	r1, r7, #16
 8007750:	2300      	movs	r3, #0
 8007752:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007754:	f7fe fca6 	bl	80060a4 <xQueueGenericSend>
 8007758:	6278      	str	r0, [r7, #36]	; 0x24
 800775a:	e012      	b.n	8007782 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800775c:	4b0b      	ldr	r3, [pc, #44]	; (800778c <xTimerGenericCommand+0x94>)
 800775e:	6818      	ldr	r0, [r3, #0]
 8007760:	f107 0110 	add.w	r1, r7, #16
 8007764:	2300      	movs	r3, #0
 8007766:	2200      	movs	r2, #0
 8007768:	f7fe fc9c 	bl	80060a4 <xQueueGenericSend>
 800776c:	6278      	str	r0, [r7, #36]	; 0x24
 800776e:	e008      	b.n	8007782 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007770:	4b06      	ldr	r3, [pc, #24]	; (800778c <xTimerGenericCommand+0x94>)
 8007772:	6818      	ldr	r0, [r3, #0]
 8007774:	f107 0110 	add.w	r1, r7, #16
 8007778:	2300      	movs	r3, #0
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	f7fe fd8c 	bl	8006298 <xQueueGenericSendFromISR>
 8007780:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007784:	4618      	mov	r0, r3
 8007786:	3728      	adds	r7, #40	; 0x28
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	20000c98 	.word	0x20000c98

08007790 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b088      	sub	sp, #32
 8007794:	af02      	add	r7, sp, #8
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800779a:	4b1c      	ldr	r3, [pc, #112]	; (800780c <prvProcessExpiredTimer+0x7c>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	3304      	adds	r3, #4
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7fe fb53 	bl	8005e54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	69db      	ldr	r3, [r3, #28]
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d121      	bne.n	80077fa <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	699a      	ldr	r2, [r3, #24]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	18d1      	adds	r1, r2, r3
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	683a      	ldr	r2, [r7, #0]
 80077c2:	6978      	ldr	r0, [r7, #20]
 80077c4:	f000 f8c8 	bl	8007958 <prvInsertTimerInActiveList>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d015      	beq.n	80077fa <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80077ce:	2300      	movs	r3, #0
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	2300      	movs	r3, #0
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	2100      	movs	r1, #0
 80077d8:	6978      	ldr	r0, [r7, #20]
 80077da:	f7ff ff8d 	bl	80076f8 <xTimerGenericCommand>
 80077de:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d109      	bne.n	80077fa <prvProcessExpiredTimer+0x6a>
 80077e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ea:	f383 8811 	msr	BASEPRI, r3
 80077ee:	f3bf 8f6f 	isb	sy
 80077f2:	f3bf 8f4f 	dsb	sy
 80077f6:	60fb      	str	r3, [r7, #12]
 80077f8:	e7fe      	b.n	80077f8 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fe:	6978      	ldr	r0, [r7, #20]
 8007800:	4798      	blx	r3
}
 8007802:	bf00      	nop
 8007804:	3718      	adds	r7, #24
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	20000c90 	.word	0x20000c90

08007810 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007818:	f107 0308 	add.w	r3, r7, #8
 800781c:	4618      	mov	r0, r3
 800781e:	f000 f857 	bl	80078d0 <prvGetNextExpireTime>
 8007822:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	4619      	mov	r1, r3
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f000 f803 	bl	8007834 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800782e:	f000 f8d5 	bl	80079dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007832:	e7f1      	b.n	8007818 <prvTimerTask+0x8>

08007834 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800783e:	f7ff fa3d 	bl	8006cbc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007842:	f107 0308 	add.w	r3, r7, #8
 8007846:	4618      	mov	r0, r3
 8007848:	f000 f866 	bl	8007918 <prvSampleTimeNow>
 800784c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d130      	bne.n	80078b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10a      	bne.n	8007870 <prvProcessTimerOrBlockTask+0x3c>
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	429a      	cmp	r2, r3
 8007860:	d806      	bhi.n	8007870 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007862:	f7ff fa39 	bl	8006cd8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007866:	68f9      	ldr	r1, [r7, #12]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7ff ff91 	bl	8007790 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800786e:	e024      	b.n	80078ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d008      	beq.n	8007888 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007876:	4b13      	ldr	r3, [pc, #76]	; (80078c4 <prvProcessTimerOrBlockTask+0x90>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	bf0c      	ite	eq
 8007880:	2301      	moveq	r3, #1
 8007882:	2300      	movne	r3, #0
 8007884:	b2db      	uxtb	r3, r3
 8007886:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007888:	4b0f      	ldr	r3, [pc, #60]	; (80078c8 <prvProcessTimerOrBlockTask+0x94>)
 800788a:	6818      	ldr	r0, [r3, #0]
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	683a      	ldr	r2, [r7, #0]
 8007894:	4619      	mov	r1, r3
 8007896:	f7fe ffa7 	bl	80067e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800789a:	f7ff fa1d 	bl	8006cd8 <xTaskResumeAll>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d10a      	bne.n	80078ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80078a4:	4b09      	ldr	r3, [pc, #36]	; (80078cc <prvProcessTimerOrBlockTask+0x98>)
 80078a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078aa:	601a      	str	r2, [r3, #0]
 80078ac:	f3bf 8f4f 	dsb	sy
 80078b0:	f3bf 8f6f 	isb	sy
}
 80078b4:	e001      	b.n	80078ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80078b6:	f7ff fa0f 	bl	8006cd8 <xTaskResumeAll>
}
 80078ba:	bf00      	nop
 80078bc:	3710      	adds	r7, #16
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	20000c94 	.word	0x20000c94
 80078c8:	20000c98 	.word	0x20000c98
 80078cc:	e000ed04 	.word	0xe000ed04

080078d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80078d8:	4b0e      	ldr	r3, [pc, #56]	; (8007914 <prvGetNextExpireTime+0x44>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	bf0c      	ite	eq
 80078e2:	2301      	moveq	r3, #1
 80078e4:	2300      	movne	r3, #0
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	461a      	mov	r2, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d105      	bne.n	8007902 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80078f6:	4b07      	ldr	r3, [pc, #28]	; (8007914 <prvGetNextExpireTime+0x44>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	60fb      	str	r3, [r7, #12]
 8007900:	e001      	b.n	8007906 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007902:	2300      	movs	r3, #0
 8007904:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007906:	68fb      	ldr	r3, [r7, #12]
}
 8007908:	4618      	mov	r0, r3
 800790a:	3714      	adds	r7, #20
 800790c:	46bd      	mov	sp, r7
 800790e:	bc80      	pop	{r7}
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	20000c90 	.word	0x20000c90

08007918 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007920:	f7ff fa76 	bl	8006e10 <xTaskGetTickCount>
 8007924:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007926:	4b0b      	ldr	r3, [pc, #44]	; (8007954 <prvSampleTimeNow+0x3c>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	429a      	cmp	r2, r3
 800792e:	d205      	bcs.n	800793c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007930:	f000 f904 	bl	8007b3c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	601a      	str	r2, [r3, #0]
 800793a:	e002      	b.n	8007942 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007942:	4a04      	ldr	r2, [pc, #16]	; (8007954 <prvSampleTimeNow+0x3c>)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007948:	68fb      	ldr	r3, [r7, #12]
}
 800794a:	4618      	mov	r0, r3
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	20000ca0 	.word	0x20000ca0

08007958 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b086      	sub	sp, #24
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	607a      	str	r2, [r7, #4]
 8007964:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007966:	2300      	movs	r3, #0
 8007968:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	68ba      	ldr	r2, [r7, #8]
 800796e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007976:	68ba      	ldr	r2, [r7, #8]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	429a      	cmp	r2, r3
 800797c:	d812      	bhi.n	80079a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	1ad2      	subs	r2, r2, r3
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	699b      	ldr	r3, [r3, #24]
 8007988:	429a      	cmp	r2, r3
 800798a:	d302      	bcc.n	8007992 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800798c:	2301      	movs	r3, #1
 800798e:	617b      	str	r3, [r7, #20]
 8007990:	e01b      	b.n	80079ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007992:	4b10      	ldr	r3, [pc, #64]	; (80079d4 <prvInsertTimerInActiveList+0x7c>)
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	3304      	adds	r3, #4
 800799a:	4619      	mov	r1, r3
 800799c:	4610      	mov	r0, r2
 800799e:	f7fe fa21 	bl	8005de4 <vListInsert>
 80079a2:	e012      	b.n	80079ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d206      	bcs.n	80079ba <prvInsertTimerInActiveList+0x62>
 80079ac:	68ba      	ldr	r2, [r7, #8]
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d302      	bcc.n	80079ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80079b4:	2301      	movs	r3, #1
 80079b6:	617b      	str	r3, [r7, #20]
 80079b8:	e007      	b.n	80079ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80079ba:	4b07      	ldr	r3, [pc, #28]	; (80079d8 <prvInsertTimerInActiveList+0x80>)
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	3304      	adds	r3, #4
 80079c2:	4619      	mov	r1, r3
 80079c4:	4610      	mov	r0, r2
 80079c6:	f7fe fa0d 	bl	8005de4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80079ca:	697b      	ldr	r3, [r7, #20]
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3718      	adds	r7, #24
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	20000c94 	.word	0x20000c94
 80079d8:	20000c90 	.word	0x20000c90

080079dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b08e      	sub	sp, #56	; 0x38
 80079e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80079e2:	e099      	b.n	8007b18 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	da17      	bge.n	8007a1a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80079ea:	1d3b      	adds	r3, r7, #4
 80079ec:	3304      	adds	r3, #4
 80079ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80079f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d109      	bne.n	8007a0a <prvProcessReceivedCommands+0x2e>
 80079f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fa:	f383 8811 	msr	BASEPRI, r3
 80079fe:	f3bf 8f6f 	isb	sy
 8007a02:	f3bf 8f4f 	dsb	sy
 8007a06:	61fb      	str	r3, [r7, #28]
 8007a08:	e7fe      	b.n	8007a08 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a10:	6850      	ldr	r0, [r2, #4]
 8007a12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a14:	6892      	ldr	r2, [r2, #8]
 8007a16:	4611      	mov	r1, r2
 8007a18:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	db7a      	blt.n	8007b16 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a26:	695b      	ldr	r3, [r3, #20]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d004      	beq.n	8007a36 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2e:	3304      	adds	r3, #4
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7fe fa0f 	bl	8005e54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a36:	463b      	mov	r3, r7
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7ff ff6d 	bl	8007918 <prvSampleTimeNow>
 8007a3e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2b09      	cmp	r3, #9
 8007a44:	d868      	bhi.n	8007b18 <prvProcessReceivedCommands+0x13c>
 8007a46:	a201      	add	r2, pc, #4	; (adr r2, 8007a4c <prvProcessReceivedCommands+0x70>)
 8007a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4c:	08007a75 	.word	0x08007a75
 8007a50:	08007a75 	.word	0x08007a75
 8007a54:	08007a75 	.word	0x08007a75
 8007a58:	08007b19 	.word	0x08007b19
 8007a5c:	08007acf 	.word	0x08007acf
 8007a60:	08007b05 	.word	0x08007b05
 8007a64:	08007a75 	.word	0x08007a75
 8007a68:	08007a75 	.word	0x08007a75
 8007a6c:	08007b19 	.word	0x08007b19
 8007a70:	08007acf 	.word	0x08007acf
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a78:	699b      	ldr	r3, [r3, #24]
 8007a7a:	18d1      	adds	r1, r2, r3
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a82:	f7ff ff69 	bl	8007958 <prvInsertTimerInActiveList>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d045      	beq.n	8007b18 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a92:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a96:	69db      	ldr	r3, [r3, #28]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d13d      	bne.n	8007b18 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	441a      	add	r2, r3
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	9300      	str	r3, [sp, #0]
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	2100      	movs	r1, #0
 8007aac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007aae:	f7ff fe23 	bl	80076f8 <xTimerGenericCommand>
 8007ab2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007ab4:	6a3b      	ldr	r3, [r7, #32]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d12e      	bne.n	8007b18 <prvProcessReceivedCommands+0x13c>
 8007aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007abe:	f383 8811 	msr	BASEPRI, r3
 8007ac2:	f3bf 8f6f 	isb	sy
 8007ac6:	f3bf 8f4f 	dsb	sy
 8007aca:	61bb      	str	r3, [r7, #24]
 8007acc:	e7fe      	b.n	8007acc <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007ace:	68ba      	ldr	r2, [r7, #8]
 8007ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad6:	699b      	ldr	r3, [r3, #24]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d109      	bne.n	8007af0 <prvProcessReceivedCommands+0x114>
 8007adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae0:	f383 8811 	msr	BASEPRI, r3
 8007ae4:	f3bf 8f6f 	isb	sy
 8007ae8:	f3bf 8f4f 	dsb	sy
 8007aec:	617b      	str	r3, [r7, #20]
 8007aee:	e7fe      	b.n	8007aee <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af2:	699a      	ldr	r2, [r3, #24]
 8007af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af6:	18d1      	adds	r1, r2, r3
 8007af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007afc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007afe:	f7ff ff2b 	bl	8007958 <prvInsertTimerInActiveList>
					break;
 8007b02:	e009      	b.n	8007b18 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b06:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d104      	bne.n	8007b18 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8007b0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b10:	f000 fb5a 	bl	80081c8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007b14:	e000      	b.n	8007b18 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007b16:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b18:	4b07      	ldr	r3, [pc, #28]	; (8007b38 <prvProcessReceivedCommands+0x15c>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	1d39      	adds	r1, r7, #4
 8007b1e:	2200      	movs	r2, #0
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7fe fc4d 	bl	80063c0 <xQueueReceive>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f47f af5b 	bne.w	80079e4 <prvProcessReceivedCommands+0x8>
	}
}
 8007b2e:	bf00      	nop
 8007b30:	3730      	adds	r7, #48	; 0x30
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	20000c98 	.word	0x20000c98

08007b3c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b088      	sub	sp, #32
 8007b40:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007b42:	e044      	b.n	8007bce <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b44:	4b2b      	ldr	r3, [pc, #172]	; (8007bf4 <prvSwitchTimerLists+0xb8>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b4e:	4b29      	ldr	r3, [pc, #164]	; (8007bf4 <prvSwitchTimerLists+0xb8>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	3304      	adds	r3, #4
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f7fe f979 	bl	8005e54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	69db      	ldr	r3, [r3, #28]
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d12d      	bne.n	8007bce <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	699b      	ldr	r3, [r3, #24]
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	4413      	add	r3, r2
 8007b7a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007b7c:	68ba      	ldr	r2, [r7, #8]
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d90e      	bls.n	8007ba2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	68ba      	ldr	r2, [r7, #8]
 8007b88:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b90:	4b18      	ldr	r3, [pc, #96]	; (8007bf4 <prvSwitchTimerLists+0xb8>)
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	3304      	adds	r3, #4
 8007b98:	4619      	mov	r1, r3
 8007b9a:	4610      	mov	r0, r2
 8007b9c:	f7fe f922 	bl	8005de4 <vListInsert>
 8007ba0:	e015      	b.n	8007bce <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	9300      	str	r3, [sp, #0]
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	693a      	ldr	r2, [r7, #16]
 8007baa:	2100      	movs	r1, #0
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f7ff fda3 	bl	80076f8 <xTimerGenericCommand>
 8007bb2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d109      	bne.n	8007bce <prvSwitchTimerLists+0x92>
 8007bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbe:	f383 8811 	msr	BASEPRI, r3
 8007bc2:	f3bf 8f6f 	isb	sy
 8007bc6:	f3bf 8f4f 	dsb	sy
 8007bca:	603b      	str	r3, [r7, #0]
 8007bcc:	e7fe      	b.n	8007bcc <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007bce:	4b09      	ldr	r3, [pc, #36]	; (8007bf4 <prvSwitchTimerLists+0xb8>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d1b5      	bne.n	8007b44 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007bd8:	4b06      	ldr	r3, [pc, #24]	; (8007bf4 <prvSwitchTimerLists+0xb8>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007bde:	4b06      	ldr	r3, [pc, #24]	; (8007bf8 <prvSwitchTimerLists+0xbc>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a04      	ldr	r2, [pc, #16]	; (8007bf4 <prvSwitchTimerLists+0xb8>)
 8007be4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007be6:	4a04      	ldr	r2, [pc, #16]	; (8007bf8 <prvSwitchTimerLists+0xbc>)
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	6013      	str	r3, [r2, #0]
}
 8007bec:	bf00      	nop
 8007bee:	3718      	adds	r7, #24
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	20000c90 	.word	0x20000c90
 8007bf8:	20000c94 	.word	0x20000c94

08007bfc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007c02:	f000 f929 	bl	8007e58 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007c06:	4b15      	ldr	r3, [pc, #84]	; (8007c5c <prvCheckForValidListAndQueue+0x60>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d120      	bne.n	8007c50 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007c0e:	4814      	ldr	r0, [pc, #80]	; (8007c60 <prvCheckForValidListAndQueue+0x64>)
 8007c10:	f7fe f89a 	bl	8005d48 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007c14:	4813      	ldr	r0, [pc, #76]	; (8007c64 <prvCheckForValidListAndQueue+0x68>)
 8007c16:	f7fe f897 	bl	8005d48 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007c1a:	4b13      	ldr	r3, [pc, #76]	; (8007c68 <prvCheckForValidListAndQueue+0x6c>)
 8007c1c:	4a10      	ldr	r2, [pc, #64]	; (8007c60 <prvCheckForValidListAndQueue+0x64>)
 8007c1e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007c20:	4b12      	ldr	r3, [pc, #72]	; (8007c6c <prvCheckForValidListAndQueue+0x70>)
 8007c22:	4a10      	ldr	r2, [pc, #64]	; (8007c64 <prvCheckForValidListAndQueue+0x68>)
 8007c24:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007c26:	2300      	movs	r3, #0
 8007c28:	9300      	str	r3, [sp, #0]
 8007c2a:	4b11      	ldr	r3, [pc, #68]	; (8007c70 <prvCheckForValidListAndQueue+0x74>)
 8007c2c:	4a11      	ldr	r2, [pc, #68]	; (8007c74 <prvCheckForValidListAndQueue+0x78>)
 8007c2e:	2110      	movs	r1, #16
 8007c30:	200a      	movs	r0, #10
 8007c32:	f7fe f9a1 	bl	8005f78 <xQueueGenericCreateStatic>
 8007c36:	4602      	mov	r2, r0
 8007c38:	4b08      	ldr	r3, [pc, #32]	; (8007c5c <prvCheckForValidListAndQueue+0x60>)
 8007c3a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007c3c:	4b07      	ldr	r3, [pc, #28]	; (8007c5c <prvCheckForValidListAndQueue+0x60>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d005      	beq.n	8007c50 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007c44:	4b05      	ldr	r3, [pc, #20]	; (8007c5c <prvCheckForValidListAndQueue+0x60>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	490b      	ldr	r1, [pc, #44]	; (8007c78 <prvCheckForValidListAndQueue+0x7c>)
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7fe fda4 	bl	8006798 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c50:	f000 f930 	bl	8007eb4 <vPortExitCritical>
}
 8007c54:	bf00      	nop
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	20000c98 	.word	0x20000c98
 8007c60:	20000c68 	.word	0x20000c68
 8007c64:	20000c7c 	.word	0x20000c7c
 8007c68:	20000c90 	.word	0x20000c90
 8007c6c:	20000c94 	.word	0x20000c94
 8007c70:	20000d44 	.word	0x20000d44
 8007c74:	20000ca4 	.word	0x20000ca4
 8007c78:	08008504 	.word	0x08008504

08007c7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b085      	sub	sp, #20
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	3b04      	subs	r3, #4
 8007c8c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007c94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	3b04      	subs	r3, #4
 8007c9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	f023 0201 	bic.w	r2, r3, #1
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	3b04      	subs	r3, #4
 8007caa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007cac:	4a08      	ldr	r2, [pc, #32]	; (8007cd0 <pxPortInitialiseStack+0x54>)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	3b14      	subs	r3, #20
 8007cb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	3b20      	subs	r3, #32
 8007cc2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3714      	adds	r7, #20
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bc80      	pop	{r7}
 8007cce:	4770      	bx	lr
 8007cd0:	08007cd5 	.word	0x08007cd5

08007cd4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007cde:	4b10      	ldr	r3, [pc, #64]	; (8007d20 <prvTaskExitError+0x4c>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ce6:	d009      	beq.n	8007cfc <prvTaskExitError+0x28>
 8007ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cec:	f383 8811 	msr	BASEPRI, r3
 8007cf0:	f3bf 8f6f 	isb	sy
 8007cf4:	f3bf 8f4f 	dsb	sy
 8007cf8:	60fb      	str	r3, [r7, #12]
 8007cfa:	e7fe      	b.n	8007cfa <prvTaskExitError+0x26>
 8007cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d00:	f383 8811 	msr	BASEPRI, r3
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007d0e:	bf00      	nop
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d0fc      	beq.n	8007d10 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007d16:	bf00      	nop
 8007d18:	3714      	adds	r7, #20
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bc80      	pop	{r7}
 8007d1e:	4770      	bx	lr
 8007d20:	20000024 	.word	0x20000024
	...

08007d30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007d30:	4b07      	ldr	r3, [pc, #28]	; (8007d50 <pxCurrentTCBConst2>)
 8007d32:	6819      	ldr	r1, [r3, #0]
 8007d34:	6808      	ldr	r0, [r1, #0]
 8007d36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007d3a:	f380 8809 	msr	PSP, r0
 8007d3e:	f3bf 8f6f 	isb	sy
 8007d42:	f04f 0000 	mov.w	r0, #0
 8007d46:	f380 8811 	msr	BASEPRI, r0
 8007d4a:	f04e 0e0d 	orr.w	lr, lr, #13
 8007d4e:	4770      	bx	lr

08007d50 <pxCurrentTCBConst2>:
 8007d50:	20000760 	.word	0x20000760
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007d54:	bf00      	nop
 8007d56:	bf00      	nop

08007d58 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007d58:	4806      	ldr	r0, [pc, #24]	; (8007d74 <prvPortStartFirstTask+0x1c>)
 8007d5a:	6800      	ldr	r0, [r0, #0]
 8007d5c:	6800      	ldr	r0, [r0, #0]
 8007d5e:	f380 8808 	msr	MSP, r0
 8007d62:	b662      	cpsie	i
 8007d64:	b661      	cpsie	f
 8007d66:	f3bf 8f4f 	dsb	sy
 8007d6a:	f3bf 8f6f 	isb	sy
 8007d6e:	df00      	svc	0
 8007d70:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007d72:	bf00      	nop
 8007d74:	e000ed08 	.word	0xe000ed08

08007d78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007d7e:	4b31      	ldr	r3, [pc, #196]	; (8007e44 <xPortStartScheduler+0xcc>)
 8007d80:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	22ff      	movs	r2, #255	; 0xff
 8007d8e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007d98:	78fb      	ldrb	r3, [r7, #3]
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007da0:	b2da      	uxtb	r2, r3
 8007da2:	4b29      	ldr	r3, [pc, #164]	; (8007e48 <xPortStartScheduler+0xd0>)
 8007da4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007da6:	4b29      	ldr	r3, [pc, #164]	; (8007e4c <xPortStartScheduler+0xd4>)
 8007da8:	2207      	movs	r2, #7
 8007daa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007dac:	e009      	b.n	8007dc2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007dae:	4b27      	ldr	r3, [pc, #156]	; (8007e4c <xPortStartScheduler+0xd4>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	3b01      	subs	r3, #1
 8007db4:	4a25      	ldr	r2, [pc, #148]	; (8007e4c <xPortStartScheduler+0xd4>)
 8007db6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007db8:	78fb      	ldrb	r3, [r7, #3]
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	005b      	lsls	r3, r3, #1
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007dc2:	78fb      	ldrb	r3, [r7, #3]
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dca:	2b80      	cmp	r3, #128	; 0x80
 8007dcc:	d0ef      	beq.n	8007dae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007dce:	4b1f      	ldr	r3, [pc, #124]	; (8007e4c <xPortStartScheduler+0xd4>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f1c3 0307 	rsb	r3, r3, #7
 8007dd6:	2b04      	cmp	r3, #4
 8007dd8:	d009      	beq.n	8007dee <xPortStartScheduler+0x76>
 8007dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dde:	f383 8811 	msr	BASEPRI, r3
 8007de2:	f3bf 8f6f 	isb	sy
 8007de6:	f3bf 8f4f 	dsb	sy
 8007dea:	60bb      	str	r3, [r7, #8]
 8007dec:	e7fe      	b.n	8007dec <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007dee:	4b17      	ldr	r3, [pc, #92]	; (8007e4c <xPortStartScheduler+0xd4>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	021b      	lsls	r3, r3, #8
 8007df4:	4a15      	ldr	r2, [pc, #84]	; (8007e4c <xPortStartScheduler+0xd4>)
 8007df6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007df8:	4b14      	ldr	r3, [pc, #80]	; (8007e4c <xPortStartScheduler+0xd4>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e00:	4a12      	ldr	r2, [pc, #72]	; (8007e4c <xPortStartScheduler+0xd4>)
 8007e02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	b2da      	uxtb	r2, r3
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007e0c:	4b10      	ldr	r3, [pc, #64]	; (8007e50 <xPortStartScheduler+0xd8>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a0f      	ldr	r2, [pc, #60]	; (8007e50 <xPortStartScheduler+0xd8>)
 8007e12:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007e16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007e18:	4b0d      	ldr	r3, [pc, #52]	; (8007e50 <xPortStartScheduler+0xd8>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a0c      	ldr	r2, [pc, #48]	; (8007e50 <xPortStartScheduler+0xd8>)
 8007e1e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007e22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007e24:	f000 f8b0 	bl	8007f88 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007e28:	4b0a      	ldr	r3, [pc, #40]	; (8007e54 <xPortStartScheduler+0xdc>)
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007e2e:	f7ff ff93 	bl	8007d58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007e32:	f7ff f8b9 	bl	8006fa8 <vTaskSwitchContext>
	prvTaskExitError();
 8007e36:	f7ff ff4d 	bl	8007cd4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3710      	adds	r7, #16
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	e000e400 	.word	0xe000e400
 8007e48:	20000d94 	.word	0x20000d94
 8007e4c:	20000d98 	.word	0x20000d98
 8007e50:	e000ed20 	.word	0xe000ed20
 8007e54:	20000024 	.word	0x20000024

08007e58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e62:	f383 8811 	msr	BASEPRI, r3
 8007e66:	f3bf 8f6f 	isb	sy
 8007e6a:	f3bf 8f4f 	dsb	sy
 8007e6e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007e70:	4b0e      	ldr	r3, [pc, #56]	; (8007eac <vPortEnterCritical+0x54>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	3301      	adds	r3, #1
 8007e76:	4a0d      	ldr	r2, [pc, #52]	; (8007eac <vPortEnterCritical+0x54>)
 8007e78:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007e7a:	4b0c      	ldr	r3, [pc, #48]	; (8007eac <vPortEnterCritical+0x54>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d10e      	bne.n	8007ea0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007e82:	4b0b      	ldr	r3, [pc, #44]	; (8007eb0 <vPortEnterCritical+0x58>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d009      	beq.n	8007ea0 <vPortEnterCritical+0x48>
 8007e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e90:	f383 8811 	msr	BASEPRI, r3
 8007e94:	f3bf 8f6f 	isb	sy
 8007e98:	f3bf 8f4f 	dsb	sy
 8007e9c:	603b      	str	r3, [r7, #0]
 8007e9e:	e7fe      	b.n	8007e9e <vPortEnterCritical+0x46>
	}
}
 8007ea0:	bf00      	nop
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bc80      	pop	{r7}
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop
 8007eac:	20000024 	.word	0x20000024
 8007eb0:	e000ed04 	.word	0xe000ed04

08007eb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007eba:	4b10      	ldr	r3, [pc, #64]	; (8007efc <vPortExitCritical+0x48>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d109      	bne.n	8007ed6 <vPortExitCritical+0x22>
 8007ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec6:	f383 8811 	msr	BASEPRI, r3
 8007eca:	f3bf 8f6f 	isb	sy
 8007ece:	f3bf 8f4f 	dsb	sy
 8007ed2:	607b      	str	r3, [r7, #4]
 8007ed4:	e7fe      	b.n	8007ed4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007ed6:	4b09      	ldr	r3, [pc, #36]	; (8007efc <vPortExitCritical+0x48>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	3b01      	subs	r3, #1
 8007edc:	4a07      	ldr	r2, [pc, #28]	; (8007efc <vPortExitCritical+0x48>)
 8007ede:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007ee0:	4b06      	ldr	r3, [pc, #24]	; (8007efc <vPortExitCritical+0x48>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d104      	bne.n	8007ef2 <vPortExitCritical+0x3e>
 8007ee8:	2300      	movs	r3, #0
 8007eea:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007ef2:	bf00      	nop
 8007ef4:	370c      	adds	r7, #12
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bc80      	pop	{r7}
 8007efa:	4770      	bx	lr
 8007efc:	20000024 	.word	0x20000024

08007f00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007f00:	f3ef 8009 	mrs	r0, PSP
 8007f04:	f3bf 8f6f 	isb	sy
 8007f08:	4b0d      	ldr	r3, [pc, #52]	; (8007f40 <pxCurrentTCBConst>)
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007f10:	6010      	str	r0, [r2, #0]
 8007f12:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007f16:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007f1a:	f380 8811 	msr	BASEPRI, r0
 8007f1e:	f7ff f843 	bl	8006fa8 <vTaskSwitchContext>
 8007f22:	f04f 0000 	mov.w	r0, #0
 8007f26:	f380 8811 	msr	BASEPRI, r0
 8007f2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007f2e:	6819      	ldr	r1, [r3, #0]
 8007f30:	6808      	ldr	r0, [r1, #0]
 8007f32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007f36:	f380 8809 	msr	PSP, r0
 8007f3a:	f3bf 8f6f 	isb	sy
 8007f3e:	4770      	bx	lr

08007f40 <pxCurrentTCBConst>:
 8007f40:	20000760 	.word	0x20000760
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007f44:	bf00      	nop
 8007f46:	bf00      	nop

08007f48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
	__asm volatile
 8007f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f52:	f383 8811 	msr	BASEPRI, r3
 8007f56:	f3bf 8f6f 	isb	sy
 8007f5a:	f3bf 8f4f 	dsb	sy
 8007f5e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007f60:	f7fe ff64 	bl	8006e2c <xTaskIncrementTick>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d003      	beq.n	8007f72 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007f6a:	4b06      	ldr	r3, [pc, #24]	; (8007f84 <SysTick_Handler+0x3c>)
 8007f6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f70:	601a      	str	r2, [r3, #0]
 8007f72:	2300      	movs	r3, #0
 8007f74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007f7c:	bf00      	nop
 8007f7e:	3708      	adds	r7, #8
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	e000ed04 	.word	0xe000ed04

08007f88 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007f88:	b480      	push	{r7}
 8007f8a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007f8c:	4b0a      	ldr	r3, [pc, #40]	; (8007fb8 <vPortSetupTimerInterrupt+0x30>)
 8007f8e:	2200      	movs	r2, #0
 8007f90:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007f92:	4b0a      	ldr	r3, [pc, #40]	; (8007fbc <vPortSetupTimerInterrupt+0x34>)
 8007f94:	2200      	movs	r2, #0
 8007f96:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007f98:	4b09      	ldr	r3, [pc, #36]	; (8007fc0 <vPortSetupTimerInterrupt+0x38>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a09      	ldr	r2, [pc, #36]	; (8007fc4 <vPortSetupTimerInterrupt+0x3c>)
 8007f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007fa2:	099b      	lsrs	r3, r3, #6
 8007fa4:	4a08      	ldr	r2, [pc, #32]	; (8007fc8 <vPortSetupTimerInterrupt+0x40>)
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007faa:	4b03      	ldr	r3, [pc, #12]	; (8007fb8 <vPortSetupTimerInterrupt+0x30>)
 8007fac:	2207      	movs	r2, #7
 8007fae:	601a      	str	r2, [r3, #0]
}
 8007fb0:	bf00      	nop
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bc80      	pop	{r7}
 8007fb6:	4770      	bx	lr
 8007fb8:	e000e010 	.word	0xe000e010
 8007fbc:	e000e018 	.word	0xe000e018
 8007fc0:	20000018 	.word	0x20000018
 8007fc4:	10624dd3 	.word	0x10624dd3
 8007fc8:	e000e014 	.word	0xe000e014

08007fcc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007fcc:	b480      	push	{r7}
 8007fce:	b085      	sub	sp, #20
 8007fd0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007fd2:	f3ef 8305 	mrs	r3, IPSR
 8007fd6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2b0f      	cmp	r3, #15
 8007fdc:	d913      	bls.n	8008006 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007fde:	4a15      	ldr	r2, [pc, #84]	; (8008034 <vPortValidateInterruptPriority+0x68>)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007fe8:	4b13      	ldr	r3, [pc, #76]	; (8008038 <vPortValidateInterruptPriority+0x6c>)
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	7afa      	ldrb	r2, [r7, #11]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d209      	bcs.n	8008006 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8007ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff6:	f383 8811 	msr	BASEPRI, r3
 8007ffa:	f3bf 8f6f 	isb	sy
 8007ffe:	f3bf 8f4f 	dsb	sy
 8008002:	607b      	str	r3, [r7, #4]
 8008004:	e7fe      	b.n	8008004 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008006:	4b0d      	ldr	r3, [pc, #52]	; (800803c <vPortValidateInterruptPriority+0x70>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800800e:	4b0c      	ldr	r3, [pc, #48]	; (8008040 <vPortValidateInterruptPriority+0x74>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	429a      	cmp	r2, r3
 8008014:	d909      	bls.n	800802a <vPortValidateInterruptPriority+0x5e>
 8008016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801a:	f383 8811 	msr	BASEPRI, r3
 800801e:	f3bf 8f6f 	isb	sy
 8008022:	f3bf 8f4f 	dsb	sy
 8008026:	603b      	str	r3, [r7, #0]
 8008028:	e7fe      	b.n	8008028 <vPortValidateInterruptPriority+0x5c>
	}
 800802a:	bf00      	nop
 800802c:	3714      	adds	r7, #20
 800802e:	46bd      	mov	sp, r7
 8008030:	bc80      	pop	{r7}
 8008032:	4770      	bx	lr
 8008034:	e000e3f0 	.word	0xe000e3f0
 8008038:	20000d94 	.word	0x20000d94
 800803c:	e000ed0c 	.word	0xe000ed0c
 8008040:	20000d98 	.word	0x20000d98

08008044 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b08a      	sub	sp, #40	; 0x28
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800804c:	2300      	movs	r3, #0
 800804e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008050:	f7fe fe34 	bl	8006cbc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008054:	4b57      	ldr	r3, [pc, #348]	; (80081b4 <pvPortMalloc+0x170>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d101      	bne.n	8008060 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800805c:	f000 f90c 	bl	8008278 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008060:	4b55      	ldr	r3, [pc, #340]	; (80081b8 <pvPortMalloc+0x174>)
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4013      	ands	r3, r2
 8008068:	2b00      	cmp	r3, #0
 800806a:	f040 808c 	bne.w	8008186 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d01c      	beq.n	80080ae <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008074:	2208      	movs	r2, #8
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4413      	add	r3, r2
 800807a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f003 0307 	and.w	r3, r3, #7
 8008082:	2b00      	cmp	r3, #0
 8008084:	d013      	beq.n	80080ae <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f023 0307 	bic.w	r3, r3, #7
 800808c:	3308      	adds	r3, #8
 800808e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f003 0307 	and.w	r3, r3, #7
 8008096:	2b00      	cmp	r3, #0
 8008098:	d009      	beq.n	80080ae <pvPortMalloc+0x6a>
 800809a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809e:	f383 8811 	msr	BASEPRI, r3
 80080a2:	f3bf 8f6f 	isb	sy
 80080a6:	f3bf 8f4f 	dsb	sy
 80080aa:	617b      	str	r3, [r7, #20]
 80080ac:	e7fe      	b.n	80080ac <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d068      	beq.n	8008186 <pvPortMalloc+0x142>
 80080b4:	4b41      	ldr	r3, [pc, #260]	; (80081bc <pvPortMalloc+0x178>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d863      	bhi.n	8008186 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80080be:	4b40      	ldr	r3, [pc, #256]	; (80081c0 <pvPortMalloc+0x17c>)
 80080c0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80080c2:	4b3f      	ldr	r3, [pc, #252]	; (80081c0 <pvPortMalloc+0x17c>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80080c8:	e004      	b.n	80080d4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80080ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080cc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80080ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80080d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d903      	bls.n	80080e6 <pvPortMalloc+0xa2>
 80080de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1f1      	bne.n	80080ca <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80080e6:	4b33      	ldr	r3, [pc, #204]	; (80081b4 <pvPortMalloc+0x170>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d04a      	beq.n	8008186 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80080f0:	6a3b      	ldr	r3, [r7, #32]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2208      	movs	r2, #8
 80080f6:	4413      	add	r3, r2
 80080f8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80080fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	6a3b      	ldr	r3, [r7, #32]
 8008100:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008104:	685a      	ldr	r2, [r3, #4]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	1ad2      	subs	r2, r2, r3
 800810a:	2308      	movs	r3, #8
 800810c:	005b      	lsls	r3, r3, #1
 800810e:	429a      	cmp	r2, r3
 8008110:	d91e      	bls.n	8008150 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	4413      	add	r3, r2
 8008118:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	f003 0307 	and.w	r3, r3, #7
 8008120:	2b00      	cmp	r3, #0
 8008122:	d009      	beq.n	8008138 <pvPortMalloc+0xf4>
 8008124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008128:	f383 8811 	msr	BASEPRI, r3
 800812c:	f3bf 8f6f 	isb	sy
 8008130:	f3bf 8f4f 	dsb	sy
 8008134:	613b      	str	r3, [r7, #16]
 8008136:	e7fe      	b.n	8008136 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813a:	685a      	ldr	r2, [r3, #4]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	1ad2      	subs	r2, r2, r3
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800814a:	69b8      	ldr	r0, [r7, #24]
 800814c:	f000 f8f6 	bl	800833c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008150:	4b1a      	ldr	r3, [pc, #104]	; (80081bc <pvPortMalloc+0x178>)
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	1ad3      	subs	r3, r2, r3
 800815a:	4a18      	ldr	r2, [pc, #96]	; (80081bc <pvPortMalloc+0x178>)
 800815c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800815e:	4b17      	ldr	r3, [pc, #92]	; (80081bc <pvPortMalloc+0x178>)
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	4b18      	ldr	r3, [pc, #96]	; (80081c4 <pvPortMalloc+0x180>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	429a      	cmp	r2, r3
 8008168:	d203      	bcs.n	8008172 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800816a:	4b14      	ldr	r3, [pc, #80]	; (80081bc <pvPortMalloc+0x178>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a15      	ldr	r2, [pc, #84]	; (80081c4 <pvPortMalloc+0x180>)
 8008170:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008174:	685a      	ldr	r2, [r3, #4]
 8008176:	4b10      	ldr	r3, [pc, #64]	; (80081b8 <pvPortMalloc+0x174>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	431a      	orrs	r2, r3
 800817c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008182:	2200      	movs	r2, #0
 8008184:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008186:	f7fe fda7 	bl	8006cd8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	f003 0307 	and.w	r3, r3, #7
 8008190:	2b00      	cmp	r3, #0
 8008192:	d009      	beq.n	80081a8 <pvPortMalloc+0x164>
 8008194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008198:	f383 8811 	msr	BASEPRI, r3
 800819c:	f3bf 8f6f 	isb	sy
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	60fb      	str	r3, [r7, #12]
 80081a6:	e7fe      	b.n	80081a6 <pvPortMalloc+0x162>
	return pvReturn;
 80081a8:	69fb      	ldr	r3, [r7, #28]
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3728      	adds	r7, #40	; 0x28
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	200025a4 	.word	0x200025a4
 80081b8:	200025b0 	.word	0x200025b0
 80081bc:	200025a8 	.word	0x200025a8
 80081c0:	2000259c 	.word	0x2000259c
 80081c4:	200025ac 	.word	0x200025ac

080081c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b086      	sub	sp, #24
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d046      	beq.n	8008268 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80081da:	2308      	movs	r3, #8
 80081dc:	425b      	negs	r3, r3
 80081de:	697a      	ldr	r2, [r7, #20]
 80081e0:	4413      	add	r3, r2
 80081e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	685a      	ldr	r2, [r3, #4]
 80081ec:	4b20      	ldr	r3, [pc, #128]	; (8008270 <vPortFree+0xa8>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4013      	ands	r3, r2
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d109      	bne.n	800820a <vPortFree+0x42>
 80081f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fa:	f383 8811 	msr	BASEPRI, r3
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	f3bf 8f4f 	dsb	sy
 8008206:	60fb      	str	r3, [r7, #12]
 8008208:	e7fe      	b.n	8008208 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d009      	beq.n	8008226 <vPortFree+0x5e>
 8008212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	60bb      	str	r3, [r7, #8]
 8008224:	e7fe      	b.n	8008224 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	685a      	ldr	r2, [r3, #4]
 800822a:	4b11      	ldr	r3, [pc, #68]	; (8008270 <vPortFree+0xa8>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4013      	ands	r3, r2
 8008230:	2b00      	cmp	r3, #0
 8008232:	d019      	beq.n	8008268 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d115      	bne.n	8008268 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	685a      	ldr	r2, [r3, #4]
 8008240:	4b0b      	ldr	r3, [pc, #44]	; (8008270 <vPortFree+0xa8>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	43db      	mvns	r3, r3
 8008246:	401a      	ands	r2, r3
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800824c:	f7fe fd36 	bl	8006cbc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	685a      	ldr	r2, [r3, #4]
 8008254:	4b07      	ldr	r3, [pc, #28]	; (8008274 <vPortFree+0xac>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4413      	add	r3, r2
 800825a:	4a06      	ldr	r2, [pc, #24]	; (8008274 <vPortFree+0xac>)
 800825c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800825e:	6938      	ldr	r0, [r7, #16]
 8008260:	f000 f86c 	bl	800833c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008264:	f7fe fd38 	bl	8006cd8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008268:	bf00      	nop
 800826a:	3718      	adds	r7, #24
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}
 8008270:	200025b0 	.word	0x200025b0
 8008274:	200025a8 	.word	0x200025a8

08008278 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008278:	b480      	push	{r7}
 800827a:	b085      	sub	sp, #20
 800827c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800827e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008282:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008284:	4b27      	ldr	r3, [pc, #156]	; (8008324 <prvHeapInit+0xac>)
 8008286:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f003 0307 	and.w	r3, r3, #7
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00c      	beq.n	80082ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	3307      	adds	r3, #7
 8008296:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f023 0307 	bic.w	r3, r3, #7
 800829e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80082a0:	68ba      	ldr	r2, [r7, #8]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	1ad3      	subs	r3, r2, r3
 80082a6:	4a1f      	ldr	r2, [pc, #124]	; (8008324 <prvHeapInit+0xac>)
 80082a8:	4413      	add	r3, r2
 80082aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80082b0:	4a1d      	ldr	r2, [pc, #116]	; (8008328 <prvHeapInit+0xb0>)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80082b6:	4b1c      	ldr	r3, [pc, #112]	; (8008328 <prvHeapInit+0xb0>)
 80082b8:	2200      	movs	r2, #0
 80082ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	68ba      	ldr	r2, [r7, #8]
 80082c0:	4413      	add	r3, r2
 80082c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80082c4:	2208      	movs	r2, #8
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	1a9b      	subs	r3, r3, r2
 80082ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f023 0307 	bic.w	r3, r3, #7
 80082d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	4a15      	ldr	r2, [pc, #84]	; (800832c <prvHeapInit+0xb4>)
 80082d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80082da:	4b14      	ldr	r3, [pc, #80]	; (800832c <prvHeapInit+0xb4>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2200      	movs	r2, #0
 80082e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80082e2:	4b12      	ldr	r3, [pc, #72]	; (800832c <prvHeapInit+0xb4>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2200      	movs	r2, #0
 80082e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	1ad2      	subs	r2, r2, r3
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80082f8:	4b0c      	ldr	r3, [pc, #48]	; (800832c <prvHeapInit+0xb4>)
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	4a0a      	ldr	r2, [pc, #40]	; (8008330 <prvHeapInit+0xb8>)
 8008306:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	4a09      	ldr	r2, [pc, #36]	; (8008334 <prvHeapInit+0xbc>)
 800830e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008310:	4b09      	ldr	r3, [pc, #36]	; (8008338 <prvHeapInit+0xc0>)
 8008312:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008316:	601a      	str	r2, [r3, #0]
}
 8008318:	bf00      	nop
 800831a:	3714      	adds	r7, #20
 800831c:	46bd      	mov	sp, r7
 800831e:	bc80      	pop	{r7}
 8008320:	4770      	bx	lr
 8008322:	bf00      	nop
 8008324:	20000d9c 	.word	0x20000d9c
 8008328:	2000259c 	.word	0x2000259c
 800832c:	200025a4 	.word	0x200025a4
 8008330:	200025ac 	.word	0x200025ac
 8008334:	200025a8 	.word	0x200025a8
 8008338:	200025b0 	.word	0x200025b0

0800833c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008344:	4b27      	ldr	r3, [pc, #156]	; (80083e4 <prvInsertBlockIntoFreeList+0xa8>)
 8008346:	60fb      	str	r3, [r7, #12]
 8008348:	e002      	b.n	8008350 <prvInsertBlockIntoFreeList+0x14>
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	60fb      	str	r3, [r7, #12]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	429a      	cmp	r2, r3
 8008358:	d8f7      	bhi.n	800834a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	68ba      	ldr	r2, [r7, #8]
 8008364:	4413      	add	r3, r2
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	429a      	cmp	r2, r3
 800836a:	d108      	bne.n	800837e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	685a      	ldr	r2, [r3, #4]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	441a      	add	r2, r3
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	68ba      	ldr	r2, [r7, #8]
 8008388:	441a      	add	r2, r3
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	429a      	cmp	r2, r3
 8008390:	d118      	bne.n	80083c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	4b14      	ldr	r3, [pc, #80]	; (80083e8 <prvInsertBlockIntoFreeList+0xac>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	429a      	cmp	r2, r3
 800839c:	d00d      	beq.n	80083ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	685a      	ldr	r2, [r3, #4]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	441a      	add	r2, r3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	601a      	str	r2, [r3, #0]
 80083b8:	e008      	b.n	80083cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80083ba:	4b0b      	ldr	r3, [pc, #44]	; (80083e8 <prvInsertBlockIntoFreeList+0xac>)
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	601a      	str	r2, [r3, #0]
 80083c2:	e003      	b.n	80083cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d002      	beq.n	80083da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083da:	bf00      	nop
 80083dc:	3714      	adds	r7, #20
 80083de:	46bd      	mov	sp, r7
 80083e0:	bc80      	pop	{r7}
 80083e2:	4770      	bx	lr
 80083e4:	2000259c 	.word	0x2000259c
 80083e8:	200025a4 	.word	0x200025a4

080083ec <__libc_init_array>:
 80083ec:	b570      	push	{r4, r5, r6, lr}
 80083ee:	2500      	movs	r5, #0
 80083f0:	4e0c      	ldr	r6, [pc, #48]	; (8008424 <__libc_init_array+0x38>)
 80083f2:	4c0d      	ldr	r4, [pc, #52]	; (8008428 <__libc_init_array+0x3c>)
 80083f4:	1ba4      	subs	r4, r4, r6
 80083f6:	10a4      	asrs	r4, r4, #2
 80083f8:	42a5      	cmp	r5, r4
 80083fa:	d109      	bne.n	8008410 <__libc_init_array+0x24>
 80083fc:	f000 f82e 	bl	800845c <_init>
 8008400:	2500      	movs	r5, #0
 8008402:	4e0a      	ldr	r6, [pc, #40]	; (800842c <__libc_init_array+0x40>)
 8008404:	4c0a      	ldr	r4, [pc, #40]	; (8008430 <__libc_init_array+0x44>)
 8008406:	1ba4      	subs	r4, r4, r6
 8008408:	10a4      	asrs	r4, r4, #2
 800840a:	42a5      	cmp	r5, r4
 800840c:	d105      	bne.n	800841a <__libc_init_array+0x2e>
 800840e:	bd70      	pop	{r4, r5, r6, pc}
 8008410:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008414:	4798      	blx	r3
 8008416:	3501      	adds	r5, #1
 8008418:	e7ee      	b.n	80083f8 <__libc_init_array+0xc>
 800841a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800841e:	4798      	blx	r3
 8008420:	3501      	adds	r5, #1
 8008422:	e7f2      	b.n	800840a <__libc_init_array+0x1e>
 8008424:	080085b4 	.word	0x080085b4
 8008428:	080085b4 	.word	0x080085b4
 800842c:	080085b4 	.word	0x080085b4
 8008430:	080085b8 	.word	0x080085b8

08008434 <memcpy>:
 8008434:	b510      	push	{r4, lr}
 8008436:	1e43      	subs	r3, r0, #1
 8008438:	440a      	add	r2, r1
 800843a:	4291      	cmp	r1, r2
 800843c:	d100      	bne.n	8008440 <memcpy+0xc>
 800843e:	bd10      	pop	{r4, pc}
 8008440:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008444:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008448:	e7f7      	b.n	800843a <memcpy+0x6>

0800844a <memset>:
 800844a:	4603      	mov	r3, r0
 800844c:	4402      	add	r2, r0
 800844e:	4293      	cmp	r3, r2
 8008450:	d100      	bne.n	8008454 <memset+0xa>
 8008452:	4770      	bx	lr
 8008454:	f803 1b01 	strb.w	r1, [r3], #1
 8008458:	e7f9      	b.n	800844e <memset+0x4>
	...

0800845c <_init>:
 800845c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800845e:	bf00      	nop
 8008460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008462:	bc08      	pop	{r3}
 8008464:	469e      	mov	lr, r3
 8008466:	4770      	bx	lr

08008468 <_fini>:
 8008468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800846a:	bf00      	nop
 800846c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800846e:	bc08      	pop	{r3}
 8008470:	469e      	mov	lr, r3
 8008472:	4770      	bx	lr
